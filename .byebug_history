c
user.aud
user
user = User.find_by(email: session[:email])
session[:email]
c
session
c
@auth_id = @fusion_create_response["user"]["id"]
@fusion_create_response["user"]["id"]
@fusion_create_response["user"]
@fusion_create_response
  @fusion_create_response = HTTParty.get("#{ENV['FUSION_AUTH_APPLICATION_URL']}/api/user?email=#{USER_EMAIL}",
                                          :headers => { 'Content-Type' => 'application/json',
                                                        'X-FusionAuth-TenantId' => ENV["FUSIONAUTH_TENANT_ID"],
                                                        'Authorization' => ENV["AUTHORIZATION"]
                                          })
USER_EMAIL
ENV["AUTHORIZATION"]
ENV["FUSIONAUTH_TENANT_ID"]
  @fusion_create_response = HTTParty.post("#{ENV['FUSION_AUTH_APPLICATION_URL']}/api/user?email=#{USER_EMAIL}",
                                          :headers => { 'Content-Type' => 'application/json',
                                                        'X-FusionAuth-TenantId' => ENV["FUSIONAUTH_TENANT_ID"],
                                                        'Authorization' => ENV["AUTHORIZATION"]
                                          })
USER_EMAIL
@fusion_create_response
n
c
@fusion_create_response.code
@fusion_create_response.body.to_json
@fusion_create_response.body
@fusion_create_response.body.code
@fusion_create_response.body
@fusion_create_response.methods
@fusion_create_response
@fusion_create_response.message
@fusion_create_response.mesage
@fusion_create_response.code
@fusion_create_response["code"]
@fusion_create_response[:code]
@fusion_create_response
c
l=
c
c]
b
@auth_super_admin_user
n
c
ENV["AUTHORIZATION"]
ENV["FUSIONAUTH_TENANT_ID"]
object
"#{ENV['FUSION_AUTH_APPLICATION_URL']}/api/user/"
"#{ENV['FUSION_AUTH_APPLICATION_URL']}/api/user/"]
#{ENV['FUSION_AUTH_APPLICATION_URL']}/api/user/
FUSION_AUTH_APPLICATION_URL#{ENV['FUSION_AUTH_APPLICATION_URL']}/api/user/
USER_PASSWORD
USER_FIRST_NAME + ' ' + USER_LAST_NAME
USER_FIRST_NAME + USER_LAST_NAME
USER_FIRST_NAME
USER_EMAIL
c
@fusion_create_response
n
ENV["AUTHORIZATION"]
ENV["FUSIONAUTH_TENANT_ID"]
ENV['FUSION_AUTH_APPLICATION_URL']
c
ENV['FUSIONAUTH_APPLICATION_URL']
c
v
c
response
c
response
c
response
c
response
c
response
c
response
c
response
c
response
c
.c
c
response
c
response
c
response
c
response
n
c
response = HTTParty.post('http://localhost:9011/api/user', body: object.to_json, :headers => { 'Content-Type' => 'application/json' })
c
response.code
response.message
response = HTTParty.post('http://localhost:9011/api/user', body: object.to_json, :headers => { 'Content-Type' => 'application/json' })
5fb699ef-f22d-46c5-9d2a-0289ee7bbe7e
c
response = HTTParty.post('http://localhost:9011/api/user', body: object.to_json, :headers => { 'Content-Type' => 'application/json' })
e4bc44b7-feed-4f73-93d8-a966dcffa20
response = HTTParty.post('http://localhost:9011/api/user', body: object.to_json, :headers => { 'Content-Type' => 'application/json' })
c
response = HTTParty.post('http://localhost:9011/api/user', body: object.to_json, :headers => { 'Content-Type' => 'application/json' })
c
response = HTTParty.post('http://localhost:9011/api/user', body: object.to_json, :headers => { 'Content-Type' => 'application/json' })
object
e4bc44b7-feed-4f73-93d8-a966dcffa200
response = HTTParty.post('http://localhost:9011/api/user', body: object.to_json, :headers => { 'Content-Type' => 'application/json' })
c
response.headers.inspect
response = HTTParty.post('http://localhost:9011/api/user', body: object.to_json, :headers => { 'Content-Type' => 'application/json' })
c
3c
c
response = HTTParty.post('http://localhost:9011/api/user', body: object.to_json, :headers => { 'Content-Type' => 'application/json' })
c
response = HTTParty.post('http://localhost:9011/api/user', body: object.to_json, :headers => { 'Content-Type' => 'application/json' })
HTTParty.post('http://localhost:9011/api/user', body: object, :headers => { 'Content-Type' => 'application/json' })
object
c
response.body
response
object.to_json
object
response = HTTParty.post('http://localhost:9011/api/user', body: object, :headers => { 'Content-Type' => 'application/json' })
c
response = HTTParty.post('http://localhost:9011/api/user', body: object)
c
session[:user_jwt]
session
c
session[:user_jwt]["value"][0]["email"]
session[:user_jwt]["value"][0]
@email
session[:user_jwt]["value"][0]
session[:user_jwt]["value"]
session[:user_jwt]
session[:user_jwt][0]
session[:user_jwt][0]["email"]
session[:user_jwt]["email"]
session[:user_jwt][:email]
session[:user_jwt]
session
c
session[:user_jwt]["value"].first
session[:user_jwt]["value"]
session[:user_jwt]["value"])
session[:user_jwt]["value"]
session[:user_jwt]
c
session[:user_jwt]
session[:user_jwt] = {value: decoded, httponly: true}
session[:user_jwt]
session[:user_jwt][:value][:value]
session[:user_jwt][:value]
session[:user_jwt]
{value: decoded, httponly: true}
value: decoded
session[:user_jwt]
c
session[:user_jwt]
session[:user_jwt][:value] = 1
session[:user_jwt]
session[:user_jwt][:value]
c
session[:user_jwt][:value]
session[:user_jwt] = {value: decoded, httponly: true}
session[:user_jwt]
session
decoded
c
session[:user_jwt][:value]
session[:user_jwt]
session[:user_jwt][:value]
session[:user_jwt][:value].first
session[:user_jwt]
c
decoded[0]["email_verified"]
decoded[0]['email']
decoded[0]["authenticationType"]
decoded[0]["jti"]
decoded[0]["sub"]
decoded[0]["iss"]
decoded[0]["iat"]
decoded[0]["exp"]
decoded[0]["aud"]
decoded
c
decoded[0]['email']
decoded[0]['email.']
decoded[0]
decoded
c
decoded = TokenDecoder.new(token, @oauth_client.id).decode
JWT.decode(token,'/yh5FZFA32Au2Rijp06z9Xb2btRnu70Nbf8RV+qviS0=',true,{ verify_iss: true, iss: @iss, verify_aud: true, aud: @oauth_client.id, algorithm: 'HS256'})
decoded = TokenDecoder.new(token, @oauth_client.id).decode
JWT.decode(token,'/yh5FZFA32Au2Rijp06z9Xb2btRnu70Nbf8RV+qviS0=',true,{ verify_iss: true, iss: @iss, verify_aud: true, aud: @oauth_client.id, algorithm: 'HS256'})
token = response.to_hash[:access_token]
response = @oauth_client.auth_code.get_token(params[:code])
c
JWT.decode(token,'/yh5FZFA32Au2Rijp06z9Xb2btRnu70Nbf8RV+qviS0=',true,{ verify_iss: true, iss: @iss, verify_aud: true, aud: @oauth_client.id, algorithm: 'HS256'})
JWT.decode(token,'ee39a480-02b4-6da8-c127-f763c795c4ea',true,{ verify_iss: true, iss: @iss, verify_aud: true, aud: @oauth_client.id, algorithm: 'HS256'})
JWT
decoded = TokenDecoder.new(token, @oauth_client.id).decode
token = response.to_hash[:access_token]
response = @oauth_client.auth_code.get_token(params[:code])
c
decoded = TokenDecoder.new(token, @oauth_client.id).decode
token = response.to_hash[:access_token]
response = @oauth_client.auth_code.get_token(params[:code])
c
decoded = TokenDecoder.new(token, @oauth_client.id).decode
token = response.to_hash[:access_token]
response = @oauth_client.auth_code.get_token(params[:code])
c
token = response.to_hash[:access_token]
response
decoded = TokenDecoder.new(token, @oauth_client.id).decode
@token
token
@oauth_client.id
decoded = TokenDecoder.new(token, @oauth_client.id).decode
token = response.to_hash[:access_token]
response
response = @oauth_client.auth_code.get_token(params[:code])
c
@oauth_client.auth_code.get_token(params[:code])
c
@oauth_client.auth_code.get_token(params[:code])
@oauth_client.auth_code
@oauth_client
params[:code]
params
c
response = @oauth_client.auth_code.get_token(params[:code])
params
c
self.renderer
n
@oauth_client.auth_code
c
params
c
params
c
params[:code]
@oauth_client.auth_code
