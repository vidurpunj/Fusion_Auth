{"version":3,"sources":["prime-es6-1.6.4.js","../src/main/js/Browser.js","../src/main/js/Document/PrimeElement.js","../src/main/js/Document/PrimeElementList.js","../src/main/js/PrimeDocument.js","../src/main/js/Utils.js","../src/main/js/Widgets/Overlay.js","../src/main/js/PrimeRequest.js","../src/main/js/Window.js","../src/main/js/Widgets/Draggable.js","../src/main/js/Widgets/AJAXDialog.js","../src/main/js/Events.js","../src/main/js/Date.js","../src/main/js/Widgets/DateTimePicker.js","../src/main/js/Widgets/Dismissable.js","../src/main/js/Widgets/HTMLDialog.js","../src/main/js/Widgets/InProgress.js","../src/main/js/Widgets/Searcher.js","../src/main/js/Widgets/MultipleSelect.js","../src/main/js/Widgets/Reorder.js","../src/main/js/Widgets/Touchable.js","../src/main/js/Widgets/SideMenu.js","../src/main/js/Storage.js","../src/main/js/Widgets/SplitButton.js","../src/main/js/Widgets/Table.js","../src/main/js/Widgets/Tabs.js","../src/main/js/Widgets/Tooltip.js","../src/main/js/Widgets/TreeView.js","../src/main/js/Effects.js","../src/main/js/DataQueue.js","../src/main/js/Template.js","../src/main/js/Prime.js"],"names":["Prime","exports","Browser","detect","this","name","_searchString","dataBrowser","version","_searchVersion","navigator","userAgent","appVersion","os","dataOS","data","i","length","dataString","string","dataProp","prop","versionSearchString","versionSearch","identity","indexOf","subString","index","parseFloat","substring","vendor","window","opera","platform","blockElementRegexp","mouseEventsRegexp","htmlEventsRegexp","anonymousId","ieAlphaRegexp","PrimeElement","element","_classCallCheck","Utils","isDefined","nodeType","TypeError","bindAll","domElement","customEventListeners","eventListeners","_createClass","key","value","classNames","currentClassName","className","currentClassNameList","split","spaceRegex","newClassNameList","push","join","event","selector","listener","delegatedListeners","allDelegatedListeners","addEventListener","_handleDelegatedEvent","parentNode","removeChild","appendChild","html","insertAdjacentHTML","memo","target","bubbling","cancelable","evt","document","createEventObject","cancelBubble","fireEvent","createEvent","test","initMouseEvent","initEvent","dispatchEvent","hasOwnProperty","eventObj","focus","top","e","offsetTop","offsetParent","attr","attributes","getNamedItem","attrs","hasAttributes","offsetHeight","offsetWidth","getBoundingClientRect","bottom","PrimeElementList","children","matched","child","matches","currentStyle","defaultView","getComputedStyle","box","body","documentElement","scrollTop","pageYOffset","scrollLeft","pageXOffset","clientTop","clientLeft","left","Math","round","dataset","getAttributes","dataName","replace","g","toUpperCase","getDataSet","lastChild","getChildren","computedStyle","borderTop","borderBottom","parseCSSMeasure","innerHTML","id","elementList","sibling","nextSibling","offsetLeft","opacity","filter","undefined","match","getTagName","options","marginTop","marginBottom","outerHTML","marginLeft","marginRight","parentElement","previousSibling","getParent","parseInt","right","scrollHeight","scrollWidth","texts","tagName","selected","text","values","type","form","PrimeDocument","queryUp","query","each","isChecked","getValue","convertStyleName","style","innerText","textContent","borderLeft","borderRight","currentClassNames","findClassNameList","display","insertBefore","textNode","createTextNode","checked","parent","disabled","activeElement","firstChild","queryFirst","queryLast","_internalRemoveEventListener","removeAttribute","removeClassNameList","removeFromArray","listeners","pattern","range","selection","createTextRange","moveToElementText","select","getSelection","createRange","selectNodeContents","removeAllRanges","addRange","scrollIntoView","position","toString","setAttribute","attribute","createAttribute","nodeValue","setAttributeNode","toLowerCase","height","setStyle","newHTML","getHTML","leftString","arguments","isArray","Array","prototype","slice","call","setChecked","styles","newText","getTextContent","topString","width","displayValue","hasClass","removeClass","addClass","removeFromDOM","elementString","properties","newElement","setHTML","getOuterHTML","_callMatchedListeners","bubbles","isPropagationStopped","scopedListeners","isImmediatePropagationStopped","removeEventListener","detachEvent","customListeners","get","set","Element","querySelectorAll","Event","_stopPropagation","stopPropagation","apply","_stopImmediatePropagation","stopImmediatePropagation","elements","_proxyToElement","iterationFunction","predicate","args","readyFunctions","tagRegexp","bodyElement","addDelegatedEventListener","max","clientHeight","clientWidth","documentString","DOMParser","parseFromString","result","exec","createElement","setId","callback","readyState","_callReadyListeners","attachEvent","appendToElement","appendHTML","getLastChild","getElementById","querySelector","domElements","SyntaxError","readyFunction","shift","proto","nativeParse","ex","markup","doc","implementation","createHTMLDocument","instance","typeRegex","object","getAllPropertyNames","forEach","property","startsWith","Object","defineProperty","bind","escapeHTML","div","unescapeHTML","txt","props","getOwnPropertyNames","getPrototypeOf","keys","bindSome","func","Function","bindSafe","context","Error","calculateTextLength","textCalculator","queryById","setStyles","fontSize","fontFamily","fontWeight","letterSpacing","whiteSpace","setTop","setLeft","appendTo","getWidth","callIteratively","totalDuration","timesToCall","stepFunction","endFunction","count","setInterval","last","clearInterval","capitalize","str","charAt","dash","start","piece","concat","dataSetToOptions","isNaN","o","leftPadNumber","number","sign","abs","measure","parseJSON","json","JSON","parse","removeAllFromArray","fromArray","toRemove","array","obj","splice","stopEvent","preventDefault","Overlay","overlay","hide","bodyOverflow","overflowStyle","zIndex","getStyle","show","onReady","PrimeRequest","url","method","xhr","XMLHttpRequest","async","queryParams","contentType","inProgress","errorHandler","onError","headers","loadingHandler","onLoading","openHandler","onOpen","password","sendHandler","onSend","successHandler","onSuccess","unsetHandler","onUnset","username","requestUrl","open","onreadystatechange","_handler","setRequestHeader","send","_addDataValue","primeElement","isDisabled","isInput","getAttribute","getSelectedValues","_typeof","String","stringify","responseType","encodeURIComponent","close","status","PrimeWindow","innerHeight","innerWidth","Draggable","gripSelector","wrap","offset","grip","originalStyle","_handleMouseDown","_handleMouseMove","_handleMouseUp","cursor","getOuterHeight","getOuterWidth","x","screenX","y","screenY","xDiff","yDiff","getLeft","getTop","AJAXDialog","draggable","initialized","_setInitialOptions","destroy","setTimeout","highestZIndex","_determineZIndex","setZIndex","closeTimeout","uri","ajaxRequest","withSuccessHandler","_handleAJAXDialogResponse","withErrorHandler","go","extraData","withDataFromForm","withData","_initializeDialog","classes","additionalClasses","request","closeButtonElementSelector","timeout","draggableElementSelector","formErrorCallback","enabled","formHandling","formPreSubmitCallback","formSuccessCallback","option","dialog","isVisible","class","responseText","_handleAJAXFormSubmit","initialize","successURI","location","reload","_handleAJAXFormSuccess","_handleAJAXFormError","_handleCloseClickEvent","zIndexOffset","windowHeight","getInnerHeight","dialogHeight","getHeight","Events","Keys","BACKSPACE","ENTER","ESCAPE","SPACE","TAB","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","DELETE","PrimeDate","DAYS_IN_MONTH","getHourOfDay","date","getHours","isLeapYear","year","numberOfDaysInMonth","month","plusDays","newDate","getDate","getFullYear","getMonth","plusMonths","setDate","plusHours","deltaDays","deltaHours","newHour","setHours","plusMinutes","deltaMinutes","newMinute","getMinutes","setMinutes","deltaYears","deltaMonths","currentMonth","newMonth","setYear","adjustedMonth","setMonth","plusSeconds","deltaSeconds","newSecond","getSeconds","setSeconds","plusYears","setFullYear","toDateOnlyISOString","Date","SHORT_DAY_NAMES","MONTHS","AM_PM","DateTimePicker","is","customFormatHandler","datepicker","months","years","_handleInputClick","_handleInputKey","_handleGlobalClick","_handleGlobalKey","firstDayOfMonth","getDay","daysInMonth","used","weeksInMonth","ceil","rows","startDay","startDayOfWeek","_buildCalendarWeek","calendarBody","monthDisplay","setDataAttribute","yearDisplay","setTextContent","getUTCFullYear","timeSeparator","TIME_SEPARATOR","dateSeparator","DATE_SEPARATOR","_handleDayClick","_handleMonthExpand","_handleYearExpand","time","inputs","hourInput","_handleDateTimeChange","_handleHourKey","minuteInput","_handleMinuteKey","secondInput","_handleSecondKey","ampmInput","_handleAmPmKey","monthInput","setValue","_handleMonthKey","dayInput","_handleDayKey","yearInput","_handleYearKey","_handleNextMonth","_handlePreviousMonth","getDataAttribute","closeMonthsSelect","startYear","endYear","closeYearsSelect","_rebuild","getTime","drawCalendar","getAbsoluteTop","getRelativeZIndex","getOffsetLeft","getOffsetTop","currentYear","dateOnly","toISOString","formatHandler","startDayOfMonth","startDayOfPreviousMonth","startDayOfNextMonth","row","emptyColumns","dayOfWeek","day","min","keyCode","shiftKey","setSelectionRange","current","hours","_clamp","seconds","minutes","dayElement","getBottom","getRight","openMonthSelect","nextMonth","previousMonth","openYearSelect","_refreshInputs","userOptions","Dismissable","dismissButton","_handleClick","HTMLDialog","_setupButtons","InProgress","duration","startInstant","minimumTime","iconName","coords","getCoordinates","bodyCoords","setWidth","getBorderedWidth","setHeight","getBorderedHeight","startFunction","f","Searcher","inputElement","searchResultsContainer","callbackObject","searchResults","_removeAllSearchResults","resizeInput","_handleBlurEvent","_handleClickEvent","_handleKeyUpEvent","_handleKeyDownEvent","_handleFocusEvent","searchResult","getHighlightedSearchResult","getNextSibling","highlightSearchResult","getPreviousSibling","getScrollTop","searchResultOffset","scrollTo","closeSearchResults","newLength","searchText","search","matchingSearchResultElement","results","_handleMouseOverEvent","trim","trimmedLength","customAddEnabled","doesNotContainValue","customAddLabel","noSearchResultsLabel","tooManyResults","tooManySearchResultsLabel","custom","customAddCallback","selectSearchResult","currentTarget","selectHighlightedSearchResult","console","log","previousSearchString","highlightPreviousSearchResult","isSearchResultsVisible","highlightNextSearchResult","deletedBeyondSearchInput","removeAllFromDOM","unwrap","selectableOptions","isSelected","sort","AddOptionEvent","DeselectOptionEvent","SelectOptionEvent","MultipleSelect","findOptionWithValue","containsOptionWithValue","deselectOption","setSelected","_makeOptionID","displayOption","optionList","input","placeholder","searcher","displayContainer","getOptions","findOptionWithId","cur","getId","insertAfter","removeAllEventListeners","_handleGlobalClickEvent","_redraw","initialSelectedOrder","actual","selectOption","removeOption","allowDuplicates","deselectOptionWithId","deselectOptionWithValue","moveDuringInitialization","preserveDisplayedSelectionOrder","lastOption","addOption","li","inputOption","removeIcon","scrollToBottom","setSelectedValues","errorClass","searchFunction","selections","isLastOptionHighlightedForUnselect","removeHighlightedOption","highlightOptionForUnselect","unhighlightOptionForUnselect","findOptionWithText","removeOptionWithValue","selectElementContents","isChildOf","d","c","r","random","floor","withOptions","hasSelectedOptions","selectSearchFunction","Reorder","_handleMoveDownClick","_handleMoveUpClick","moveDownSelector","moveUpSelector","_refreshButtonStates","item","reorderCallback","itemSelector","moveDown","moveUp","items","Touchable","eventPropagationHandler","_handleTouchStart","_handleTouchMove","_handleTouchCancel","_handleTouchEnd","removeEventListenersByPattern","handler","changedTouches","touch","elapsedTime","touchStarted","touchEndX","pageX","touchEndY","pageY","touchX","touchStartX","touchY","touchStartY","swipe","swipeX","swipeY","longPress","fireCustomEvent","_collectTouchData","_finished","SideMenu","button","sideMenuElement","sideMenu","closedClass","openClass","touchable","withSwipeLeftHandler","_handleSwipeLeft","isOpen","PrimeStorage","supported","Storage","setSessionObject","_setObject","sessionStorage","getSessionObject","_getObject","setLocalObject","localStorage","getLocalObject","storage","getItem","setItem","SplitButton","currentAction","loading","menu","actionIndex","_handleButtonClick","_this","_handleItemClick","redraw","actionId","localStorageKey","selectAction","selectDefaultAction","prependTo","_saveLastAction","Table","column","columnIndex","sortAscending","thead","tbody","_initializeSort","selectAll","_handleSelectAllChange","_handleCheckboxEvent","checkedCount","numberofCheckboxes","_clearSortIndicators","_comparator","appendElement","checkEventCallback","a","b","sortType","cell1","cell2","sortValue1","sortValue2","value1","value2","localeCompare","_toNumber","previous","currentCheckedCount","_getColumnIndex","_handleSortableColumnClick","_initializeColumn","state","Number","error","Tabs","tabsContainer","tabContents","tabs","tabArray","selectedTab","tabContentClass","tab","dataSet","href","isAnchor","tabId","tabUrl","content","deepLinkingEnabled","hash","selectTab","firstVisible","lastVisible","selectNew","noneActive","selectCallback","ajaxURL","_handleAJAXResponse","ajaxCallback","container","Tooltip","t","_handleMouseEnter","_handleMouseLeave","toLocaleLowerCase","tooltip","tooltipWidth","tooltipHeight","TreeView","folderToggleClassName","Widgets","freeze","__proto__","BaseTransition","endValue","iterations","getFunction","setFunction","currentValue","step","self","_internalEndFunction","_subclassEndFunction","Fade","_inherits","_super","_createSuper","_changeNumberStyleIteratively","getOpacity","setOpacity","Appear","_super2","ScrollTo","_super3","_this2","axis","getScrollLeft","scrollLeftTo","SlideOpen","primeVisibleHeight","isTransitioning","closeCallback","openCallback","Effects","DataQueue","_elements","_head","_tail","isEmpty","_cursor","Template","template","init","parameters","templateCopy","expressedValue","lastIndexOf","RegExp","expressedKey","generate","holder","Ajax","Request","Data","Queue","Document","Window"],"mappings":"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","file":"prime-min-1.6.4.js","sourcesContent":["var Prime = (function (exports) {\n\t'use strict';\n\n\t/*\n\t * Copyright (c) 2012-2017, Inversoft Inc., All Rights Reserved\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n\t * either express or implied. See the License for the specific\n\t * language governing permissions and limitations under the License.\n\t */\n\n\t/**\n\t * The Browser namespace. This namespace does not contain any classes, just functions.\n\t *\n\t * @namespace Browser\n\t */\n\tconst Browser = {\n\t  /**\n\t   * Detects the browser name and version.\n\t   */\n\t  detect: function() {\n\t    this.name = this._searchString(this.dataBrowser) || \"An unknown browser\";\n\t    this.version = this._searchVersion(navigator.userAgent) || this._searchVersion(navigator.appVersion) || \"an unknown version\";\n\t    this.os = this._searchString(this.dataOS) || \"an unknown OS\";\n\t  },\n\n\n\t  /* ===================================================================================================================\n\t   * Private Methods\n\t   * ===================================================================================================================*/\n\n\t  /**\n\t   *\n\t   * @param {Object} data The data array.\n\t   * @returns {?string} The browser identity String.\n\t   * @private\n\t   */\n\t  _searchString: function(data) {\n\t    for (let i = 0; i < data.length; i++) {\n\t      const dataString = data[i].string;\n\t      const dataProp = data[i].prop;\n\t      this.versionSearchString = data[i].versionSearch || data[i].identity;\n\t      if (dataString && dataString.indexOf(data[i].subString) !== -1) {\n\t        return data[i].identity;\n\t      } else if (dataProp) {\n\t        return data[i].identity;\n\t      }\n\t    }\n\n\t    return null;\n\t  },\n\n\t  /**\n\t   *\n\t   * @param {string} dataString The browser data string.\n\t   * @returns {?number} The version or null.\n\t   * @private\n\t   */\n\t  _searchVersion: function(dataString) {\n\t    const index = dataString.indexOf(this.versionSearchString);\n\t    if (index === -1) {\n\t      return null;\n\t    }\n\n\t    return parseFloat(dataString.substring(index + this.versionSearchString.length + 1));\n\t  },\n\n\t  dataBrowser: [\n\t    {\n\t      string: navigator.userAgent,\n\t      subString: \"Chrome\",\n\t      identity: \"Chrome\"\n\t    },\n\t    {\n\t      string: navigator.userAgent,\n\t      subString: \"OmniWeb\",\n\t      versionSearch: \"OmniWeb/\",\n\t      identity: \"OmniWeb\"\n\t    },\n\t    {\n\t      string: navigator.vendor,\n\t      subString: \"Apple\",\n\t      identity: \"Safari\",\n\t      versionSearch: \"Version\"\n\t    },\n\t    {\n\t      prop: window.opera,\n\t      identity: \"Opera\",\n\t      versionSearch: \"Version\"\n\t    },\n\t    {\n\t      string: navigator.vendor,\n\t      subString: \"iCab\",\n\t      identity: \"iCab\"\n\t    },\n\t    {\n\t      string: navigator.vendor,\n\t      subString: \"KDE\",\n\t      identity: \"Konqueror\"\n\t    },\n\t    {\n\t      string: navigator.userAgent,\n\t      subString: \"Firefox\",\n\t      identity: \"Firefox\"\n\t    },\n\t    {\n\t      string: navigator.vendor,\n\t      subString: \"Camino\",\n\t      identity: \"Camino\"\n\t    },\n\t    {    // for newer Netscapes (6+)\n\t      string: navigator.userAgent,\n\t      subString: \"Netscape\",\n\t      identity: \"Netscape\"\n\t    },\n\t    {\n\t      string: navigator.userAgent,\n\t      subString: \"MSIE\",\n\t      identity: \"Explorer\",\n\t      versionSearch: \"MSIE\"\n\t    },\n\t    {\n\t      string: navigator.userAgent,\n\t      subString: \"Gecko\",\n\t      identity: \"Mozilla\",\n\t      versionSearch: \"rv\"\n\t    },\n\t    {     // for older Netscapes (4-)\n\t      string: navigator.userAgent,\n\t      subString: \"Mozilla\",\n\t      identity: \"Netscape\",\n\t      versionSearch: \"Mozilla\"\n\t    }\n\t  ],\n\t  dataOS: [\n\t    {\n\t      string: navigator.platform,\n\t      subString: \"Win\",\n\t      identity: \"Windows\"\n\t    },\n\t    {\n\t      string: navigator.platform,\n\t      subString: \"Mac\",\n\t      identity: \"macOS\"\n\t    },\n\t    {\n\t      string: navigator.userAgent,\n\t      subString: \"iPhone\",\n\t      identity: \"iPhone/iPod\"\n\t    },\n\t    {\n\t      string: navigator.userAgent,\n\t      subString: \"iPad\",\n\t      identity: \"iPad\"\n\t    },\n\t    {\n\t      string: navigator.platform,\n\t      subString: \"Linux\",\n\t      identity: \"Linux\"\n\t    }\n\t  ]\n\t};\n\tBrowser.detect();\n\n\t/*\n\t * Copyright (c) 2017-2018, Inversoft Inc., All Rights Reserved\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n\t * either express or implied. See the License for the specific\n\t * language governing permissions and limitations under the License.\n\t */\n\n\tconst blockElementRegexp = /^(?:ARTICLE|ASIDE|BLOCKQUOTE|BODY|BR|BUTTON|CANVAS|CAPTION|COL|COLGROUP|DD|DIV|DL|DT|EMBED|FIELDSET|FIGCAPTION|FIGURE|FOOTER|FORM|H1|H2|H3|H4|H5|H6|HEADER|HGROUP|HR|LI|MAP|OBJECT|OL|OUTPUT|P|PRE|PROGRESS|SECTION|TABLE|TBODY|TEXTAREA|TFOOT|TH|THEAD|TR|UL|VIDEO)$/;\n\tconst mouseEventsRegexp = /^(?:click|dblclick|mousedown|mouseup|mouseover|mousemove|mouseout|mouseenter|mouseleave)$/;\n\tconst htmlEventsRegexp = /^(?:abort|blur|change|error|focus|load|reset|resize|scroll|select|submit|unload)$/;\n\tlet anonymousId = 1;\n\tconst ieAlphaRegexp = /alpha\\(opacity=(.+)\\)/;\n\n\tclass PrimeElement {\n\t  /**\n\t   * Creates an Element class for the given DOM element.\n\t   *\n\t   * @constructor\n\t   * @param {Element|EventTarget} element The element\n\t   */\n\t  constructor(element) {\n\t    if (!Utils.isDefined(element.nodeType) || element.nodeType !== 1) {\n\t      throw new TypeError('You can only pass in DOM element Node objects to the PrimeDocument.Element constructor');\n\t    }\n\n\t    Utils.bindAll(this);\n\t    this.domElement = element;\n\t    this.domElement.customEventListeners = [];\n\t    this.domElement.eventListeners = {};\n\t  }\n\n\t  /**\n\t   * Regular expression that captures the tagnames of all the block elements in HTML5.\n\t   *\n\t   * @type {RegExp}\n\t   */\n\t  static get blockElementRegexp() {\n\t    return blockElementRegexp;\n\t  }\n\n\t  static get mouseEventsRegexp() {\n\t    return mouseEventsRegexp;\n\t  }\n\n\t  static get htmlEventsRegexp() {\n\t    return htmlEventsRegexp;\n\t  }\n\n\t  static get anonymousId() {\n\t    return anonymousId;\n\t  }\n\n\t  static set anonymousId(value) {\n\t    anonymousId = value;\n\t  }\n\n\t  static get ieAlphaRegexp() {\n\t    return ieAlphaRegexp;\n\t  }\n\n\t  /**\n\t   * Static method that wraps an element in a PrimeElement unless it is already wrapped. In that case, it simply\n\t   * returns the element.\n\t   *\n\t   * @param {PrimeElement|Element|EventTarget} element The element to wrap.\n\t   * @static\n\t   */\n\t  static wrap(element) {\n\t    return (element instanceof PrimeElement) ? element : new PrimeElement(element);\n\t  }\n\n\t  /**\n\t   * Static method that unwraps an element to a DOM element. This is the inverse of Element.wrap. If this is passed an\n\t   * Element, it returns domElement. Otherwise, this just returns the element.\n\t   *\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  static unwrap(element) {\n\t    return (element instanceof PrimeElement) ? element.domElement : element;\n\t  }\n\n\t  /**\n\t   * Adds the given class (or list of space separated classes) to this Element.\n\t   *\n\t   * @param {string} classNames The class name(s) separated by a space.\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  addClass(classNames) {\n\t    let currentClassName = this.domElement.className;\n\t    if (currentClassName === '') {\n\t      currentClassName = classNames;\n\t    } else {\n\t      const currentClassNameList = this.domElement.className.split(Utils.spaceRegex);\n\t      const newClassNameList = classNames.split(Utils.spaceRegex);\n\t      for (let i = 0; i < newClassNameList.length; i++) {\n\t        if (currentClassNameList.indexOf(newClassNameList[i]) === -1) {\n\t          currentClassNameList.push(newClassNameList[i]);\n\t        }\n\t      }\n\n\t      currentClassName = currentClassNameList.join(' ');\n\t    }\n\n\t    this.domElement.className = currentClassName;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * @callback PrimeDelegationEventListener\n\t   *\n\t   * @param {Event} event the original event\n\t   * @param {PrimeElement} target the target domElement that matched the registered selector\n\t   */\n\n\t  /**\n\t   * Attaches an event listener to the element and will only invoke the listener when the event target matches\n\t   * the provided selector.\n\t   *\n\t   * The intent of this function is to provide a delegated listener and handle events from nested elements.\n\t   *\n\t   * @param {string} event The name of the event\n\t   * @param  {string} selector The selector to match against the Element\n\t   * @param {PrimeDelegationEventListener} listener The event listener function\n\t   */\n\t  addDelegatedEventListener(event, selector, listener) {\n\t    this.domElement.delegatedListeners =  this.domElement.delegatedListeners || [];\n\t    let allDelegatedListeners = this.domElement.delegatedListeners;\n\n\t    // Store the event listeners in the following format:\n\t    //   [ event_type -> [ selector -> [ listeners ] ] ]\n\t    //\n\t    // Example:\n\t    //   [ 'click' -> [ 'a.foo' -> [ funcA, funcB ] ] ]\n\n\t    if (!(event in allDelegatedListeners)) {\n\t      allDelegatedListeners[event] = [];\n\t    }\n\n\t    if (!(selector in allDelegatedListeners[event])) {\n\t      allDelegatedListeners[event][selector] = [];\n\t    }\n\n\t    let delegatedListeners = allDelegatedListeners[event][selector] || [];\n\t    if (!(listener in delegatedListeners)) {\n\t      delegatedListeners.push(listener);\n\t    }\n\n\t    this.addEventListener(event, this._handleDelegatedEvent);\n\t  }\n\n\t  /**\n\t   * Attaches an event listener to this Element.\n\t   *\n\t   * @param {string} event The name of the event.\n\t   * @param {Function} listener The event listener function.\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  addEventListener(event, listener) {\n\t    if (event.indexOf(':') === -1) {\n\t      // Traditional event\n\t      this.domElement.eventListeners = this.domElement.eventListeners || {};\n\t      this.domElement.eventListeners[event] = this.domElement.eventListeners[event] || [];\n\t      if (this.domElement.eventListeners[event].indexOf(listener) === -1) {\n\t        this.domElement.eventListeners[event].push(listener);\n\t      }\n\t      this.domElement.addEventListener(event, listener, false);\n\t    } else {\n\t      // Custom event\n\t      this.domElement.customEventListeners = this.domElement.customEventListeners || {};\n\t      this.domElement.customEventListeners[event] = this.domElement.customEventListeners[event] || [];\n\t      if (this.domElement.customEventListeners[event].indexOf(listener) === -1) {\n\t        this.domElement.customEventListeners[event].push(listener);\n\t      }\n\t    }\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Appends the given element to this element. If the given element already exists in the DOM, it is removed from its\n\t   * current location and placed at the end of this element.\n\t   *\n\t   * @param {PrimeElement|Node} element The element to append.\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  appendElement(element) {\n\t    const domElement = (element instanceof PrimeElement) ? element.domElement : element;\n\t    if (domElement.parentNode) {\n\t      domElement.parentNode.removeChild(domElement);\n\t    }\n\n\t    this.domElement.appendChild(domElement);\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Appends the given HTML string to this element.\n\t   *\n\t   * @param {string} html The HTML to append.\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  appendHTML(html) {\n\t    this.domElement.insertAdjacentHTML('beforeend', html);\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Inserts this Element (which must be a newly created Element) into the DOM inside at the very end of the given\n\t   * element.\n\t   *\n\t   * @param {PrimeElement|Node} element The element to insert this Element into.\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  appendTo(element) {\n\t    // Error out for now if this element is in the document so we can punt on cloning for now\n\t    if (this.domElement.parentNode) {\n\t      throw new TypeError('You can only insert new PrimeElements for now');\n\t    }\n\n\t    const domElement = (element instanceof PrimeElement) ? element.domElement : element;\n\t    if (domElement.parentNode) {\n\t      domElement.appendChild(this.domElement);\n\t    } else {\n\t      throw new TypeError('The element you passed into appendTo is not in the DOM. You can\\'t insert a PrimeElement inside an element that isn\\'t in the DOM yet.');\n\t    }\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Fires an event on the Element.\n\t   *\n\t   * @param {string} event The name of the event.\n\t   * @param {Object} [memo] Assigned to the memo field of the event.\n\t   * @param {Object} [target] The target.\n\t   * @param {boolean} [bubbling] If the event is bubbling, defaults to true.\n\t   * @param {boolean} [cancelable] If the event is cancellable, defaults to true.\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  fireEvent(event, memo, target, bubbling, cancelable) {\n\t    memo = Utils.isDefined(memo) ? memo : {};\n\t    target = Utils.isDefined(target) ? target : this;\n\t    bubbling = Utils.isDefined(bubbling) ? bubbling : true;\n\t    cancelable = Utils.isDefined(cancelable) ? cancelable : true;\n\n\t    let evt;\n\t    if (event.indexOf(':') === -1) {\n\t      // Traditional event\n\t      if (document.createEventObject) {\n\t        // Dispatch for IE\n\t        evt = document.createEventObject();\n\t        evt.memo = memo || {};\n\t        evt.cancelBubble = !bubbling;\n\t        this.domElement.fireEvent('on' + event, evt);\n\t      } else if (document.createEvent) {\n\t        // Dispatch for others\n\t        if (PrimeElement.mouseEventsRegexp.test(event)) {\n\t          evt = document.createEvent(\"MouseEvents\");\n\t          evt.initMouseEvent(event, bubbling, cancelable, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);\n\t        } else if (PrimeElement.htmlEventsRegexp.test(event)) {\n\t          evt = document.createEvent(\"HTMLEvents\");\n\t          evt.initEvent(event, bubbling, cancelable);\n\t        } else {\n\t          throw new TypeError('Invalid event [' + event + ']');\n\t        }\n\n\t        evt.memo = memo || {};\n\t        this.domElement.dispatchEvent(evt);\n\t      } else {\n\t        throw new TypeError('Unable to fire event. Neither createEventObject nor createEvent methods are available');\n\t      }\n\t    } else {\n\t      // Custom event\n\t      this.domElement.customEventListeners[event] = this.domElement.customEventListeners[event] || [];\n\t      evt = {event: event, memo: memo, target: target};\n\t      for (let index in this.domElement.customEventListeners[event]) {\n\t        if (this.domElement.customEventListeners[event].hasOwnProperty(index)) {\n\t          this.domElement.customEventListeners[event][index](evt);\n\t        }\n\t      }\n\t    }\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Fires a custom event on the Element using the given event object rather than creating a new event object. This is\n\t   * useful for pass-through event handling.\n\t   *\n\t   * @param {string} event The name of the event.\n\t   * @param {Object} eventObj The event object to pass to the handlers.\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  fireCustomEvent(event, eventObj) {\n\t    eventObj = Utils.isDefined(eventObj) ? eventObj : {};\n\t    if (event.indexOf(':') === -1) {\n\t      throw new TypeError('This method can only be used for custom events');\n\t    }\n\n\t    // Custom event\n\t    this.domElement.customEventListeners[event] = this.domElement.customEventListeners[event] || [];\n\t    for (let index in this.domElement.customEventListeners[event]) {\n\t      if (this.domElement.customEventListeners[event].hasOwnProperty(index)) {\n\t        this.domElement.customEventListeners[event][index](eventObj);\n\t      }\n\t    }\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Puts the focus on this element.\n\t   *\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  focus() {\n\t    this.domElement.focus();\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Returns the absolute top of this element relative to the document.\n\t   *\n\t   * @returns {number} The number of pixels that this element is from the top of the document.\n\t   */\n\t  getAbsoluteTop() {\n\t    let top = 0;\n\t    let e = this.domElement;\n\t    while (e) {\n\t      top += e.offsetTop;\n\t      e = e.offsetParent;\n\t    }\n\n\t    return top;\n\t  }\n\n\t  /**\n\t   * Returns the value of the given attribute.\n\t   *\n\t   * @param {string} name The attribute name.\n\t   * @returns {?string} This attribute value or null.\n\t   */\n\t  getAttribute(name) {\n\t    const attr = this.domElement.attributes.getNamedItem(name);\n\t    if (attr) {\n\t      return attr.value;\n\t    }\n\n\t    return null;\n\t  }\n\n\t  /**\n\t   * Returns all of the attributes on the element as an object.\n\t   *\n\t   * @returns {object} This attributes or an empty object if there are no attributes on this element.\n\t   */\n\t  getAttributes() {\n\t    const attrs = {};\n\t    if (this.domElement.hasAttributes()) {\n\t      for (let i = 0; i < this.domElement.attributes.length; i++) {\n\t        attrs[this.domElement.attributes[i].name] = this.domElement.attributes[i].value;\n\t      }\n\t    }\n\n\t    return attrs;\n\t  }\n\n\t  /**\n\t   * Gets the viewable height of the Element as an integer value in pixels. This height includes border, padding and scroll bar but excludes the margins.\n\t   *\n\t   * @returns {number} The height as pixels (number) or a string.\n\t   */\n\t  getBorderedHeight() {\n\t    return this.domElement.offsetHeight;\n\t  }\n\n\t  /**\n\t   * Gets the width of the Element as an integer value. This width includes border, padding and scroll bar but excludes the margins.\n\t   *\n\t   * @returns {number} The height in pixels.\n\t   */\n\t  getBorderedWidth() {\n\t    return this.domElement.offsetWidth;\n\t  }\n\n\t  /**\n\t   * @returns {number} The bottom position (in pixels) of the current element.\n\t   */\n\t  getBottom() {\n\t    return this.domElement.getBoundingClientRect().bottom;\n\t  }\n\n\t  /**\n\t   * Gets the children elements of this Element, optionally reduced to those matching the optional selector.\n\t   *\n\t   * @param {string} [selector] The selector. Optional, if not provided all children will be returned.\n\t   * @returns {PrimeElementList} The children.\n\t   */\n\t  getChildren(selector) {\n\t    if (!Utils.isDefined(selector)) {\n\t      return new PrimeElementList(this.domElement.children);\n\t    }\n\n\t    const matched = [];\n\t    for (let i = 0; i < this.domElement.children.length; i++) {\n\t      const child = this.domElement.children[i];\n\t      if (child.matches(selector)) {\n\t        matched.push(child);\n\t      }\n\t    }\n\n\t    return new PrimeElementList(matched);\n\t  }\n\n\t  /**\n\t   * Gets the class value of the current element. This might be a single class or multiple class names.\n\t   *\n\t   * @returns {string} The class.\n\t   */\n\t  getClass() {\n\t    return this.domElement.className;\n\t  }\n\n\t  /**\n\t   * Gets the computed style information for this Element.\n\t   *\n\t   * @returns {IEElementStyle|CSSStyleDeclaration} The style information.\n\t   */\n\t  getComputedStyle() {\n\t    return (this.domElement.currentStyle) ? this.domElement.currentStyle : document.defaultView.getComputedStyle(this.domElement, null);\n\t  }\n\n\t  /**\n\t   * Calculates the location of this element with respect to the document rather than the elements parent, offset parent\n\t   * or scroll position.\n\t   *\n\t   * @returns {{top: number, left: number}}\n\t   */\n\t  getCoordinates() {\n\t    const box = this.domElement.getBoundingClientRect();\n\n\t    const body = document.body;\n\t    const documentElement = document.documentElement;\n\n\t    const scrollTop = window.pageYOffset || documentElement.scrollTop || body.scrollTop;\n\t    const scrollLeft = window.pageXOffset || documentElement.scrollLeft || body.scrollLeft;\n\n\t    const clientTop = documentElement.clientTop || body.clientTop || 0;\n\t    const clientLeft = documentElement.clientLeft || body.clientLeft || 0;\n\n\t    const top = box.top + scrollTop - clientTop;\n\t    const left = box.left + scrollLeft - clientLeft;\n\n\t    return {top: Math.round(top), left: Math.round(left)};\n\t  }\n\n\t  /**\n\t   * Returns the dataset if it exists, otherwise, this creates a new dataset object and returns it.\n\t   *\n\t   * @returns {object} This dataset object.\n\t   */\n\t  getDataSet() {\n\t    if (this.domElement.dataset) {\n\t      return this.domElement.dataset;\n\t    }\n\n\t    this.domElement.dataset = {};\n\t    const attrs = this.getAttributes();\n\t    for (let prop in attrs) {\n\t      if (attrs.hasOwnProperty(prop) && prop.indexOf('data-') === 0) {\n\t        const dataName = prop.substring(5).replace(/-([a-z])/g, function(g) {\n\t          return g[1].toUpperCase();\n\t        });\n\t        this.domElement.dataset[dataName] = attrs[prop];\n\t      }\n\t    }\n\t    return this.domElement.dataset;\n\t  }\n\n\t  /**\n\t   * Returns the data value if it exists, otherwise returns null.\n\t   *\n\t   * @param {string} name The attribute name.\n\t   * @returns {?string} This attribute value or null.\n\t   */\n\t  getDataAttribute(name) {\n\t    return this.getDataSet()[name] || null;\n\t  }\n\n\t  /**\n\t   * Get the first child element of this Element, optionally filtered using the optional selector.\n\t   *\n\t   * @param {string} [selector] The selector. Optional.\n\t   * @returns {?PrimeElement} The first child element or null if the element has no children or a selector was provided and nothing matched the selector..\n\t   */\n\t  getFirstChild(selector) {\n\t    const lastChild = this.getChildren(selector)[0];\n\t    if (!Utils.isDefined(lastChild)) {\n\t      return null;\n\t    }\n\n\t    return lastChild;\n\t  }\n\n\t  /**\n\t   * Gets the viewable height of the Element as an integer value in pixels. This height includes padding and scroll bar\n\t   * but excludes the margin and borders. This is often called the innerHeight of the element.\n\t   *\n\t   * @returns {number} The height as pixels (number) or a string.\n\t   */\n\t  getHeight() {\n\t    const computedStyle = this.getComputedStyle();\n\t    const offsetHeight = this.domElement.offsetHeight;\n\t    const borderTop = computedStyle['borderTopWidth'];\n\t    const borderBottom = computedStyle['borderBottomWidth'];\n\t    return offsetHeight - Utils.parseCSSMeasure(borderTop) - Utils.parseCSSMeasure(borderBottom);\n\t  }\n\n\t  /**\n\t   * Gets the inner HTML content of the Element.\n\t   *\n\t   * @returns {string} The HTML content.\n\t   */\n\t  getHTML() {\n\t    return this.domElement.innerHTML;\n\t  }\n\n\t  /**\n\t   * Gets the ID of this element from the domElement.\n\t   *\n\t   * @returns {string} ID The id of the domElement if it exists.\n\t   */\n\t  getId() {\n\t    return this.domElement.id;\n\t  }\n\n\t  /**\n\t   * Get the last child element of this Element, optionally filtered using the optional selector.\n\t   *\n\t   * @param {string} [selector] The selector. Optional.\n\t   * @returns {?PrimeElement} The last child element or null if the element has no children or a selector was provided and nothing matched the selector..\n\t   */\n\t  getLastChild(selector) {\n\t    const elementList = this.getChildren(selector);\n\t    if (elementList.length > 0) {\n\t      return elementList[elementList.length - 1];\n\t    }\n\n\t    return null;\n\t  }\n\n\t  /**\n\t   * @returns {number} The left position (in pixels) of the current element.\n\t   */\n\t  getLeft() {\n\t    return this.domElement.getBoundingClientRect().left;\n\t  }\n\n\t  /**\n\t   * @returns {?PrimeElement} This elements next sibling or null.\n\t   */\n\t  getNextSibling() {\n\t    let sibling = this.domElement.nextSibling;\n\t    while (sibling !== null && sibling.nodeType !== 1) {\n\t      sibling = sibling.nextSibling;\n\t    }\n\n\t    if (sibling === null) {\n\t      return null;\n\t    }\n\n\t    return new PrimeElement(sibling);\n\t  }\n\n\t  /**\n\t   * The elements offset left in pixels.\n\t   *\n\t   * @returns {number} The offset left.\n\t   */\n\t  getOffsetLeft() {\n\t    return this.domElement.offsetLeft;\n\t  }\n\n\t  /**\n\t   * The elements offset top in pixels.\n\t   *\n\t   * @returns {number} The offset top.\n\t   */\n\t  getOffsetTop() {\n\t    return this.domElement.offsetTop;\n\t  }\n\n\t  /**\n\t   * Retrieves the opacity value for the Element. This handles the IE alpha filter.\n\t   *\n\t   * @returns {number} The opacity value.\n\t   */\n\t  getOpacity() {\n\t    const computedStyle = this.getComputedStyle();\n\t    let opacity = 1.0;\n\t    if (Browser.name === 'Explorer' && Browser.version < 9) {\n\t      const filter = computedStyle['filter'];\n\t      if (filter !== undefined && filter !== '') {\n\t        const matches = PrimeElement.ieAlphaRegexp.match(filter);\n\t        if (matches.length > 0) {\n\t          opacity = parseFloat(matches[0]);\n\t        }\n\t      }\n\t    } else {\n\t      opacity = parseFloat(computedStyle['opacity']);\n\t    }\n\n\t    return opacity;\n\t  }\n\n\t  /**\n\t   * @returns {PrimeElementList} If this element is a select box, this returns the options of the select box in\n\t   *          an ElementList.\n\t   */\n\t  getOptions() {\n\t    if (this.getTagName() !== 'SELECT') {\n\t      throw new TypeError('You can only get the options for select elements');\n\t    }\n\n\t    return new PrimeElementList(this.domElement.options);\n\t  }\n\n\t  /**\n\t   * Gets the outer height of the element, including the margins. This does not include the padding or borders.\n\t   *\n\t   * @returns {number} The outer height of the element.\n\t   */\n\t  getOuterHeight() {\n\t    const computedStyle = this.getComputedStyle();\n\t    const offsetHeight = this.domElement.offsetHeight;\n\t    const marginTop = computedStyle['marginTop'];\n\t    const marginBottom = computedStyle['marginBottom'];\n\t    return offsetHeight + Utils.parseCSSMeasure(marginTop) + Utils.parseCSSMeasure(marginBottom);\n\t  }\n\n\t  /**\n\t   * Gets the outer HTML content of the Element.\n\t   *\n\t   * @returns {string} The outer HTML content.\n\t   */\n\t  getOuterHTML() {\n\t    return this.domElement.outerHTML;\n\t  }\n\n\t  /**\n\t   * Gets the outer width of the element, including the margins. This does not include the padding or borders.\n\t   *\n\t   * @returns {number} The outer width of the element.\n\t   */\n\t  getOuterWidth() {\n\t    const computedStyle = this.getComputedStyle();\n\t    const offsetWidth = this.domElement.offsetWidth;\n\t    const marginLeft = computedStyle['marginLeft'];\n\t    const marginRight = computedStyle['marginRight'];\n\t    return offsetWidth + Utils.parseCSSMeasure(marginLeft) + Utils.parseCSSMeasure(marginRight);\n\t  }\n\n\t  /**\n\t   * Returns this element's parent as a PrimeElement.\n\t   *\n\t   * @returns {?PrimeElement} This element's parent or null if there is no parent\n\t   */\n\t  getParent() {\n\t    if (Utils.isDefined(this.domElement.parentElement)) {\n\t      return new PrimeElement(this.domElement.parentElement);\n\t    } else {\n\t      return null;\n\t    }\n\t  }\n\n\t  /**\n\t   * @returns {?PrimeElement} This elements previous sibling or null.\n\t   */\n\t  getPreviousSibling() {\n\t    let sibling = this.domElement.previousSibling;\n\t    while (sibling !== null && sibling.nodeType !== 1) {\n\t      sibling = sibling.previousSibling;\n\t    }\n\n\t    if (sibling === null) {\n\t      return null;\n\t    }\n\n\t    return new PrimeElement(sibling);\n\t  }\n\n\t  /**\n\t   * @returns {number} The zIndex style of this element based on the element or the first positioned parent.\n\t   */\n\t  getRelativeZIndex() {\n\t    let e = this;\n\t    while (e !== null && e.getComputedStyle()['zIndex'] === 'auto') {\n\t      e = e.getParent();\n\t    }\n\t    return e === null ? 0 : parseInt(e.getComputedStyle()['zIndex']);\n\t  }\n\n\t  /**\n\t   * @returns {number} The right position (in pixels) of the current element.\n\t   */\n\t  getRight() {\n\t    return this.domElement.getBoundingClientRect().right;\n\t  }\n\n\t  /**\n\t   * @returns {number} The scroll height of this element.\n\t   */\n\t  getScrollHeight() {\n\t    return this.domElement.scrollHeight;\n\t  }\n\n\t  /**\n\t   * @returns {number} The scroll left position of this element.\n\t   */\n\t  getScrollLeft() {\n\t    return this.domElement.scrollLeft;\n\t  }\n\n\t  /**\n\t   * @returns {number} The scroll top position of this element.\n\t   */\n\t  getScrollTop() {\n\t    return this.domElement.scrollTop;\n\t  }\n\n\t  /**\n\t   * @returns {number} The scroll width of this element.\n\t   */\n\t  getScrollWidth() {\n\t    return this.domElement.scrollWidth;\n\t  }\n\n\t  /**\n\t   * Retrieves the selected texts of this Element, if the element is a select. If it is anything else this returns\n\t   * null.\n\t   *\n\t   * @returns {Array} The texts of this Element.\n\t   */\n\t  getSelectedTexts() {\n\t    let texts;\n\t    if (this.domElement.tagName === 'SELECT') {\n\t      texts = [];\n\t      for (let i = 0; i < this.domElement.options.length; i++) {\n\t        if (this.domElement.options[i].selected) {\n\t          texts.push(this.domElement.options[i].text);\n\t        }\n\t      }\n\t    } else {\n\t      texts = null;\n\t    }\n\n\t    return texts;\n\t  }\n\n\t  /**\n\t   * Retrieves the values of this Element, if the element is a checkbox or select. If it is anything else this returns\n\t   * null.\n\t   *\n\t   * @returns {Array} The values of this Element.\n\t   */\n\t  getSelectedValues() {\n\t    let values;\n\t    if (this.domElement.tagName === 'INPUT' && (this.domElement.type === 'checkbox' || this.domElement.type === 'radio')) {\n\t      values = [];\n\t      const name = this.domElement.name;\n\t      const form = PrimeDocument.queryUp('form', this.domElement);\n\t      PrimeDocument.query('input[name=\"' + name + '\"]', form).each(function(element) {\n\t        if (element.isChecked()) {\n\t          values.push(element.getValue());\n\t        }\n\t      });\n\t    } else if (this.domElement.tagName === 'SELECT') {\n\t      values = [];\n\t      for (let i = 0; i < this.domElement.length; i++) {\n\t        if (this.domElement.options[i].selected) {\n\t          values.push(this.domElement.options[i].value);\n\t        }\n\t      }\n\t    } else {\n\t      values = null;\n\t    }\n\n\t    return values;\n\t  }\n\n\t  /**\n\t   * Gets value of a style attribute.\n\t   *\n\t   * @returns {string} The style value.\n\t   */\n\t  getStyle(name) {\n\t    name = Utils.convertStyleName(name);\n\t    return this.domElement.style[name];\n\t  }\n\n\t  /**\n\t   * @returns {string} The tag name of this element as a string. This is always uppercase.\n\t   */\n\t  getTagName() {\n\t    return this.domElement.tagName;\n\t  }\n\n\t  /**\n\t   * Retrieves the text content of this Element.\n\t   *\n\t   * @returns {string} The text contents of this Element.\n\t   */\n\t  getTextContent() {\n\t    return this.domElement.innerText ? this.domElement.innerText : this.domElement.textContent;\n\t  }\n\n\t  /**\n\t   * @returns {number} The top position (in pixels) of the current element.\n\t   */\n\t  getTop() {\n\t    return this.domElement.getBoundingClientRect().top;\n\t  }\n\n\t  /**\n\t   * Gets the width of the Element as an integer value. This width includes padding and scroll bar but excludes the margin and borders.\n\t   * This is often called the innerWidth of the element.\n\t   *\n\t   * @returns {number} The height in pixels.\n\t   */\n\t  getWidth() {\n\t    const computedStyle = this.getComputedStyle();\n\t    const offsetWidth = this.domElement.offsetWidth;\n\t    const borderLeft = computedStyle['borderLeftWidth'];\n\t    const borderRight = computedStyle['borderRightWidth'];\n\t    return offsetWidth - Utils.parseCSSMeasure(borderLeft) - Utils.parseCSSMeasure(borderRight);\n\t  }\n\n\t  /**\n\t   * Retrieves the value attribute of this Element. This works on all checkboxes, radio buttons, text, text areas, and\n\t   * options. However, this does not retrieve the selected options in a select box, checked checkboxes or checked radio\n\t   * buttons. Use the getSelectedValues function for that.\n\t   *\n\t   * @returns {string} The value of this Element.\n\t   */\n\t  getValue() {\n\t    return this.domElement.value;\n\t  }\n\n\t  /**\n\t   * Returns true if the element has one or all class names\n\t   *\n\t   * @param {string} classNames The class name(s) in a string.\n\t   * @returns {boolean} True if all class names are present.\n\t   */\n\t  hasClass(classNames) {\n\t    const currentClassNames = this.domElement.className;\n\t    if (currentClassNames === '') {\n\t      return classNames === '';\n\t    }\n\n\t    const currentClassNameList = currentClassNames.split(Utils.spaceRegex);\n\t    const findClassNameList = classNames.split(Utils.spaceRegex);\n\t    for (let i = 0; i < findClassNameList.length; i++) {\n\t      if (currentClassNameList.indexOf(findClassNameList[i]) === -1) {\n\t        return false;\n\t      }\n\t    }\n\n\t    return true;\n\t  }\n\n\t  /**\n\t   * Hides the Element by setting the display style to none.\n\t   *\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  hide() {\n\t    this.domElement.style.display = 'none';\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Inserts this Element into the DOM after the given element, removing it from it's parent if it's an existing element.\n\t   *\n\t   * @param {PrimeElement|Element} element The element to insert this Element after.\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  insertAfter(element) {\n\t    if (this.domElement.parentNode) {\n\t      this.domElement.parentNode.removeChild(this.domElement);\n\t    }\n\n\t    const domElement = (element instanceof PrimeElement) ? element.domElement : element;\n\t    const parentElement = domElement.parentNode;\n\t    if (parentElement) {\n\t      parentElement.insertBefore(this.domElement, domElement.nextSibling);\n\t    } else {\n\t      throw new TypeError('The element you passed into insertAfter is not in the DOM. You can\\'t insert a PrimeElement after an element that isn\\'t in the DOM yet.');\n\t    }\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Inserts this Element into the DOM before the given element, removing it from it's parent if it's an existing element.\n\t   *\n\t   * @param {PrimeElement|Element} element The element to insert this Element before.\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  insertBefore(element) {\n\t    if (this.domElement.parentNode) {\n\t      this.domElement.parentNode.removeChild(this.domElement);\n\t    }\n\n\t    const domElement = (element instanceof PrimeElement) ? element.domElement : element;\n\t    const parentElement = domElement.parentNode;\n\t    if (parentElement) {\n\t      parentElement.insertBefore(this.domElement, domElement);\n\t    } else {\n\t      throw new TypeError('The element you passed into insertBefore is not in the DOM. You can\\'t insert a PrimeElement before an element that isn\\'t in the DOM yet.');\n\t    }\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Inserts the given HTML snippet directly after this element.\n\t   *\n\t   * @param {string} html The HTML string.\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  insertHTMLAfter(html) {\n\t    this.domElement.insertAdjacentHTML('afterend', html);\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Inserts the given HTML snippet inside this element, before its first child.\n\t   *\n\t   * @param {string} html The HTML string.\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  insertHTMLAfterBegin(html) {\n\t    this.domElement.insertAdjacentHTML('afterbegin', html);\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Inserts the given text after this Element.\n\t   *\n\t   * @param {string} text The text to insert.\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  insertTextAfter(text) {\n\t    if (!this.domElement.parentNode) {\n\t      throw new TypeError('This Element is not currently in the DOM');\n\t    }\n\n\t    const textNode = document.createTextNode(text);\n\t    this.domElement.parentNode.insertBefore(textNode, this.domElement.nextSibling);\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Inserts the given text before this Element.\n\t   *\n\t   * @param {string} text The text to insert.\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  insertTextBefore(text) {\n\t    if (!this.domElement.parentNode) {\n\t      throw new TypeError('This Element is not currently in the DOM');\n\t    }\n\n\t    const textNode = document.createTextNode(text);\n\t    this.domElement.parentNode.insertBefore(textNode, this.domElement);\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Returns true if the element matches the provided selector.\n\t   *\n\t   * @param {string} selector to match against the Element\n\t   * @returns {boolean} True if the element matches the selector, false if it does not match the selector.\n\t   */\n\t  is(selector) {\n\t    return this.domElement.matches(selector);\n\t  }\n\n\t  /**\n\t   * Returns whether or not the element is checked. If the element is not a checkbox or a radio this returns false.\n\t   *\n\t   * @returns {boolean} True if the element is selected, false if it isn't or is not a checkbox or a radio.\n\t   */\n\t  isChecked() {\n\t    return this.domElement.tagName === 'INPUT' && (this.domElement.type === 'checkbox' || this.domElement.type === 'radio') && this.domElement.checked;\n\t  }\n\n\t  /**\n\t   * Determines if this element is a child of the given element.\n\t   *\n\t   * @param {PrimeElement|Node} element The element to check to see if this element is a child of.\n\t   * @returns {boolean} True if this element is a child of the given element, false otherwise.\n\t   */\n\t  isChildOf(element) {\n\t    const domElement = element instanceof PrimeElement ? element.domElement : element;\n\t    let parent = this.domElement.parentNode;\n\t    while (domElement !== parent && parent !== null) {\n\t      parent = parent.parentNode;\n\t    }\n\n\t    return domElement === parent;\n\t  }\n\n\t  /**\n\t   * @returns {boolean} Whether or not this element is disabled according to the disabled property.\n\t   */\n\t  isDisabled() {\n\t    return this.domElement.disabled;\n\t  }\n\n\t  /**\n\t   * @returns {boolean} True if this element has focus.\n\t   */\n\t  isFocused() {\n\t    return document.activeElement === this.domElement;\n\t  }\n\n\t  /**\n\t   * @return {boolean} True if this element is an INPUT, SELECT or TEXTAREA.\n\t   */\n\t  isInput() {\n\t    const tagName = this.getTagName();\n\t    return tagName === 'SELECT' || tagName === 'INPUT' || tagName === 'TEXTAREA';\n\t  }\n\n\t  /**\n\t   * Determines if the this element is inside the given element\n\t   *\n\t   * @param target {PrimeElement} The target element.\n\t   * @returns {boolean} True if this element is inside the given element.\n\t   */\n\t  isInside(target) {\n\t    if (this.domElement === document.body || this.domElement === document.documentElement || this.domElement === document) {\n\t      return false;\n\t    }\n\n\t    let parent = this.getParent();\n\t    while (parent.domElement !== document.body) {\n\t      if (parent.domElement === target.domElement) {\n\t        return true;\n\t      }\n\t      parent = parent.getParent();\n\t    }\n\n\t    return false;\n\t  }\n\n\t  /**\n\t   * Returns whether or not the element is selected. If the element is not an option this returns false.\n\t   *\n\t   * @returns {boolean} True if the element is selected, false if it isn't or is not an option.\n\t   */\n\t  isSelected() {\n\t    return this.domElement.tagName === 'OPTION' && this.domElement.selected;\n\t  }\n\n\t  /**\n\t   * Determines if the element is visible using its display and visibility styles.\n\t   *\n\t   * @returns {boolean} True if the element is visible, false otherwise. This might return an invalid value if the element\n\t   * is absolutely positioned and off the screen, but is still technically visible.\n\t   */\n\t  isVisible() {\n\t    const computedStyle = this.getComputedStyle();\n\t    return computedStyle['display'] !== 'none' && computedStyle['visibility'] !== 'hidden';\n\t  }\n\n\t  /**\n\t   * Inserts this Element (which must be a newly created Element) into the DOM inside at the very beginning of the given\n\t   * element.\n\t   *\n\t   * @param {PrimeElement|Element} element The element to insert this Element into.\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  prependTo(element) {\n\t    // Error out for now if this element is in the document so we can punt on cloning for now\n\t    if (this.domElement.parentNode) {\n\t      throw new TypeError('You can only insert new PrimeElements for now');\n\t    }\n\n\t    const domElement = (element instanceof PrimeElement) ? element.domElement : element;\n\t    if (domElement.parentNode) {\n\t      domElement.insertBefore(this.domElement, domElement.firstChild);\n\t    } else {\n\t      throw new TypeError('The element you passed into prependTo is not in the DOM. You can\\'t insert a PrimeElement inside an element that isn\\'t in the DOM yet.');\n\t    }\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Queries the DOM using the given selector starting at this element and returns all the matched elements.\n\t   *\n\t   * @param {string} selector The selector.\n\t   * @returns {PrimeElementList} An element list.\n\t   */\n\t  query(selector) {\n\t    return PrimeDocument.query(selector, this);\n\t  }\n\n\t  /**\n\t   * Queries the DOM using the given selector starting at this element and returns the first matched element\n\t   * or null if there aren't any matches.\n\t   *\n\t   * @param {string} selector The selector.\n\t   * @returns {PrimeElement} An element or null.\n\t   */\n\t  queryFirst(selector) {\n\t    return PrimeDocument.queryFirst(selector, this);\n\t  }\n\n\t  /**\n\t   * Queries the DOM using the given selector starting at this element and returns the last matched element\n\t   * or null if there aren't any matches.\n\t   *\n\t   * @param {string} selector The selector.\n\t   * @returns {PrimeElement} An element or null.\n\t   */\n\t  queryLast(selector) {\n\t    return PrimeDocument.queryLast(selector, this);\n\t  }\n\n\t  /**\n\t   * Traverses up the DOM from this element and looks for a match to the selector.\n\t   *\n\t   * @param {string} selector The selector.\n\t   * @returns {PrimeElement} An element or null.\n\t   */\n\t  queryUp(selector) {\n\t    return PrimeDocument.queryUp(selector, this);\n\t  }\n\n\t  /**\n\t   * Removes all of the event listeners for the given element.\n\t   *\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  removeAllEventListeners() {\n\t    for (let event in this.domElement.eventListeners) {\n\t      if (this.domElement.eventListeners.hasOwnProperty(event)) {\n\t        for (let i = 0; i < this.domElement.eventListeners[event].length; i++) {\n\t          this._internalRemoveEventListener(event, this.domElement.eventListeners[event][i]);\n\t        }\n\t      }\n\t    }\n\n\t    this.domElement.eventListeners = {};\n\t    this.domElement.customEventListeners = {};\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Removes an attribute from the Element\n\t   *\n\t   * @param {string} name The name of the attribute.\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  removeAttribute(name) {\n\t    this.domElement.removeAttribute(name);\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Removes the given class (or list of space separated classes) from this Element.\n\t   *\n\t   * @param {string} classNames The class name(s).\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  removeClass(classNames) {\n\t    const currentClassName = this.domElement.className;\n\t    if (currentClassName === '') {\n\t      return this;\n\t    }\n\n\t    const currentClassNameList = currentClassName.split(Utils.spaceRegex);\n\t    const removeClassNameList = classNames.split(Utils.spaceRegex);\n\t    for (let i = 0; i < removeClassNameList.length; i++) {\n\t      Utils.removeFromArray(currentClassNameList, removeClassNameList[i]);\n\t    }\n\n\t    this.domElement.className = currentClassNameList.join(' ');\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Removes an event listener for a specific event from this Element, you must have attached using addEventListener\n\t   *\n\t   * @param {string} event The name of the event.\n\t   * @param {*} listener The event listener that was bound.\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  removeEventListener(event, listener) {\n\t    let listeners;\n\t    if (event.indexOf(':') === -1) {\n\t      this._internalRemoveEventListener(event, listener);\n\t      listeners = this.domElement.eventListeners[event];\n\t    } else {\n\t      listeners = this.domElement.customEventListeners[event];\n\t    }\n\n\t    if (listeners) {\n\t      Utils.removeFromArray(listeners, listener);\n\t    }\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Removes all of the event listeners for the given event from this element.\n\t   *\n\t   * @param {string} event The name of the event to remove the listeners for.\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  removeEventListeners(event) {\n\t    if (event.indexOf(':') === -1) {\n\t      if (this.domElement.eventListeners[event]) {\n\t        for (let i = 0; i < this.domElement.eventListeners[event].length; i++) {\n\t          this._internalRemoveEventListener(event, this.domElement.eventListeners[event][i]);\n\t        }\n\n\t        delete this.domElement.eventListeners[event];\n\t      }\n\t    } else {\n\t      if (this.domElement.customEventListeners[event]) {\n\t        delete this.domElement.customEventListeners[event];\n\t      }\n\t    }\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Removes all of the event listeners for the given pattern from this element.\n\t   *\n\t   * @param {RegExp} pattern The regular expression that matches the names of the events to remove the listeners for.\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  removeEventListenersByPattern(pattern) {\n\t    for (let event in this.domElement.eventListeners) {\n\t      if (this.domElement.eventListeners.hasOwnProperty(event) && pattern.test(event)) {\n\t        for (let i = 0; i < this.domElement.eventListeners[event].length; i++) {\n\t          this._internalRemoveEventListener(event, this.domElement.eventListeners[event][i]);\n\t        }\n\n\t        delete this.domElement.eventListeners[event];\n\t      }\n\t    }\n\n\t    for (let event in this.domElement.customEventListeners) {\n\t      if (this.domElement.customEventListeners.hasOwnProperty(event) && pattern.test(event)) {\n\t        delete this.domElement.customEventListeners[event];\n\t      }\n\t    }\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Removes this Element from the DOM. If the Element isn't in the DOM this does nothing.\n\t   *\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  removeFromDOM() {\n\t    if (this.domElement.parentNode) {\n\t      this.domElement.parentNode.removeChild(this.domElement);\n\t    }\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Create a selected range for this element.\n\t   *\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  selectElementContents() {\n\t    let range;\n\t    let selection;\n\n\t    if (document.body.createTextRange) {\n\t      /* IE */\n\t      range = document.body.createTextRange();\n\t      range.moveToElementText(this.domElement);\n\t      range.select();\n\t    } else if (window.getSelection) {\n\t      /* Rest of the world */\n\t      selection = window.getSelection();\n\t      range = document.createRange();\n\t      range.selectNodeContents(this.domElement);\n\t      selection.removeAllRanges();\n\t      selection.addRange(range);\n\t    }\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Scrolls this Element into the visible area of the browser window.\n\t   *\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  scrollIntoView() {\n\t    this.domElement.scrollIntoView();\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Scrolls this element to the given horizontal position.\n\t   *\n\t   * @param {number} position The position to scroll the element to.\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  scrollLeftTo(position) {\n\t    this.domElement.scrollLeft = position;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Scrolls this element to the given vertical position.\n\t   *\n\t   * @param {number} position The position to scroll the element to.\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  scrollTo(position) {\n\t    this.domElement.scrollTop = position;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Scrolls this element to the bottom.\n\t   *\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  scrollToBottom() {\n\t    this.domElement.scrollTop = this.domElement.scrollHeight;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Scrolls this element to the top.\n\t   *\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  scrollToTop() {\n\t    this.domElement.scrollTop = 0;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets an attribute of the Element.\n\t   *\n\t   * @param {string} name The attribute name\n\t   * @param {number|string} value The attribute value\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  setAttribute(name, value) {\n\t    if (typeof value === 'number') {\n\t      value = value.toString();\n\t    }\n\t    if (this.domElement.setAttribute) {\n\t      this.domElement.setAttribute(name, value);\n\t    } else {\n\t      const attribute = document.createAttribute(name);\n\t      attribute.nodeValue = value;\n\t      this.domElement.setAttributeNode(attribute);\n\t    }\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets a data- attribute of the Element.\n\t   *\n\t   * Example: setDataAttribute('fooBar', 'baz');\n\t   *  is equivalent to calling setAttribute('data-foo-bar', 'baz');\n\t   *\n\t   * @param {string} name The attribute name\n\t   * @param {number|string} value The attribute value\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  setDataAttribute(name, value) {\n\t    const dataName = 'data-' + name.replace(/([a-z])([A-Z])/g, \"$1-$2\").toLowerCase();\n\t    return this.setAttribute(dataName, value);\n\t  }\n\n\t  /**\n\t   * Sets multiple attributes of the Element from the hash\n\t   *\n\t   * @param {Object} attributes An object of key value style pairs.\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  setAttributes(attributes) {\n\t    for (let key in attributes) {\n\t      if (attributes.hasOwnProperty(key)) {\n\t        this.setAttribute(key, attributes[key]);\n\t      }\n\t    }\n\t    return this;\n\t  }\n\n\t  /**\n\t   * If this element is a checkbox or radio button, this sets the checked field on the DOM object equal to the given\n\t   * value.\n\t   *\n\t   * @param {boolean} value The value to set the checked state of this element to.\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  setChecked(value) {\n\t    this.domElement.checked = value;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets if this element is disabled or not. This works with any element that responds to the disabled property.\n\t   *\n\t   * @param {boolean} value The value to set the disabled state of this element to.\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  setDisabled(value) {\n\t    this.domElement.disabled = value;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the height of this element using the height style.\n\t   *\n\t   * @param {number|string} height The new height as a number (for pixels) or string.\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  setHeight(height) {\n\t    if (typeof(height) === 'number') {\n\t      height = height + 'px';\n\t    }\n\n\t    this.setStyle('height', height);\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the inner HTML content of the Element.\n\t   *\n\t   * @param {string|PrimeElement} newHTML The new HTML content for the Element.\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  setHTML(newHTML) {\n\t    if (newHTML !== null) {\n\t      if (newHTML instanceof PrimeElement) {\n\t        this.domElement.innerHTML = newHTML.getHTML();\n\t      } else {\n\t        this.domElement.innerHTML = newHTML;\n\t      }\n\t    }\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the ID of the Element.\n\t   *\n\t   * @param {string} id The ID.\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  setId(id) {\n\t    this.domElement.id = id;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets left position of the element.\n\t   *\n\t   * @param {number|string} left The left position of the element in pixels or as a string.\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  setLeft(left) {\n\t    let leftString = left;\n\t    if (typeof(left) === 'number') {\n\t      leftString = left + 'px';\n\t    }\n\n\t    this.setStyle('left', leftString);\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the opacity of the element. This also sets the IE alpha filter for IE version 9 or younger.\n\t   *\n\t   * @param {number} opacity The opacity.\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  setOpacity(opacity) {\n\t    if (Browser.name === 'Explorer' && Browser.version < 9) {\n\t      this.domElement.style.filter = 'alpha(opacity=' + opacity + ')';\n\t    } else {\n\t      this.domElement.style.opacity = opacity;\n\t    }\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the selected value on the element. If the element is not an option or radio, this does nothing.\n\t   *\n\t   * @param {boolean} selected Selected value.\n\t   */\n\t  setSelected(selected) {\n\t    this.domElement.selected = selected;\n\t  }\n\n\t  /**\n\t   * Sets the selected value(s) of this element. This works on selects, checkboxes, and radio buttons.\n\t   *\n\t   * @param {string} [arguments] The value(s) to select (var args).\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  setSelectedValues() {\n\t    // Handle the case where they passed in an array\n\t    let values = null;\n\t    if (arguments.length === 1 && Utils.isArray(arguments[0])) {\n\t      values = arguments[0];\n\t    } else {\n\t      values = Array.prototype.slice.call(arguments, 0);\n\t    }\n\n\t    if (this.domElement.tagName === 'INPUT' && (this.domElement.type === 'checkbox' || this.domElement.type === 'radio')) {\n\t      const name = this.domElement.name;\n\t      const form = PrimeDocument.queryUp('form', this.domElement);\n\t      PrimeDocument.query('input[name=\"' + name + '\"]', form).each(function(element) {\n\t        element.setChecked(values.indexOf(element.getValue()) !== -1);\n\t      });\n\t    } else if (this.domElement.tagName === 'SELECT') {\n\t      for (let i = 0; i < this.domElement.length; i++) {\n\t        this.domElement.options[i].selected = values.indexOf(this.domElement.options[i].value) !== -1;\n\t      }\n\t    }\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the style for the name of this Element.\n\t   *\n\t   * @param {string} name The style name.\n\t   * @param {number|string} value The style value.\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  setStyle(name, value) {\n\t    if (typeof value === 'number') {\n\t      value = value.toString();\n\t    }\n\t    this.domElement.style[name] = value;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets multiple styles of this Element.\n\t   *\n\t   * @param {Object} styles An object with key value pairs for the new style names and values.\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  setStyles(styles) {\n\t    for (let key in styles) {\n\t      if (styles.hasOwnProperty(key)) {\n\t        this.setStyle(key, styles[key]);\n\t      }\n\t    }\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the textContent of the Element.\n\t   *\n\t   * @param {number|string|PrimeElement} newText The new text content for the Element.\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  setTextContent(newText) {\n\t    if (newText !== null) {\n\t      if (newText instanceof PrimeElement) {\n\t        this.domElement.textContent = newText.getTextContent();\n\t      } else {\n\t        if (typeof newText === 'number') {\n\t          newText = newText.toString();\n\t        }\n\t        this.domElement.textContent = newText;\n\t      }\n\t    }\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets top position of the element.\n\t   *\n\t   * @param {number|string} top The top position of the element in pixels or as a string.\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  setTop(top) {\n\t    let topString = top;\n\t    if (typeof(top) === 'number') {\n\t      topString = top + 'px';\n\t    }\n\n\t    this.setStyle('top', topString);\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the value of this Element. This handles checkboxes, radio buttons, options, text inputs and text areas. This\n\t   * works on checkboxes and radio buttons, but it change the value attribute on them rather than checking and unchecking\n\t   * the buttons themselves. To check and uncheck the buttons, use the select method.\n\t   *\n\t   * @param {number|string} value The new value.\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  setValue(value) {\n\t    if (typeof value === 'number') {\n\t      value = value.toString();\n\t    }\n\t    this.domElement.value = value;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the width of this element using the height style.\n\t   *\n\t   * @param {number|string} width The new width as a number (for pixels) or string.\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  setWidth(width) {\n\t    if (typeof(width) === 'number') {\n\t      width = width + 'px';\n\t    }\n\n\t    this.setStyle('width', width);\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Shows the Element by setting the display style first to empty string. After this, the elements computed style is\n\t   * checked to see if the element is still not visible. If that is true, the element must have a CSS style defined in\n\t   * a stylesheet that is setting it to display: none. In this case, we determine if the element is a block level element\n\t   * and either set the display to 'block' or 'inline'.\n\t   *\n\t   * @param {string} [displayValue] The display value to use for the show. This defaults to the W3C standard display\n\t   * setting depending on the type of element you are showing. For example, INPUT is inline and DIV is block.\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  show(displayValue) {\n\t    if (Utils.isDefined(displayValue)) {\n\t      this.domElement.style.display = displayValue;\n\t      return this;\n\t    }\n\n\t    this.domElement.style.display = '';\n\n\t    const computedDisplay = this.getComputedStyle()['display'];\n\t    if (computedDisplay === 'none') {\n\t      if (!Utils.isDefined(displayValue)) {\n\t        displayValue = (PrimeElement.blockElementRegexp.test(this.domElement.tagName)) ? 'block' : 'inline';\n\t      }\n\n\t      this.domElement.style.display = displayValue;\n\t    }\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Toggle the class on this element.\n\t   *\n\t   * @param {string} className The class name.\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  toggleClass(className) {\n\t    if (this.hasClass(className)) {\n\t      this.removeClass(className);\n\t    } else {\n\t      this.addClass(className);\n\t    }\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Removes this element from the DOM while preserving the inner HTML.\n\t   *\n\t   * Example, call unwrap on the italic element:\n\t   *   <strong>Hello</strong><italic> World </italic> --> <strong>Hello</strong> World\n\t   *\n\t   * @returns {PrimeElement} This Element.\n\t   */\n\t  unwrap() {\n\t    const parent = this.getParent().domElement;\n\t    while (this.domElement.firstChild) {\n\t      parent.insertBefore(this.domElement.firstChild, this.domElement);\n\t    }\n\n\t    this.removeFromDOM();\n\t  }\n\n\t  /**\n\t   * Builds a new element using the given HTML snippet (currently this only supports the tag).\n\t   *\n\t   * @param {string} elementString The element string.\n\t   * @param {Object} [properties={}] The properties for the new element.\n\t   * @returns {PrimeElement} A new PrimeElement.\n\t   */\n\t  wrapInnerHTML(elementString, properties) {\n\t    const element = PrimeDocument.newElement(elementString, properties);\n\t    element.setHTML(this.getOuterHTML());\n\t    this.domElement.outerHTML = element.domElement.outerHTML;\n\t    return this;\n\t  }\n\n\t  /* ===================================================================================================================\n\t   * Private Methods\n\t   * ===================================================================================================================*/\n\n\t  /**\n\t   * Handle delegated events.\n\t   *\n\t   * @param {Event} event\n\t   * @private\n\t   */\n\t  _handleDelegatedEvent(event) {\n\t    this._callMatchedListeners(event, event.target);\n\n\t    // If the event cannot bubble, we are done.\n\t    if (!event.bubbles) {\n\t      return;\n\t    }\n\n\t    // While propagation has not been stopped, walk up the tree to simulate the bubble\n\t    let domElement = event.target;\n\t    while (true) {\n\t      if (domElement === this.domElement || domElement === document || event.isPropagationStopped) {\n\t        break;\n\t      }\n\n\t      domElement = domElement.parentNode;\n\t      this._callMatchedListeners(event, domElement);\n\t    }\n\t  }\n\n\t  _callMatchedListeners(event, target) {\n\t    // Test each selector we have against this target\n\t    let delegatedListeners = this.domElement.delegatedListeners[event.type] || [];\n\t    for (let selector in delegatedListeners) {\n\t      if (delegatedListeners.hasOwnProperty(selector)) {\n\t        if (target.matches(selector)) {\n\n\t          let scopedListeners = delegatedListeners[selector];\n\t          // Call each listener unless immediate propagation has been stopped\n\t          for (let i = 0; i < scopedListeners.length; i++) {\n\n\t            if (event.isImmediatePropagationStopped) {\n\t              return;\n\t            }\n\n\t            scopedListeners[i](event, target);\n\t          }\n\t        }\n\t      }\n\t    }\n\t  }\n\n\t  /**\n\t   * Removes the event listener proxy from this element.\n\t   *\n\t   * @param {string} event The event name.\n\t   * @param {Function} listener The listener function.\n\t   * @private\n\t   */\n\t  _internalRemoveEventListener(event, listener) {\n\t    if (event.indexOf(':') === -1) {\n\t      // Traditional event\n\t      if (this.domElement.removeEventListener) {\n\t        this.domElement.removeEventListener(event, listener, false);\n\t      } else if (this.domElement.detachEvent) {\n\t        this.domElement.detachEvent('on' + event, listener);\n\t      } else {\n\t        throw new TypeError('Unable to remove event from the element. Neither removeEventListener nor detachEvent methods are available');\n\t      }\n\t    } else if (this.domElement.customEventListeners && this.domElement.customEventListeners[event]) {\n\t      // Custom event\n\t      const customListeners = this.domElement.customEventListeners[event];\n\t      Utils.removeFromArray(customListeners, listener);\n\t    }\n\t  }\n\t}\n\n\n\t/* ===================================================================================================================\n\t * Polyfill\n\t * ===================================================================================================================*/\n\n\t(function() {\n\t  if (!Element.prototype.matches) {\n\t    Element.prototype.matches = function(selector) {\n\t      const domElement = this;\n\t      const matches = (domElement.parentNode || domElement.document).querySelectorAll(selector);\n\t      let i = 0;\n\n\t      while (matches[i] && matches[i] !== domElement) {\n\t        i++;\n\t      }\n\n\t      return !!matches[i];\n\t    };\n\t  }\n\n\t  // Add isPropagationStopped, this is part of the DOM Level 3 spec for CustomEvents\n\t  // - adding it here for all types so it can be used by the delegation event listener\n\t  // https://www.w3.org/TR/2003/NOTE-DOM-Level-3-Events-20031107/events.html#Events-Event-isPropagationStopped\n\t  if (!Event.prototype.isPropagationStopped) {\n\t    let _stopPropagation = Event.prototype.stopPropagation;\n\t    Event.prototype.stopPropagation = function() {\n\t      this.isPropagationStopped = true;\n\t      _stopPropagation.apply(this, arguments);\n\t    };\n\t  }\n\n\t  // Add isImmediatePropagationStopped, this is part of the DOM Level 3 spec for CustomEvents\n\t  // - adding it here for all types so it can be used by the delegation event listener\n\t  // https://www.w3.org/TR/2003/NOTE-DOM-Level-3-Events-20031107/events.html#Events-Event-isImmediatePropagationStopped\n\t  if (!Event.prototype.isImmediatePropagationStopped) {\n\t    let _stopImmediatePropagation = Event.prototype.stopImmediatePropagation;\n\t    Event.prototype.stopImmediatePropagation = function() {\n\t      this.isImmediatePropagationStopped = true;\n\t      _stopImmediatePropagation.apply(this, arguments);\n\t    };\n\t  }\n\t})();\n\n\t/*\n\t * Copyright (c) 2017, Inversoft Inc., All Rights Reserved\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n\t * either express or implied. See the License for the specific\n\t * language governing permissions and limitations under the License.\n\t */\n\n\tclass PrimeElementList {\n\t  /**\n\t   * Constructs an PrimeElementList object using the given array containing DOMElements or PrimeElement objects, or the NodeList containing Node objects.\n\t   *\n\t   * @constructor\n\t   * @param {Array|NodeList} elements An array containing DOMElement or PrimeElement objects, or a NodeList containing Node objects.\n\t   */\n\t  constructor(elements) {\n\t    Utils.bindAll(this);\n\n\t    // NodeList does not inherit from Array so do not assume object type.\n\t    this.length = elements.length;\n\t    for (let i = 0; i < elements.length; i++) {\n\t      if (elements[i] instanceof PrimeElement) {\n\t        this[i] = elements[i];\n\t      } else {\n\t        this[i] = new PrimeElement(elements[i]);\n\t      }\n\t    }\n\t  }\n\n\t  /**\n\t   * Shorthand for calling {@link PrimeElement.addClass} on each Element in the PrimeElementList.\n\t   *\n\t   * Adds the given class (or list of space separated classes) to all Elements in this PrimeElementList.\n\t   *\n\t   * @param {string} classNames The class name(s) separated by a space.\n\t   * @returns {PrimeElementList} This PrimeElementList.\n\t   */\n\t  addClass(classNames) {\n\t    return this._proxyToElement('addClass', classNames);\n\t  }\n\n\t  /**\n\t   * Shorthand for calling {@link PrimeElement.addEventListener} on each Element in the PrimeElementList.\n\t   *\n\t   * Attaches an event listener to all Elements in this PrimeElementList.\n\t   *\n\t   * @param {string} event The name of the event.\n\t   * @param {Function} listener The event listener function.\n\t   * @returns {PrimeElement|PrimeElementList} This Element.\n\t   */\n\t  addEventListener(event, listener) {\n\t    return this._proxyToElement('addEventListener', event, listener);\n\t  }\n\n\t  /**\n\t   * Iterates over each of the PrimeElement objects in this PrimeElementList and calls the given function for each one.\n\t   * The <code>this</code> variable inside the function will be managed by the caller of this method. You should use the\n\t   * <code>bind</code> method on the Function object if you want to manage the <code>this</code> reference.\n\t   *\n\t   * The function can optionally take two parameters. The first parameter is the current element. The second parameter\n\t   * is the current index.\n\t   *\n\t   * @param {Function} iterationFunction The function to call.\n\t   * @returns {PrimeElementList} This PrimeElementList.\n\t   */\n\t  each(iterationFunction) {\n\t    for (let i = 0; i < this.length; i++) {\n\t      iterationFunction(this[i], i);\n\t    }\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Shorthand for calling {@link PrimeElement.hide} on each Element in the PrimeElementList.\n\t   *\n\t   * Hides the Element by setting the display style to none.\n\t   *\n\t   * @returns {PrimeElementList} This PrimeElementList.\n\t   */\n\t  hide() {\n\t    return this._proxyToElement('hide');\n\t  }\n\n\t  /**\n\t   * Returns the indexOf the element that matches the parameter, either Prime Element or DOMElement.\n\t   *\n\t   * @param {PrimeElement|Element} element The element to look for\n\t   * @returns {number} The position of the element in the list, or -1 if not present.\n\t   */\n\t  indexOf(element) {\n\t    const domElement = (element instanceof PrimeElement) ? element.domElement : element;\n\n\t    for (let i = 0; i < this.length; i++) {\n\t      if (this[i].domElement === domElement) {\n\t        return i;\n\t      }\n\t    }\n\n\t    return -1;\n\t  }\n\n\t  /**\n\t   * Removes all the matched elements in the PrimeElementList from the DOM.\n\t   *\n\t   * @returns {PrimeElementList} This PrimeElementList.\n\t   */\n\t  removeAllFromDOM() {\n\t    for (let i = 0; i < this.length; i++) {\n\t      this[i].removeFromDOM();\n\t    }\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Shorthand for calling {@link PrimeElement.removeClass} on each Element in the PrimeElementList.\n\t   *\n\t   * Removes the given class (or list of space separated classes) from all Elements in this PrimeElementList.\n\t   *\n\t   * @param {string} classNames The class name(s) separated by a space.\n\t   * @returns {PrimeElementList} This PrimeElementList.\n\t   */\n\t  removeClass(classNames) {\n\t    return this._proxyToElement('removeClass', classNames);\n\t  }\n\n\t  /**\n\t   * Shorthand for calling {@link PrimeElement.setChecked} on each Element in the PrimeElementList.\n\t   *\n\t   * If this element is a checkbox or radio button, this sets the checked field on the DOM object equal to the given\n\t   * value.\n\t   *\n\t   * @param {boolean} value The value to set the checked state of this element to.\n\t   * @returns {PrimeElementList} This PrimeElementList.\n\t   */\n\t  setChecked(value) {\n\t    return this._proxyToElement('setChecked', value);\n\t  }\n\n\t  /**\n\t   * Shorthand for calling {@link PrimeElement.setDisabled} on each Element in the PrimeElementList.\n\t   *\n\t   * Sets if this element is disabled or not. This works with any element that responds to the disabled property.\n\t   *\n\t   * @param {boolean} value The value to set the disabled state of this element to.\n\t   * @returns {PrimeElementList} This PrimeElementList.\n\t   */\n\t  setDisabled(value) {\n\t    return this._proxyToElement('setDisabled', value);\n\t  }\n\n\t  /**\n\t   * Shorthand for calling {@link PrimeElement.show} on each Element in the PrimeElementList.\n\t   *\n\t   * Shows the element.\n\t   *\n\t   * @returns {PrimeElementList} This PrimeElementList.\n\t   */\n\t  show() {\n\t    return this._proxyToElement('show');\n\t  }\n\n\t  /**\n\t   * @callback PrimeElementListPredicate\n\t   *\n\t   * A function that defines a condition on a PrimeElement\n\t   *\n\t   * @param {PrimeElement} element\n\t   * @returns {boolean} True if the element matches a condition\n\t   */\n\n\t  /**\n\t   * A function that tests for any element that matches a condition.\n\t   * @param {PrimeElementListPredicate} predicate A function that defines the condition to check\n\t   * @returns {boolean} True if any element matches the predicate\n\t   */\n\t  some(predicate) {\n\t    for (let i = 0; i < this.length; ++i) {\n\t      if (predicate(this[i])) {\n\t        return true;\n\t      }\n\t    }\n\t    return false;\n\t  }\n\n\t  /* ===================================================================================================================\n\t   * Private methods\n\t   * ===================================================================================================================*/\n\n\t  /**\n\t   * Proxy function calls to each Element in the PrimeElementList.\n\t   * The first parameter is function name, followed by a variable length of arguments.\n\t   *\n\t   * Example usage: this._proxyToElement('addClass', classNames);\n\t   *\n\t   * @returns {PrimeElementList}\n\t   * @private\n\t   */\n\t  _proxyToElement() {\n\t    const args = Array.prototype.slice.apply(arguments);\n\t    for (let i = 0; i < this.length; i++) {\n\t      this[i][args[0]].apply(this[i], args.slice(1));\n\t    }\n\t    return this;\n\t  }\n\t}\n\n\t/*\n\t * Copyright (c) 2012-2018, Inversoft Inc., All Rights Reserved\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n\t * either express or implied. See the License for the specific\n\t * language governing permissions and limitations under the License.\n\t */\n\n\tconst readyFunctions = [];\n\tconst tagRegexp = /^<(\\w+)\\s*\\/?>.*(?:<\\/\\1>)?$/;\n\n\t/**\n\t * The Body element as a PrimeElement object.\n\t *\n\t * @type {?PrimeElement}\n\t */\n\tlet bodyElement = null;\n\n\tclass PrimeDocument {\n\n\t  /**\n\t   * @returns {PrimeElement}\n\t   */\n\t  static get Element() {\n\t    return PrimeElement;\n\t  }\n\n\t  /**\n\t   * @returns {PrimeElementList}\n\t   */\n\t  static get ElementList() {\n\t    return PrimeElementList;\n\t  }\n\n\t  /**\n\t   * @returns {Array<Function>}\n\t   */\n\t  static get readyFunctions() {\n\t    return readyFunctions;\n\t  }\n\n\t  /**\n\t   * @returns {RegExp}\n\t   */\n\t  static get tagRegexp() {\n\t    return tagRegexp;\n\t  }\n\n\t  /**\n\t   * @returns {?PrimeElement} the Prime body element\n\t   */\n\t  static get bodyElement() {\n\t    if (bodyElement === null) {\n\t      bodyElement = new PrimeElement(document.body);\n\t    }\n\t    return bodyElement;\n\t  }\n\n\t  /**\n\t   * Set the body element\n\t   * @param {?PrimeElement} body the Prime body element\n\t   */\n\t  static set bodyElement(body) {\n\t    bodyElement = body;\n\t  }\n\n\t  /**\n\t   * Attaches an event listener to the document body and will only invoke the listener when the event target matches\n\t   * the provided selector.\n\t   *\n\t   * The intent of this function is to provide a delegated listener and handle events from nested elements.\n\t   *\n\t   * @param {string} event The name of the event\n\t   * @param  {string} selector The selector to match against the Element\n\t   * @param {PrimeDelegationEventListener} listener The event listener function\n\t   */\n\t  static addDelegatedEventListener(event, selector, listener) {\n\t    PrimeDocument.bodyElement.addDelegatedEventListener(event, selector, listener);\n\t  }\n\n\t  /**\n\t   * Attaches an event listener to the document, returning the handler proxy.\n\t   *\n\t   * @param {string} event The name of the event.\n\t   * @param {Function} listener The event listener function.\n\t   * @returns {PrimeDocument} The PrimeDocument object so you can chain method calls together.\n\t   */\n\t  static addEventListener(event, listener) {\n\t    if (event.indexOf(':') === -1) {\n\t      // Traditional event\n\t      document.eventListeners = document.eventListeners || {};\n\t      document.eventListeners[event] = document.eventListeners[event] || [];\n\t      document.eventListeners[event].push(listener);\n\t      document.addEventListener(event, listener, false);\n\t    } else {\n\t      // Custom event\n\t      document.customEventListeners = document.customEventListeners || {};\n\t      document.customEventListeners[event] = document.customEventListeners[event] || [];\n\t      document.customEventListeners[event].push(listener);\n\t    }\n\n\t    return PrimeDocument;\n\t  }\n\n\t  /**\n\t   * Returns the height of the document.\n\t   *\n\t   * @returns {number} The height of the document in pixels.\n\t   */\n\t  static getHeight() {\n\t    const body = document.body;\n\t    const html = document.documentElement;\n\n\t    return Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight);\n\t  }\n\n\t  /**\n\t   * Returns the width of the document.\n\t   *\n\t   * @returns {number} The width of the document in pixels.\n\t   */\n\t  static getWidth() {\n\t    const body = document.body;\n\t    const html = document.documentElement;\n\n\t    return Math.max(body.scrollWidth, body.offsetWidth, html.clientWidth, html.scrollWidth, html.offsetWidth);\n\t  }\n\n\t  /**\n\t   * Builds a new document using the given HTML document.\n\t   *\n\t   * @param {string} documentString The HTML string to build the document.\n\t   * @returns {Document} A new document.\n\t   */\n\t  static newDocument(documentString) {\n\t    return new DOMParser().parseFromString(documentString, \"text/html\");\n\t  }\n\n\t  /**\n\t   * Builds a new element using the given HTML snippet (currently this only supports the tag).\n\t   *\n\t   * @param {string} elementString The element string.\n\t   * @param {Object} [properties={}] The properties for the new element.\n\t   * @returns {PrimeElement} A new PrimeElement.\n\t   */\n\t  static newElement(elementString, properties) {\n\t    properties = Utils.isDefined(properties) ? properties : {};\n\t    const result = PrimeDocument.tagRegexp.exec(elementString);\n\t    if (result === null) {\n\t      throw new TypeError('Invalid string to create a new element [' + elementString + ']. It should look like <a/>');\n\t    }\n\n\t    const element = new PrimeElement(document.createElement(result[1]));\n\t    for (let key in properties) {\n\t      if (properties.hasOwnProperty(key)) {\n\t        if (key === 'id') {\n\t          element.setId(properties[key]);\n\t        } else {\n\t          element.setAttribute(key, properties[key]);\n\t        }\n\t      }\n\t    }\n\n\t    return element;\n\t  }\n\n\t  /**\n\t   * Adds the given callback function to the list of functions to invoke when the document is ready. If the document is\n\t   * already fully loaded, this simply invokes the callback directly.\n\t   *\n\t   * @param {Function} callback The callback function.\n\t   */\n\t  static onReady(callback) {\n\t    if (document.readyState === 'complete') {\n\t      callback();\n\t    } else {\n\t      // If this is the first call, register the event listener on the document\n\t      if (this.readyFunctions.length === 0) {\n\t        if (document.addEventListener) {\n\t          document.addEventListener('DOMContentLoaded', PrimeDocument._callReadyListeners, false);\n\t        } else if (document.attachEvent) {\n\t          document.attachEvent('onreadystatechange', PrimeDocument._callReadyListeners);\n\t        } else {\n\t          throw new TypeError('No way to attach an event to the document. What browser are you running?');\n\t        }\n\t      }\n\n\t      // Add the callback\n\t      PrimeDocument.readyFunctions.push(callback);\n\t    }\n\t  }\n\n\t  /**\n\t   * Take the HTML string and append it to the body.\n\t   *\n\t   * @param {string} html The HTML to append\n\t   */\n\t  static appendHTML(html) {\n\t    document.body.insertAdjacentHTML('beforeend', html);\n\t  }\n\n\t  /**\n\t   * Moves the given element by appending it to the element provided by the second argument.\n\t   *\n\t   * @param {Element|PrimeElement} element The element to move.\n\t   * @param {Element|PrimeElement} appendToElement [appendToElement=body] The element to append to, defaults to the body if not provided.\n\t   * @returns {PrimeElement} The element that has been moved.\n\t   */\n\t  static move(element, appendToElement) {\n\t    element = (element instanceof PrimeElement) ? element : new PrimeElement(element);\n\n\t    if (!Utils.isDefined(appendToElement)) {\n\t      appendToElement = new PrimeElement(document.body);\n\t    } else {\n\t      appendToElement = (appendToElement instanceof PrimeElement) ? appendToElement : new PrimeElement(appendToElement);\n\t    }\n\n\t    appendToElement.appendHTML(element.getOuterHTML());\n\t    element.removeFromDOM();\n\t    return appendToElement.getLastChild();\n\t  }\n\n\t  /**\n\t   * Queries the DOM using the given selector starting at the given element and returns all the matched elements.\n\t   *\n\t   * @param {string} selector The selector.\n\t   * @param {Element|Document|PrimeElement} [element=document] The starting point for the search (defaults to document if not provided).\n\t   * @returns {PrimeElementList} An element list.\n\t   */\n\t  static query(selector, element) {\n\t    let domElement = null;\n\t    if (!Utils.isDefined(element)) {\n\t      domElement = document;\n\t    } else {\n\t      domElement = (element instanceof PrimeElement) ? element.domElement : element;\n\t    }\n\n\t    const elements = domElement.querySelectorAll(selector);\n\t    return new PrimeElementList(elements);\n\t  }\n\n\t  /**\n\t   * Queries the DOM for an element that has the given ID.\n\t   *\n\t   * @param {string} id The ID.\n\t   * @returns {PrimeElement} The element or null.\n\t   */\n\t  static queryById(id) {\n\t    let element = document.getElementById(id);\n\t    if (!element) {\n\t      return null;\n\t    }\n\n\t    return new PrimeElement(element);\n\t  }\n\n\t  /**\n\t   * Queries the DOM using the given selector starting at the given element and returns the first matched element\n\t   * or null if there aren't any matches.\n\t   *\n\t   * @param {string} selector The selector.\n\t   * @param {Element|Document|PrimeElement} [element=document] The starting point for the search (defaults to document if not provided).\n\t   * @returns {PrimeElement} An element or null.\n\t   */\n\t  static queryFirst(selector, element) {\n\t    let domElement = null;\n\t    if (!Utils.isDefined(element)) {\n\t      domElement = document;\n\t    } else {\n\t      domElement = (element instanceof PrimeElement) ? element.domElement : element;\n\t    }\n\n\t    domElement = domElement.querySelector(selector);\n\t    if (domElement === null) {\n\t      return null;\n\t    }\n\n\t    return new PrimeElement(domElement);\n\t  }\n\n\t  /**\n\t   * Queries the DOM using the given selector starting at the given element and returns the last matched element\n\t   * or null if there aren't any matches.\n\t   *\n\t   * @param {string} selector The selector.\n\t   * @param {Element|Document|PrimeElement} [element=document] The starting point for the search (defaults to document if not provided).\n\t   * @returns {PrimeElement} An element or null.\n\t   */\n\t  static queryLast(selector, element) {\n\t    let domElement = null;\n\t    if (!Utils.isDefined(element)) {\n\t      domElement = document;\n\t    } else {\n\t      domElement = (element instanceof PrimeElement) ? element.domElement : element;\n\t    }\n\n\t    const domElements = domElement.querySelectorAll(selector);\n\t    if (domElements.length === 0) {\n\t      return null;\n\t    }\n\n\t    return new PrimeElement(domElements[domElements.length - 1]);\n\t  }\n\n\t  /**\n\t   * Traverses up the DOM from the starting element and looks for a match to the selector.\n\t   *\n\t   * @param {string} selector The selector.\n\t   * @param {PrimeElement|Element} element The starting point for the upward traversal.\n\t   * @returns {PrimeElement} An element or null.\n\t   */\n\t  static queryUp(selector, element) {\n\t    let domElement = null;\n\t    if (!Utils.isDefined(element)) {\n\t      throw new SyntaxError('Missing required parameter. The element is required.');\n\t    } else {\n\t      domElement = (element instanceof PrimeElement) ? element.domElement : element;\n\t    }\n\n\t    domElement = domElement.parentNode;\n\t    while (domElement !== null && !domElement.matches(selector)) {\n\t      domElement = domElement.parentNode;\n\t      if (domElement === document) {\n\t        domElement = null;\n\t      }\n\t    }\n\n\t    if (domElement !== null) {\n\t      return new PrimeElement(domElement);\n\t    }\n\n\t    return null;\n\t  }\n\n\t  /**\n\t   * Removes an event handler for a specific event from the document that you attached using addEventListener\n\t   *\n\t   * @param {string} event The name of the event.\n\t   * @param {Function} listener The listener function.\n\t   */\n\t  static removeEventListener(event, listener) {\n\t    if (document.removeEventListener) {\n\t      document.removeEventListener(event, listener, false);\n\t    } else if (document.detachEvent) {\n\t      document.detachEvent('on' + event, listener);\n\t    } else {\n\t      throw new TypeError('Unable to remove event from the element. Neither removeEventListener nor detachEvent methods are available');\n\t    }\n\t  }\n\n\t  /* ===================================================================================================================\n\t   * Private Methods\n\t   * ===================================================================================================================*/\n\n\t  /**\n\t   * Calls all the registered document ready listeners.\n\t   *\n\t   * @private\n\t   */\n\t  static _callReadyListeners() {\n\t    if (document.addEventListener || document.readyState === 'complete') {\n\t      let readyFunction;\n\t      while (readyFunction = PrimeDocument.readyFunctions.shift()) {\n\t        readyFunction();\n\t      }\n\t    }\n\n\t    if (document.removeEventListener) {\n\t      document.removeEventListener('DOMContentLoaded', PrimeDocument._callReadyListeners, false);\n\t    } else {\n\t      document.detachEvent('onreadystatechange', PrimeDocument._callReadyListeners);\n\t    }\n\t  }\n\t}\n\n\t/* ===================================================================================================================\n\t * Polyfill\n\t * ===================================================================================================================*/\n\n\t/* https://developer.mozilla.org/en-US/docs/Web/API/DOMParser */\n\t(function(DOMParser) {\n\t  const proto = DOMParser.prototype;\n\t  const nativeParse = proto.parseFromString;\n\n\t  // Firefox/Opera/IE throw errors on unsupported types\n\t  try {\n\t    // WebKit returns null on unsupported types\n\t    if ((new DOMParser()).parseFromString('', 'text/html')) {\n\t      // text/html parsing is natively supported\n\t      return;\n\t    }\n\t  } catch (ex) {\n\t  }\n\n\t  proto.parseFromString = function(markup, type) {\n\t    if (/^\\s*text\\/html\\s*(?:;|$)/i.test(type)) {\n\t      const doc = document.implementation.createHTMLDocument('');\n\t      if (markup.toLowerCase().indexOf('<!doctype') > -1) {\n\t        doc.documentElement.innerHTML = markup;\n\t      } else {\n\t        doc.body.innerHTML = markup;\n\t      }\n\t      return doc;\n\t    } else {\n\t      return nativeParse.apply(this, arguments);\n\t    }\n\t  };\n\t}(DOMParser));\n\n\t/*\n\t * Copyright (c) 2012-2018, Inversoft Inc., All Rights Reserved\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n\t * either express or implied. See the License for the specific\n\t * language governing permissions and limitations under the License.\n\t */\n\n\t/**\n\t * The Utils namespace. This contains utility functions.\n\t *\n\t * @namespace Utils\n\t */\n\tconst Utils = {\n\t  spaceRegex: /\\s+/,\n\t  typeRegex: /^\\[object\\s(.*)\\]$/,\n\n\t  /**\n\t   * Binds all of the functions inside the object so that <code>this</code> is the object. This is extremely useful for\n\t   * objects that have functions that will be used as event listeners. Rather than having to manage binding and function\n\t   * references manually you can instead bind all of the functions in the object and then use them directly for event\n\t   * listeners.\n\t   *\n\t   * Here's an example:\n\t   *\n\t   * <pre>\n\t   *   function Foo() {\n\t   *     Utils.bindAll(this);\n\t   *\n\t   *     // This function is bound to this (i.e. this.handleClick = this.handleClick.bind(this)).\n\t   *     PrimeDocument.queryFirst('a').addEventListener('click', this.handleClick);\n\t   *   }\n\t   *\n\t   *   Foo.prototype = {\n\t   *     handleClick: function(event) {\n\t   *       ...\n\t   *     }\n\t   *   };\n\t   * </pre>\n\t   *\n\t   * @param {*} object The object to bind all the functions for.\n\t   */\n\t  bindAll: function(object) {\n\t    Utils.getAllPropertyNames(object).forEach((property) => {\n\t      if (property !== 'constructor' && typeof object[property] === 'function' &&\n\t          !(object[property].name && object[property].name.startsWith('bound '))) { // name isn't defined in ie\n\t        Object.defineProperty(object, property, {value: object[property].bind(object)});\n\t      }\n\t    });\n\t  },\n\n\t  /**\n\t   * HTML escape a string.\n\t   *\n\t   * @param string The string to escape\n\t   * @returns {string} the escaped string\n\t   */\n\t  escapeHTML: function(string) {\n\t    let div = document.createElement('div');\n\t    div.appendChild(document.createTextNode(string));\n\t    return div.innerHTML;\n\t  },\n\n\t  /**\n\t   * Reverses HTML escaping.\n\t   * @param string\n\t   * @returns {string}\n\t   */\n\t  unescapeHTML: function(string) {\n\t    // Neat trick using a textarea\n\t    let txt = document.createElement('textarea');\n\t    txt.innerHTML = string;\n\t    return txt.value;\n\t  },\n\n\t  /**\n\t   * Returns all of the properties for this object and all of its\n\t   * inherited properties from parent objects.\n\t   *\n\t   * @param object\n\t   * @returns {Array<string>}\n\t   */\n\t  getAllPropertyNames: function(object) {\n\t    let props = {};\n\n\t    do {\n\t      Object.getOwnPropertyNames(object).forEach((prop) => {\n\t        if (!props[prop]) {\n\t          props[prop]=prop;\n\t        }\n\t      });\n\t    } while (object = Object.getPrototypeOf(object));\n\n\t    return Object.keys(props);\n\t  },\n\n\t  /**\n\t   * Binds all of the functions inside the object so that <code>this</code> is the object. This is extremely useful for\n\t   * objects that have functions that will be used as event listeners. Rather than having to manage binding and function\n\t   * references manually you can instead bind all of the functions in the object and then use them directly for event\n\t   * listeners.\n\t   *\n\t   * Here's an example:\n\t   *\n\t   * <pre>\n\t   *   function Foo() {\n\t   *     Utils.bindAll(this);\n\t   *\n\t   *     // This function is bound to this (i.e. this.handleClick = this.handleClick.bind(this)).\n\t   *     PrimeDocument.queryFirst('a').addEventListener('click', this.handleClick);\n\t   *   }\n\t   *\n\t   *   Foo.prototype = {\n\t   *     handleClick: function(event) {\n\t   *       ...\n\t   *     }\n\t   *   };\n\t   * </pre>\n\t   *\n\t   * @param {*} object The object to bind all the functions for.\n\t   * @param {String} arguments A varargs list of function names to bind.\n\t   */\n\t  bindSome: function(object) {\n\t    if (arguments.length > 1) {\n\t      for (let i = 1; i < arguments.length; i++) {\n\t        const func = object[arguments[i]];\n\t        if (!Utils.isDefined(func) || !(func instanceof Function)) {\n\t          throw new TypeError('The object does not contain a function named [' + arguments[i] + ']');\n\t        }\n\n\t        object[arguments[i]] = func.bind(object);\n\t      }\n\t    }\n\t    for (let property in object) {\n\t      if (object[property] instanceof Function) {\n\t        object[property] = object[property].bind(object);\n\t      }\n\t    }\n\t  },\n\n\t  /**\n\t   * Safely binds a function to a context.\n\t   *\n\t   * @param {Function} func The function to bind.\n\t   * @param {Object} [context] An optional context to bind the function to.\n\t   * @returns {Function} Either <code>func</code> or the newly bound function.\n\t   */\n\t  bindSafe: function(func, context) {\n\t    if (!Utils.isDefined(func)) {\n\t      throw new Error('Invalid arguments');\n\t    }\n\n\t    if (!Utils.isDefined(context)) {\n\t      return func;\n\t    }\n\n\t    return func.bind(context);\n\t  },\n\n\t  /**\n\t   * Calculates the length of the given text using the style of the given element.\n\t   *\n\t   * @param {PrimeElement} element The element to use the style of.\n\t   * @param {string} text The text to calculate the length of.\n\t   * @returns {number} The length of the text.\n\t   */\n\t  calculateTextLength: function(element, text) {\n\t    const computedStyle = element.getComputedStyle();\n\t    let textCalculator = PrimeDocument.queryById('prime-text-calculator');\n\t    if (textCalculator === null) {\n\t      textCalculator = PrimeDocument.newElement('<span/>')\n\t          .setStyles({\n\t            position: 'absolute',\n\t            width: 'auto',\n\t            fontSize: computedStyle['fontSize'],\n\t            fontFamily: computedStyle['fontFamily'],\n\t            fontWeight: computedStyle['fontWeight'],\n\t            letterSpacing: computedStyle['letterSpacing'],\n\t            whiteSpace: 'nowrap'\n\t          })\n\t          .setId('prime-text-calculator')\n\t          .setTop(-9999)\n\t          .setLeft(-9999)\n\t          .appendTo(document.body);\n\t    }\n\n\t    textCalculator.setHTML(text);\n\t    return textCalculator.getWidth();\n\t  },\n\n\t  /**\n\t   * Attempts to invoke a function iteratively in the background a specific number of times within a specific duration.\n\t   * This might not complete in the specified duration. The functions passed in should be short functions that return as\n\t   * quickly as possible. If you are using long functions, use the recursive setTimeout trick by-hand instance.\n\t   *\n\t   * @param {number} totalDuration The duration in milliseconds.\n\t   * @param {number} timesToCall The number of times to call the function.\n\t   * @param {Function} stepFunction The step function to call each iteration.\n\t   * @param {Function} [endFunction] The function to invoke at the end.\n\t   */\n\t  callIteratively: function(totalDuration, timesToCall, stepFunction, endFunction) {\n\t    const step = totalDuration / timesToCall;\n\t    let count = 0;\n\t    const id = setInterval(function() {\n\t      count++;\n\t      const last = (count >= timesToCall);\n\t      stepFunction(last);\n\t      if (last) {\n\t        clearInterval(id);\n\n\t        if (Utils.isDefined(endFunction)) {\n\t          endFunction();\n\t        }\n\t      }\n\t    }, step - 1);\n\t  },\n\n\t  /**\n\t   * Capitalizes the given String.\n\t   *\n\t   * @param {string} str The String to capitalize.\n\t   * @returns {string} The capitalized String.\n\t   */\n\t  capitalize: function(str) {\n\t    return str.charAt(0).toUpperCase() + str.substring(1);\n\t  },\n\n\t  /**\n\t   * Converts CSS style names to style JavaScript names.\n\t   *\n\t   * @param {string} name The CSS style name to convert\n\t   * @returns {string} The converted style name.\n\t   */\n\t  convertStyleName: function(name) {\n\t    if (name === 'float') {\n\t      return 'cssFloat';\n\t    }\n\n\t    let dash = name.indexOf('-');\n\t    if (dash === -1) {\n\t      return name;\n\t    }\n\n\t    let start = 0;\n\t    let result = '';\n\t    while (dash !== -1) {\n\t      const piece = name.substring(start, dash);\n\t      if (start === 0) {\n\t        result = result.concat(piece);\n\t      } else {\n\t        result = result.concat(Utils.capitalize(piece));\n\t      }\n\n\t      start = dash + 1;\n\t      dash = name.indexOf('-', start);\n\t    }\n\n\t    return result + Utils.capitalize(name.substring(start));\n\t  },\n\n\t  /**\n\t   * Return an options map {Object} of the data set values coerced to a typed value of boolean, string or number.\n\t   *\n\t   * @param {PrimeElement} element The element.\n\t   * @returns {Object} The options object.\n\t   */\n\t  dataSetToOptions: function(element) {\n\t    const options = {};\n\t    const data = element.getDataSet();\n\t    for (let prop in data) {\n\t      if (!data.hasOwnProperty(prop)) {\n\t        continue;\n\t      }\n\t      const value = data[prop];\n\t      if (isNaN(value)) {\n\t        if (value === 'true') {\n\t          options[prop] = true;\n\t        } else if (value === 'false') {\n\t          options[prop] = false;\n\t        } else {\n\t          options[prop] = value;\n\t        }\n\t      } else {\n\t        options[prop] = parseInt(value);\n\t      }\n\t    }\n\n\t    return options;\n\t  },\n\n\t  /**\n\t   * Determines if an object is an array or not.\n\t   *\n\t   * @param {*} o The object to check.\n\t   * @returns {boolean} True if the object is an array, false otherwise.\n\t   */\n\t  isArray: function(o) {\n\t    return Object.prototype.toString.call(o) === '[object Array]';\n\t  },\n\n\t  /**\n\t   * Tests whether or not the value is not null and not 'undefined'.\n\t   *\n\t   * @param {*} value The value to test.\n\t   * @returns {boolean} True if the value is defined (not null or undefined).\n\t   */\n\t  isDefined: function(value) {\n\t    return value !== null && typeof(value) !== 'undefined';\n\t  },\n\n\t  /**\n\t   * Left pad a number.\n\t   * @param {number} number the number to pad\n\t   * @param {number} width the width of the final result\n\t   * @returns {string}\n\t   */\n\t  leftPadNumber: function(number, width) {\n\t    const sign = Math.sign(number) === -1 ? '-' : '';\n\t    return sign + new Array(width).concat([Math.abs(number)]).join('0').slice(-width);\n\t  },\n\n\t  /**\n\t   * Parses a CSS measure value (12px) as an integer.\n\t   *\n\t   * @param {string} measure The CSS measure\n\t   * @returns {number} The value as an integer.\n\t   */\n\t  parseCSSMeasure: function(measure) {\n\t    const index = measure.indexOf('px');\n\t    if (index > 0) {\n\t      return parseInt(measure.substring(0, measure.length - 2));\n\t    }\n\n\t    return parseInt(measure) || 0;\n\t  },\n\n\t  /**\n\t   * Parses JSON.\n\t   *\n\t   * @param {string} json The JSON.\n\t   * @returns {Object} The JSON data as an object.\n\t   */\n\t  parseJSON: function(json) {\n\t    return JSON.parse(json);\n\t  },\n\n\t  /**\n\t   * Removes the objects in the toRemove array from the fromArray.\n\t   *\n\t   * @param {Array} fromArray The array to remove from.\n\t   * @param {Array} toRemove The values to remove.\n\t   */\n\t  removeAllFromArray: function(fromArray, toRemove) {\n\t    for (let i = 0; i < toRemove.length; i++) {\n\t      Utils.removeFromArray(fromArray, toRemove[i]);\n\t    }\n\t  },\n\n\t  /**\n\t   * Removes the given object from the given array.\n\t   *\n\t   * @param {Array} array The array to remove from.\n\t   * @param {*} obj The object to remove.\n\t   */\n\t  removeFromArray: function(array, obj) {\n\t    const index = array.indexOf(obj);\n\t    if (index !== -1) {\n\t      const shift = array.splice(index + 1, array.length);\n\t      array.length = index;\n\t      array.push.apply(array, shift);\n\t    }\n\t  },\n\n\t  /**\n\t   * Helper function to provide a one liner to behave as if you returned 'false' from a legacy version of Prime.js.\n\t   *\n\t   * Calling this method is equivalent to calling event.preventDefault and event.stopPropagation.\n\t   * @param event\n\t   */\n\t  stopEvent: function(event) {\n\t    // Compatibility with older versions of IE\n\t    event.cancelBubble = true;\n\t    if (event.stopPropagation) {\n\t      event.stopPropagation();\n\t    }\n\t    if (event.preventDefault) {\n\t      event.preventDefault();\n\t    }\n\t  },\n\n\t  type: function(object) {\n\t    return Object.prototype.toString.call(object).match(Utils.typeRegex)[1];\n\t  }\n\t};\n\n\t/*\n\t * Copyright (c) 2017-2018, Inversoft Inc., All Rights Reserved\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n\t * either express or implied. See the License for the specific\n\t * language governing permissions and limitations under the License.\n\t */\n\n\t/**\n\t * The singleton instance.\n\t *\n\t * @type {Overlay}\n\t */\n\tlet instance;\n\n\tclass Overlay {\n\t  /**\n\t   * Constructs a new Overlay instance once per DOM.\n\t   *\n\t   * @constructor\n\t   */\n\t  constructor() {\n\t    Utils.bindAll(this);\n\n\t    // Check if the overlay doesn't exist and add it\n\t    this.overlay = PrimeDocument.queryById('prime-overlay');\n\t    if (this.overlay === null) {\n\t      this.overlay = PrimeDocument.newElement('<div/>').setId('prime-overlay').appendTo(document.body).hide();\n\t    }\n\t    this.bodyOverflow = null;\n\t  }\n\n\t  /**\n\t   * Return the instance of the Overlay widget\n\t   * @returns {Overlay}\n\t   */\n\t  static get instance() {\n\t    return instance;\n\t  }\n\n\t  /**\n\t   * Set the instance value of the Overlay instance\n\t   * @param  value {Overlay}\n\t   */\n\t  static set instance(value) {\n\t    instance = value;\n\t  }\n\n\t  /**\n\t   * Closes the overlay and the target element.\n\t   */\n\t  close() {\n\t    // using null ensures that if this style is not defined, we'll remove it when we're done\n\t    let overflowStyle = this.bodyOverflow || '';\n\t    PrimeDocument.bodyElement.setStyle('overflow', overflowStyle);\n\t    this.overlay.setStyle('zIndex', '10');\n\t    this.overlay.hide();\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Opens the overlay and positions the element over it.\n\t   * @param zIndex {Number|string}\n\t   */\n\t  open(zIndex) {\n\t    if (this.bodyOverflow === null) {\n\t      this.bodyOverflow = PrimeDocument.bodyElement.getStyle('overflow');\n\t    }\n\t    PrimeDocument.bodyElement.setStyle('overflow', 'hidden');\n\t    this.overlay.show();\n\n\t    // Set the z-index of this dialog and the overlay\n\t    this.overlay.setStyle('zIndex', zIndex.toString());\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Changes the id of the Overlay element.\n\t   *\n\t   * @param id {string} The new id.\n\t   * @returns {Overlay}\n\t   */\n\t  setId(id) {\n\t    this.overlay.setId(id);\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Updates the zindex of the overlay.\n\t   *\n\t   * @param zIndex {string|number} The new zIndex.\n\t   */\n\t  setZIndex(zIndex) {\n\t    this.overlay.setStyle('zIndex', zIndex.toString());\n\t    return this;\n\t  }\n\t}\n\n\tPrimeDocument.onReady(function() {\n\t  Overlay.instance = new Overlay();\n\t});\n\n\t/*\n\t * Copyright (c) 2014-2022, Inversoft Inc., All Rights Reserved\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n\t * either express or implied. See the License for the specific\n\t * language governing permissions and limitations under the License.\n\t */\n\n\tclass PrimeRequest {\n\t  /**\n\t   * Makes a new AJAX request.\n\t   *\n\t   * @constructor\n\t   * @param {string} [url] The URL to call. This can be left out for sub-classing but should otherwise be provided.\n\t   * @param {string} [method=GET] The HTTP method to use. You can specify GET, POST, PUT, DELETE, HEAD, SEARCH, etc.\n\t   */\n\t  constructor(url, method) {\n\t    Utils.bindAll(this);\n\t    this.xhr = new XMLHttpRequest();\n\t    this.async = true;\n\t    this.body = null;\n\t    this.queryParams = null;\n\t    this.contentType = null;\n\t    this.inProgress = null;\n\t    this.errorHandler = this.onError;\n\t    this.headers = {};\n\t    this.loadingHandler = this.onLoading;\n\t    this.method = method || 'GET';\n\t    this.openHandler = this.onOpen;\n\t    this.password = null;\n\t    this.sendHandler = this.onSend;\n\t    this.successHandler = this.onSuccess;\n\t    this.unsetHandler = this.onUnset;\n\t    this.url = url;\n\t    this.username = null;\n\t  }\n\n\t  /**\n\t   * Changes the URL to call.\n\t   *\n\t   * @param {string} url The new URL to call.\n\t   * @returns {PrimeRequest} This PrimeRequest.\n\t   */\n\t  forURL(url) {\n\t    this.url = url;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Invokes the AJAX request. If the URL is not set, this throws an exception.\n\t   *\n\t   * @returns {PrimeRequest} This PrimeRequest.\n\t   */\n\t  go() {\n\t    if (!this.url) {\n\t      throw new TypeError('No URL set for AJAX request');\n\t    }\n\n\t    let requestUrl = this.url;\n\t    if ((this.method === 'GET' || this.method === 'DELETE') && this.queryParams !== null) {\n\t      if (requestUrl.indexOf('?') === -1) {\n\t        requestUrl += '?' + this.queryParams;\n\t      } else {\n\t        requestUrl += '&' + this.queryParams;\n\t      }\n\t    }\n\n\t    if (this.async) {\n\t      if (this.inProgress !== null) {\n\t        this.inProgress.open();\n\t      }\n\n\t      this.xhr.onreadystatechange = this._handler.bind(this);\n\t    }\n\n\t    this.xhr.open(this.method, requestUrl, this.async, this.username, this.password);\n\n\t    if (Object.keys(this.headers).length > 0) {\n\t      for (let key in this.headers) {\n\t        if (this.headers.hasOwnProperty(key)) {\n\t          this.xhr.setRequestHeader(key, this.headers[key]);\n\t        }\n\t      }\n\t    }\n\n\t    if (this.contentType) {\n\t      this.xhr.setRequestHeader('Content-Type', this.contentType);\n\t    }\n\n\t    this.xhr.send(this.body);\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Default handler for the \"completed\" state and an HTTP response status of anything but 2xx. Sub-classes can override\n\t   * this handler or you can pass in a handler function to the {@link #withUnsetHandler}.\n\t   *\n\t   * @param {XMLHttpRequest} xhr The XMLHttpRequest object.\n\t   */\n\t  onError(xhr) {\n\t  }\n\n\t  /**\n\t   * Default handler for the \"loading\" state. Sub-classes can override this handler or you can pass in a handler function\n\t   * to the {@link #withLoadingHandler}.\n\t   *\n\t   * @param {XMLHttpRequest} xhr The XMLHttpRequest object.\n\t   */\n\t  onLoading(xhr) {\n\t  }\n\n\t  /**\n\t   * Default handler for the \"open\" state. Sub-classes can override this handler or you can pass in a handler function\n\t   * to the {@link #withOpenHandler}.\n\t   *\n\t   * @param {XMLHttpRequest} xhr The XMLHttpRequest object.\n\t   */\n\t  onOpen(xhr) {\n\t  }\n\n\t  /**\n\t   * Default handler for the \"send\" state. Sub-classes can override this handler or you can pass in a handler function\n\t   * to the {@link #withSendHandler}.\n\t   *\n\t   * @param {XMLHttpRequest} xhr The XMLHttpRequest object.\n\t   */\n\t  onSend(xhr) {\n\t  }\n\n\t  /**\n\t   * Default handler for the \"complete\" state and an HTTP response status of 2xx. Sub-classes can override this handler\n\t   * or you can pass in a handler function to the {@link #withUnsetHandler}.\n\t   *\n\t   * @param {XMLHttpRequest} xhr The XMLHttpRequest object.\n\t   */\n\t  onSuccess(xhr) {\n\t  }\n\n\t  /**\n\t   * Default handler for the \"unset\" state. Sub-classes can override this handler or you can pass in a handler function\n\t   * to the {@link #withUnsetHandler}.\n\t   *\n\t   * @param {XMLHttpRequest} xhr The XMLHttpRequest object.\n\t   */\n\t  onUnset(xhr) {\n\t  }\n\n\t  /**\n\t   * Sets the async flag to false.\n\t   *\n\t   * @returns {PrimeRequest} This PrimeRequest.\n\t   */\n\t  synchronously() {\n\t    this.async = false;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the method used to make the AJAX request.\n\t   *\n\t   * @param {string} method The HTTP method.\n\t   * @returns {PrimeRequest} This PrimeRequest.\n\t   */\n\t  usingMethod(method) {\n\t    this.method = method;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the request body for the request.\n\t   *\n\t   * @param {string} body The request body.\n\t   * @returns {PrimeRequest} This PrimeRequest.\n\t   */\n\t  withBody(body) {\n\t    this.body = body;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the content type for the request.\n\t   *\n\t   * @param {string} contentType The contentType.\n\t   * @returns {PrimeRequest} This PrimeRequest.\n\t   */\n\t  withContentType(contentType) {\n\t    this.contentType = contentType;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the data object for the request. Will store the values for query parameters or post data depending on the\n\t   * method that is set.  If the method is a post or put, will also set content-type to x-www-form-urlencoded.\n\t   *\n\t   * @param {Object} data The data object.\n\t   * @returns {PrimeRequest} This PrimeRequest.\n\t   */\n\t  withData(data) {\n\t    for (let prop in data) {\n\t      if (data.hasOwnProperty(prop)) {\n\t        if (this.method === 'PUT' || this.method === 'POST') {\n\t          this.body = this._addDataValue(this.body, prop, data[prop]);\n\t        } else {\n\t          this.queryParams = this._addDataValue(this.queryParams, prop, data[prop]);\n\t        }\n\t      }\n\t    }\n\n\t    if (this.method === \"PUT\" || this.method === \"POST\") {\n\t      this.contentType = 'application/x-www-form-urlencoded';\n\t    }\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the data for the request using the form fields in the given form element. Will store the values for query\n\t   * parameters or post data depending on the method that is set.  If the method is a post or put, will also set\n\t   * content-type to x-www-form-urlencoded.\n\t   *\n\t   * @param {PrimeElement|HTMLFormElement} form The form object.\n\t   * @returns {PrimeRequest} This PrimeRequest.\n\t   */\n\t  withDataFromForm(form) {\n\t    let domElement = form;\n\t    if (form instanceof PrimeElement) {\n\t      domElement = form.domElement;\n\t    }\n\n\t    for (let i = 0; i < domElement.elements.length; i++) {\n\t      const primeElement = new PrimeElement(domElement.elements[i]);\n\t      if (primeElement.isDisabled() || !primeElement.isInput()) {\n\t        continue;\n\t      }\n\n\t      const name = primeElement.getAttribute('name');\n\t      if (name === null || name.length === 0) {\n\t        continue;\n\t      }\n\n\t      let type = primeElement.getAttribute('type');\n\t      if (type !== null) {\n\t        type = type.toLowerCase();\n\t      }\n\n\t      let values;\n\t      if (primeElement.getTagName() === 'SELECT') {\n\t        values = primeElement.getSelectedValues();\n\t      } else if ((type === 'radio' || type === 'checkbox') && !primeElement.isChecked()) {\n\t        continue;\n\t      } else {\n\t        values = primeElement.getValue();\n\t      }\n\n\t      if (this.method === 'PUT' || this.method === 'POST') {\n\t        this.body = this._addDataValue(this.body, name, values);\n\t      } else {\n\t        this.queryParams = this._addDataValue(this.queryParams, name, values);\n\t      }\n\t    }\n\n\t    if (this.method === \"PUT\" || this.method === \"POST\") {\n\t      this.contentType = 'application/x-www-form-urlencoded';\n\t    }\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the handler to invoke when the state of the AJAX request is \"complete\" and the HTTP status in the response is\n\t   * not 2xx.\n\t   *\n\t   * @param {Function} func The handler function.\n\t   * @returns {PrimeRequest} This PrimeRequest.\n\t   */\n\t  withErrorHandler(func) {\n\t    this.errorHandler = func;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets an InProgress object that will be called by this AJAX request.\n\t   *\n\t   * @param {InProgress} inProgress The InProgress object.\n\t   * @return {PrimeRequest} This.\n\t   */\n\t  withInProgress(inProgress) {\n\t    this.inProgress = inProgress;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the body of the AJAX request to the string value of the provided JSON object. The content-type of the request\n\t   * will also be set to 'application/json'. The provided JSON object may be passed as a string or an object.\n\t   *\n\t   * @param {Object} json The JSON object.\n\t   * @returns {PrimeRequest} This PrimeRequest.\n\t   */\n\t  withJSON(json) {\n\t    this.body = typeof(json) === String ? json : JSON.stringify(json);\n\t    this.contentType = 'application/json';\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the handler to invoke when the state of the AJAX request is \"loading\".\n\t   *\n\t   * @param {Function} func The handler function.\n\t   * @returns {PrimeRequest} This PrimeRequest.\n\t   */\n\t  withLoadingHandler(func) {\n\t    this.loadingHandler = func;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Set the request headers using the key and value.\n\t   *\n\t   * @param {String} key The key name.\n\t   * @param {String} value The value.\n\t   * @returns {PrimeRequest} This PrimeRequest.\n\t   */\n\t  withHeader(key, value) {\n\t    this.headers[key] = value;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Set the key value pairs provided as request headers.\n\t   *\n\t   * @param {Object} headers A map of key value pairs.\n\t   * @returns {PrimeRequest} This PrimeRequest.\n\t   */\n\t  withHeaders(headers) {\n\t    for (let key in headers) {\n\t      if (headers.hasOwnProperty(key)) {\n\t        this.headers[key] = headers[key];\n\t      }\n\t    }\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the XMLHTTPRequest's response type field, which will control how the response is parsed.\n\t   *\n\t   * @param {string} responseType The response type.\n\t   * @returns {PrimeRequest} This PrimeRequest.\n\t   */\n\t  withResponseType(responseType) {\n\t    this.xhr.responseType = responseType;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the handler to invoke when the state of the AJAX request is \"open\".\n\t   *\n\t   * @param {Function} func The handler function.\n\t   * @returns {PrimeRequest} This PrimeRequest.\n\t   */\n\t  withOpenHandler(func) {\n\t    this.openHandler = func;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the handler to invoke when the state of the AJAX request is \"send\".\n\t   *\n\t   * @param {Function} func The handler function.\n\t   * @returns {PrimeRequest} This PrimeRequest.\n\t   */\n\t  withSendHandler(func) {\n\t    this.sendHandler = func;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the handler to invoke when the state of the AJAX request is \"complete\" and the HTTP status in the response is\n\t   * 2xx.\n\t   *\n\t   * @param {Function} func The handler function.\n\t   * @returns {PrimeRequest} This PrimeRequest.\n\t   */\n\t  withSuccessHandler(func) {\n\t    this.successHandler = func;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the handler to invoke when the state of the AJAX request is \"unset\".\n\t   *\n\t   * @param {Function} func The handler function.\n\t   * @returns {PrimeRequest} This PrimeRequest.\n\t   */\n\t  withUnsetHandler(func) {\n\t    this.unsetHandler = func;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Resets the Request back to a base state (basically just the URL + method).  This can be\n\t   * useful if a component is going to make many requests to the same endpoint with different parameters.\n\t   *\n\t   * @returns {PrimeRequest} This PrimeRequest.\n\t   */\n\t  reset() {\n\t    this.queryParams = null;\n\t    this.data = null;\n\t    this.body = null;\n\t    this.contentType = null;\n\t    return this;\n\t  }\n\n\t  /* ===================================================================================================================\n\t   * Private Methods\n\t   * ===================================================================================================================*/\n\n\t  // noinspection JSMethodCanBeStatic\n\t  /**\n\t   * Adds the given name-value pair to the given data String. If the value is an array, it adds multiple values for each\n\t   * piece. Otherwise, it assumes value is a String or can be converted to a String.\n\t   *\n\t   * @param {string} dataString The data String used to determine if an ampersand is necessary.\n\t   * @param {string} name The name of the name-value pair.\n\t   * @param {string|Array} value The value of the name-value pair.\n\t   * @returns {string} The new data string.\n\t   * @private\n\t   */\n\t  _addDataValue(dataString, name, value) {\n\t    let result = '';\n\t    if (value instanceof Array) {\n\t      for (let i = 0; i < value.length; i++) {\n\t        result += encodeURIComponent(name) + '=' + encodeURIComponent(value[i]);\n\t        if (i + 1 < value.length) {\n\t          result += '&';\n\t        }\n\t      }\n\t    } else {\n\t      result = encodeURIComponent(name) + '=' + encodeURIComponent(value);\n\t    }\n\n\t    if (dataString !== null && result !== '') {\n\t      result = dataString + '&' + result;\n\t    } else if (dataString !== null && result === '') {\n\t      result = dataString;\n\t    }\n\n\t    return result;\n\t  }\n\n\t  /**\n\t   * @private\n\t   */\n\t  _handler() {\n\t    if (this.xhr.readyState === 0) {\n\t      this.unsetHandler(this.xhr);\n\t    } else if (this.xhr.readyState === 1) {\n\t      this.openHandler(this.xhr);\n\t    } else if (this.xhr.readyState === 2) {\n\t      this.sendHandler(this.xhr);\n\t    } else if (this.xhr.readyState === 3) {\n\t      this.loadingHandler(this.xhr);\n\t    } else if (this.xhr.readyState === 4) {\n\n\t      // Call the InProgress before hand because the success handler might call another AJAX method that might open another InProgress\n\t      if (this.inProgress !== null) {\n\t        this.inProgress.close(function() {\n\t          if (this.xhr.status >= 200 && this.xhr.status <= 299) {\n\t            this.successHandler(this.xhr);\n\t          } else {\n\t            this.errorHandler(this.xhr);\n\t          }\n\t        }.bind(this));\n\t      } else {\n\t        if (this.xhr.status >= 200 && this.xhr.status <= 299) {\n\t          this.successHandler(this.xhr);\n\t        } else {\n\t          this.errorHandler(this.xhr);\n\t        }\n\t      }\n\t    }\n\t  }\n\t}\n\n\t/*\n\t * Copyright (c) 2012-2017, Inversoft Inc., All Rights Reserved\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n\t * either express or implied. See the License for the specific\n\t * language governing permissions and limitations under the License.\n\t */\n\n\tclass PrimeWindow {\n\t  /**\n\t   * Attaches an event listener to the window, returning the handler proxy.\n\t   *\n\t   * @param {string} event The name of the event.\n\t   * @param {Function} listener The event handler.\n\t   * @returns {Window} The window object.\n\t   */\n\t  static addEventListener(event, listener) {\n\t    if (event.indexOf(':') === -1) {\n\t      window.eventListeners = window.eventListeners || {};\n\t      window.eventListeners[event] = window.eventListeners[event] || [];\n\t      window.eventListeners[event].push(listener);\n\t      if (window.addEventListener) {\n\t        window.addEventListener(event, listener, false);\n\t      } else if (window.attachEvent) {\n\t        window.attachEvent('on' + event, listener);\n\t      } else {\n\t        throw new TypeError('Unable to set event onto the window. Neither addEventListener nor attachEvent methods are available');\n\t      }\n\t    } else {\n\t      // Custom event\n\t      window.customEventListeners = window.customEventListeners || {};\n\t      window.customEventListeners[event] = window.customEventListeners[event] || [];\n\t      window.customEventListeners[event].push(listener);\n\t    }\n\n\t    return window;\n\t  }\n\n\t  /**\n\t   * Returns the inner height of the window. This includes only the rendering area and not the window chrome (toolbars,\n\t   * status bars, etc). If this method can't figure out the inner height, it throws an exception.\n\t   *\n\t   * @returns {number} The inner height of the window.\n\t   */\n\t  static getInnerHeight() {\n\t    if (typeof(window.innerHeight) === 'number') {\n\t      // Most browsers\n\t      return window.innerHeight;\n\t    } else if (document.documentElement && document.documentElement.clientHeight) {\n\t      // IE 6+ in 'standards compliant mode'\n\t      return document.documentElement.clientHeight;\n\t    } else if (document.body && document.body.clientHeight) {\n\t      // IE 4 compatible\n\t      return document.body.clientHeight;\n\t    }\n\n\t    throw new Error('Unable to determine inner height of the window');\n\t  }\n\n\t  /**\n\t   * Returns the inner width of the window. This includes only the rendering area and not the window chrome (toolbars,\n\t   * status bars, etc). If this method can't figure out the inner width, it throws an exception.\n\t   *\n\t   * @returns {number} The inner width of the window.\n\t   */\n\t  static getInnerWidth() {\n\t    if (typeof(window.innerWidth) === 'number') {\n\t      // Most browsers\n\t      return window.innerWidth;\n\t    } else if (document.documentElement && document.documentElement.clientWidth) {\n\t      // IE 6+ in 'standards compliant mode'\n\t      return document.documentElement.clientWidth;\n\t    } else if (document.body && document.body.clientWidth) {\n\t      // IE 4 compatible\n\t      return document.body.clientWidth;\n\t    }\n\n\t    throw new Error('Unable to determine inner width of the window');\n\t  }\n\n\t  /**\n\t   * Returns the number of pixels the Window is scrolled by.\n\t   *\n\t   * @returns {number} The number of pixels.\n\t   */\n\t  static getScrollTop() {\n\t    if (typeof(window.pageYOffset) === 'number') {\n\t      return window.pageYOffset;\n\t    } else if (document.body && document.body.scrollTop) {\n\t      return document.body.scrollTop;\n\t    } else if (document.documentElement && document.documentElement.scrollTop) {\n\t      return document.documentElement.scrollTop;\n\t    }\n\n\t    throw new Error('Unable to determine scrollTop of the window');\n\t  }\n\t}\n\n\t/*\n\t * Copyright (c) 2015-2017, Inversoft Inc., All Rights Reserved\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n\t * either express or implied. See the License for the specific\n\t * language governing permissions and limitations under the License.\n\t */\n\n\tclass Draggable {\n\t  /**\n\t   * Constructs a new Draggable object for the given element.\n\t   *\n\t   * @param {PrimeElement|Element|EventTarget} element The Prime Element for the Draggable widget.\n\t   * @param {string} [gripSelector=] gripSelector The optional selector to identify the 'grippy' part.\n\t   * @constructor\n\t   */\n\t  constructor(element, gripSelector) {\n\t    Utils.bindAll(this);\n\n\t    this.element = PrimeElement.wrap(element);\n\t    this.offset = {};\n\n\t    if (!Utils.isDefined(gripSelector)) {\n\t      this.grip = this.element;\n\t    } else {\n\t      this.grip = this.element.queryFirst(gripSelector);\n\t      if (this.grip === null) {\n\t        throw Error('Unable to find an element using the provided selector [' + gripSelector + ']');\n\t      }\n\t    }\n\t  }\n\n\t  /**\n\t   * Destroys the Draggable Widget\n\t   */\n\t  destroy() {\n\t    this.element.removeClass('active');\n\t    this.element.setStyles(this.originalStyle);\n\n\t    this.grip.removeEventListener('mousedown', this._handleMouseDown);\n\t    PrimeDocument.removeEventListener('mousemove', this._handleMouseMove);\n\t    PrimeDocument.removeEventListener('mouseup', this._handleMouseUp);\n\t  }\n\n\t  /**\n\t   * Initializes the Draggable by attaching the event listeners.\n\t   *\n\t   * @returns {Draggable} This.\n\t   */\n\t  initialize() {\n\t    this.originalStyle = {\n\t      cursor: this.element.getStyle('cursor'),\n\t      zIndex: this.element.getStyle('zIndex')\n\t    };\n\n\t    this.grip.addEventListener('mousedown', this._handleMouseDown).setStyle('cursor', 'move');\n\t    return this;\n\t  }\n\n\t  /* ===================================================================================================================\n\t   * Private methods\n\t   * ===================================================================================================================*/\n\n\t  /**\n\t   * Handle Mouse Down Event\n\t   * @param {Event} event The mouse event.\n\t   * @private\n\t   */\n\t  _handleMouseDown(event) {\n\t    event.preventDefault();\n\t    this.element.addClass('active');\n\n\t    this.offset = {\n\t      zIndex: this.element.getStyle('zIndex'),\n\t      height: this.element.getOuterHeight(),\n\t      width: this.element.getOuterWidth(),\n\t      x: event.screenX,\n\t      y: event.screenY\n\t    };\n\n\t    this.element.setStyle('zIndex', this.offset.zIndex + 10);\n\n\t    // Remove old listeners\n\t    PrimeDocument.removeEventListener('mousemove', this._handleMouseMove);\n\t    PrimeDocument.removeEventListener('mouseup', this._handleMouseUp);\n\n\t    // Attach all the events\n\t    PrimeDocument.addEventListener('mousemove', this._handleMouseMove);\n\t    PrimeDocument.addEventListener('mouseup', this._handleMouseUp);\n\t  }\n\n\t  /**\n\t   * Handle the Mouse Move event for the body element.\n\t   *\n\t   * @param {Event} event The mouse event.\n\t   * @private\n\t   */\n\t  _handleMouseMove(event) {\n\t    const xDiff = event.screenX - this.offset.x;\n\t    const yDiff = event.screenY - this.offset.y;\n\t    this.offset.x = event.screenX;\n\t    this.offset.y = event.screenY;\n\t    this.element.setLeft(this.element.getLeft() + xDiff);\n\t    this.element.setTop(this.element.getTop() + yDiff);\n\t  }\n\n\t  /**\n\t   * Handle the Mouse Up event for this draggable widget.\n\t   * @private\n\t   */\n\t  _handleMouseUp() {\n\t    PrimeDocument.removeEventListener('mousemove', this._handleMouseMove);\n\t    PrimeDocument.removeEventListener('mouseup', this._handleMouseUp);\n\t    this.element.setStyle('zIndex', this.offset.zIndex);\n\t    this.element.removeClass('active');\n\t  }\n\t}\n\n\t/*\n\t * Copyright (c) 2017-2018, Inversoft Inc., All Rights Reserved\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n\t * either express or implied. See the License for the specific\n\t * language governing permissions and limitations under the License.\n\t */\n\n\tclass AJAXDialog {\n\t  /**\n\t   * Constructs a new dialog box, which is dynamically built and then populated with the HTML returned from an AJAX call.\n\t   *\n\t   * @constructor\n\t   */\n\t  constructor() {\n\t    Utils.bindAll(this);\n\n\t    this.draggable = null;\n\t    this.element = null;\n\t    this.initialized = false;\n\t    this._setInitialOptions();\n\t  }\n\n\t  /**\n\t   * Closes the dialog, destroys the HTML and updates or hides the overlay.\n\t   * @returns {AJAXDialog} This.\n\t   */\n\t  close() {\n\t    this.element.removeClass('open');\n\t    if (this.draggable !== null) {\n\t      this.draggable.destroy();\n\t      this.draggable = null;\n\t    }\n\n\t    setTimeout(function() {\n\t      this.element.removeFromDOM();\n\t      this.element = null;\n\n\t      const highestZIndex = this._determineZIndex();\n\t      if (highestZIndex !== 0) {\n\t        Overlay.instance.setZIndex(highestZIndex);\n\t      } else {\n\t        Overlay.instance.close();\n\t      }\n\t    }.bind(this), this.options.closeTimeout);\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Destroys the dialog by calling the close function.\n\t   * @returns {AJAXDialog} This.\n\t   */\n\t  destroy() {\n\t    this.close();\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Initializes the dialog.\n\t   * @returns {AJAXDialog} This.\n\t   */\n\t  initialize() {\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Opens the dialog by making the AJAX GET request to the given URI and the opening then dialog.\n\t   *\n\t   * @param uri {string} The URI to make the AJAX GET request to.\n\t   * @returns {AJAXDialog} This.\n\t   */\n\t  open(uri) {\n\t    const request = this.options.ajaxRequest || new PrimeRequest(uri, 'GET');\n\t    request.withSuccessHandler(this._handleAJAXDialogResponse)\n\t        .withErrorHandler(this._handleAJAXDialogResponse)\n\t        .go();\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Opens the dialog by making the AJAX POST request to the given URI with the given form and extra data (optional)\n\t   * and then opening the dialog.\n\t   *\n\t   * @param uri {string} The URI to make the AJAX POST request to.\n\t   * @param form {HTMLFormElement|PrimeElement} The Form element to retrieve the data from.\n\t   * @param extraData [extraData=] {object} (Optional) Extra data to send with the POST.\n\t   * @returns {AJAXDialog} This.\n\t   */\n\t  openPost(uri, form, extraData) {\n\t    new PrimeRequest(uri, 'POST')\n\t        .withDataFromForm(form)\n\t        .withData(extraData)\n\t        .withSuccessHandler(this._handleAJAXDialogResponse)\n\t        .go();\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Updates the HTML contents of the dialog.\n\t   *\n\t   * @param html {String} The HTML.\n\t   * @returns {AJAXDialog} This.\n\t   */\n\t  setHTML(html) {\n\t    this.element.setHTML(html);\n\t    this._initializeDialog();\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets any additional classes that should be on the dialog.\n\t   *\n\t   * @param classes {string} The list of additional classes.\n\t   * @returns {AJAXDialog} This.\n\t   */\n\t  withAdditionalClasses(classes) {\n\t    this.options.additionalClasses = classes;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Override the default Ajax Request used to open the dialog. This does not override the\n\t   * success and error handlers.\n\t   *\n\t   * @param request {PrimeRequest} The Ajax Request to use to open the dialog.\n\t   * @returns {AJAXDialog} This.\n\t   */\n\t  withAjaxRequest(request) {\n\t    this.options.ajaxRequest = request;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the callback that is called after the dialog has been fetched and rendered.\n\t   *\n\t   * @param callback {function} The callback function.\n\t   * @returns {AJAXDialog} This.\n\t   */\n\t  withCallback(callback) {\n\t    this.options.callback = callback;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the class name for the dialog element.\n\t   *\n\t   * @param className {string} The class name.\n\t   * @returns {AJAXDialog} This.\n\t   */\n\t  withClassName(className) {\n\t    if (className.indexOf(' ') !== -1) {\n\t      throw 'Invalid class name [' + className + ']. You can use the additionalClasses options to add more classes.';\n\t    }\n\n\t    this.options.className = className;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the close button element selector that is used to setup the close button in the HTML that was returned from\n\t   * the server.\n\t   *\n\t   * @param selector {string} The element selector.\n\t   * @returns {AJAXDialog} This.\n\t   */\n\t  withCloseButtonElementSelector(selector) {\n\t    this.options.closeButtonElementSelector = selector;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the timeout used in the close method to allow for transitions.\n\t   *\n\t   * @param timeout {int} The timeout.\n\t   * @returns {AJAXDialog} This.\n\t   */\n\t  withCloseTimeout(timeout) {\n\t    this.options.closeTimeout = timeout;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the draggable element selector that is used for the DraggableWidget.\n\t   *\n\t   * @param selector {string} The element selector.\n\t   * @returns {AJAXDialog} This.\n\t   */\n\t  withDraggableButtonElementSelector(selector) {\n\t    this.options.draggableElementSelector = selector;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets an error callback for AJAX form handling. This is called after a failed form submission.\n\t   *\n\t   * @param callback {Function} The callback function. The callback function will called with two parameters,\n\t   *        the first is a reference this object, the second is the XMLHttpRequest object.\n\t   * @returns {AJAXDialog} This.\n\t   */\n\t  withFormErrorCallback(callback) {\n\t    this.options.formErrorCallback = callback;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets whether or not forms inside the dialog are handled via AJAX or not.\n\t   *\n\t   * @param enabled {boolean} The choice.\n\t   * @returns {AJAXDialog} This.\n\t   */\n\t  withFormHandling(enabled) {\n\t    this.options.formHandling = enabled;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets a pre-submit callback for AJAX form handling. This is called before the form is submitted.\n\t   *\n\t   * @param callback {Function} The callback function.\n\t   * @returns {AJAXDialog} This.\n\t   */\n\t  withFormPreSubmitCallback(callback) {\n\t    this.options.formPreSubmitCallback = callback;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets a success callback for AJAX form handling. This is called after a successful form submission.\n\t   *\n\t   * @param callback {Function} The callback function. The callback function will called with two parameters,\n\t   *        the first is a reference this object, the second is the XMLHttpRequest object.\n\t   * @returns {AJAXDialog} This.\n\t   */\n\t  withFormSuccessCallback(callback) {\n\t    this.options.formSuccessCallback = callback;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Set more than one option at a time by providing a map of key value pairs. This is considered an advanced\n\t   * method to set options on the widget. The caller needs to know what properties are valid in the options object.\n\t   *\n\t   * @param {Object} options Key value pair of configuration options.\n\t   * @returns {AJAXDialog} This.\n\t   */\n\t  withOptions(options) {\n\t    if (!Utils.isDefined(options)) {\n\t      return this;\n\t    }\n\n\t    for (let option in options) {\n\t      if (options.hasOwnProperty(option)) {\n\t        this.options[option] = options[option];\n\t      }\n\t    }\n\t    return this;\n\t  }\n\n\t  /* ===================================================================================================================\n\t   * Private methods\n\t   * ===================================================================================================================*/\n\n\t  _determineZIndex() {\n\t    let highestZIndex = 0;\n\t    PrimeDocument.query('.' + this.options.className).each(function(dialog) {\n\t      const zIndex = parseInt(dialog.getComputedStyle()['zIndex']);\n\t      if (dialog.isVisible() && zIndex > highestZIndex) {\n\t        highestZIndex = zIndex;\n\t      }\n\t    });\n\t    return highestZIndex;\n\t  }\n\n\t  _handleCloseClickEvent(event) {\n\t    Utils.stopEvent(event);\n\t    this.close();\n\t  }\n\n\t  _handleAJAXDialogResponse(xhr) {\n\t    this.element = PrimeDocument.newElement('<div/>', {class: this.options.className + ' ' + this.options.additionalClasses}).appendTo(document.body);\n\t    this.setHTML(xhr.responseText);\n\t  }\n\n\t  _handleAJAXFormError(xhr) {\n\t    this.setHTML(xhr.responseText);\n\t    this.form = this.element.queryFirst('form').addEventListener('submit', this._handleAJAXFormSubmit);\n\n\t    if (this.options.formErrorCallback !== null) {\n\t      this.options.formErrorCallback(this, xhr);\n\t    }\n\n\t    if (this.draggable !== null) {\n\t      this.draggable.destroy();\n\t    }\n\n\t    if (this.options.draggableElementSelector !== null && this.element.queryFirst(this.options.draggableElementSelector) !== null) {\n\t      this.draggable = new Draggable(this.element, this.options.draggableElementSelector).initialize();\n\t    }\n\t  }\n\n\t  _handleAJAXFormSuccess(xhr) {\n\t    if (this.options.formSuccessCallback !== null) {\n\t      this.options.formSuccessCallback(this, xhr);\n\t    } else {\n\t      const successURI = this.form.getDataSet()['ajaxSuccessUri'];\n\t      if (successURI !== undefined) {\n\t        window.location = successURI;\n\t      } else {\n\t        window.location.reload();\n\t      }\n\t    }\n\t  }\n\n\t  _handleAJAXFormSubmit(event) {\n\t    Utils.stopEvent(event);\n\n\t    if (this.options.formPreSubmitCallback !== null) {\n\t      this.options.formPreSubmitCallback(this);\n\t    }\n\n\t    new PrimeRequest(this.form.getAttribute('action'), this.form.getAttribute('method'))\n\t        .withDataFromForm(this.form)\n\t        .withSuccessHandler(this._handleAJAXFormSuccess)\n\t        .withErrorHandler(this._handleAJAXFormError)\n\t        .go();\n\t  }\n\n\t  _initializeDialog() {\n\t    this.element.query(this.options.closeButtonElementSelector).each(function(e) {\n\t      e.addEventListener('click', this._handleCloseClickEvent);\n\t    }.bind(this));\n\n\t    // Only set the z-index upon first open\n\t    if (!this.initialized) {\n\t      const highestZIndex = this._determineZIndex();\n\t      Overlay.instance.open(highestZIndex + this.options.zIndexOffset);\n\t      this.element.setStyle('zIndex', (highestZIndex + this.options.zIndexOffset + 10).toString());\n\t      this.element.addClass('open');\n\t    }\n\n\t    // Call the callback before positioning to ensure all changes to the dialog have been made\n\t    if (this.options.callback !== null) {\n\t      this.options.callback(this);\n\t    }\n\n\t    // Setup forms if enabled\n\t    if (this.options.formHandling) {\n\t      this.form = this.element.queryFirst('form').addEventListener('submit', this._handleAJAXFormSubmit);\n\t    }\n\n\t    // Only set the position of the dialog when we first open it, if someone calls setHTML on the dialog we are not resizing it.\n\t    if (!this.initialized) {\n\t      // Position the fixed dialog in the center of the screen\n\t      const windowHeight = PrimeWindow.getInnerHeight();\n\t      const dialogHeight = this.element.getHeight();\n\t      this.element.setTop(((windowHeight - dialogHeight) / 2) - 20);\n\t    }\n\n\t    if (this.options.draggableElementSelector !== null && this.element.queryFirst(this.options.draggableElementSelector) !== null) {\n\t      this.draggable = new Draggable(this.element, this.options.draggableElementSelector).initialize();\n\t    }\n\n\t    this.initialized = true;\n\t  }\n\n\t  /**\n\t   * Set the initial options for this widget.\n\t   * @private\n\t   */\n\t  _setInitialOptions() {\n\t    // Defaults\n\t    this.options = {\n\t      additionalClasses: '',\n\t      ajaxRequest: null,\n\t      callback: null,\n\t      className: 'prime-dialog',\n\t      closeButtonElementSelector: '[data-dialog-role=\"close-button\"]',\n\t      closeTimeout: 200,\n\t      draggableElementSelector: '[data-dialog-role=\"draggable\"]',\n\t      formErrorCallback: null,\n\t      formHandling: false,\n\t      formPreSubmitCallback: null,\n\t      formSuccessCallback: null,\n\t      zIndexOffset: 1000\n\t    };\n\t  }\n\t}\n\n\t/*\n\t * Copyright (c) 2013-2017, Inversoft Inc., All Rights Reserved\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n\t * either express or implied. See the License for the specific\n\t * language governing permissions and limitations under the License.\n\t */\n\n\t/**\n\t * @const {{Keys: {BACKSPACE: number, ENTER: number, ESCAPE: number, SPACE: number, TAB: number, LEFT_ARROW: number, UP_ARROW: number, RIGHT_ARROW: number, DOWN_ARROW: number, DELETE: number}} Events}\n\t */\n\tconst Events = {\n\t  Keys: {\n\t    BACKSPACE: 8,\n\t    ENTER: 13,\n\t    ESCAPE: 27,\n\t    SPACE: 32,\n\t    TAB: 9,\n\t    LEFT_ARROW: 37,\n\t    UP_ARROW: 38,\n\t    RIGHT_ARROW: 39,\n\t    DOWN_ARROW: 40,\n\t    DELETE: 46\n\t  }\n\t};\n\n\t/*\n\t * Copyright (c) 2015-2018, Inversoft Inc., All Rights Reserved\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n\t * either express or implied. See the License for the specific\n\t * language governing permissions and limitations under the License.\n\t */\n\n\tconst PrimeDate = {\n\t  DAYS_IN_MONTH: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\n\n\t  /**\n\t   * Return the hour in a 12-hour format. AM and PM are not communicated by the returned hour.\n\t   *\n\t   * @param date {Date} The date object to retrieve the hour from.\n\t   * @returns {Number} The hour of the day between 1 and 12.\n\t   */\n\t  getHourOfDay: function(date) {\n\t    return (date.getHours() + 24) % 12 || 12;\n\t  },\n\n\t  /**\n\t   * @param year The year.\n\t   * @returns {boolean} True if this is a leap year, otherwise false.\n\t   */\n\t  isLeapYear: function(year) {\n\t    return !((year % 4) || (!(year % 100) && (year % 400)));\n\t  },\n\n\t  /**\n\t   * Return the number of days in the month.\n\t   * @param year The year, the days in the month may change during a leap year.\n\t   * @param month The month.\n\t   * @returns {Number} The number of days in the month.\n\t   */\n\t  numberOfDaysInMonth: function(year, month) {\n\t    if (month === 1 && this.isLeapYear(year)) {\n\t      return 29;\n\t    } else {\n\t      return PrimeDate.DAYS_IN_MONTH[month];\n\t    }\n\t  },\n\n\t  /**\n\t   * Adds the given number of days to the given Date.\n\t   *\n\t   * @param date {Date} The date to add the days to.\n\t   * @param number {Number} The number of days to add.\n\t   */\n\t  plusDays: function(date, number) {\n\t    if (number === 0) {\n\t      return;\n\t    }\n\n\t    let newDate = date.getDate() + number;\n\t    let numberOfDaysInMonth = PrimeDate.numberOfDaysInMonth(date.getFullYear(), date.getMonth());\n\n\t    if (newDate > 0) {\n\t      while (newDate > numberOfDaysInMonth) {\n\t        PrimeDate.plusMonths(date, 1);\n\t        newDate = newDate - numberOfDaysInMonth;\n\t        numberOfDaysInMonth = PrimeDate.numberOfDaysInMonth(date.getFullYear(), date.getMonth());\n\t      }\n\n\t      date.setDate(newDate);\n\t    } else {\n\t      while (newDate <= 0) {\n\t        PrimeDate.plusMonths(date, -1);\n\t        numberOfDaysInMonth = PrimeDate.numberOfDaysInMonth(date.getFullYear(), date.getMonth());\n\t        newDate = newDate + numberOfDaysInMonth;\n\t      }\n\n\t      date.setDate(newDate);\n\t    }\n\t  },\n\n\t  /**\n\t   * Adds the given number of hours to the given Date. The number can be negative.\n\t   *\n\t   * @param date {Date} The date.\n\t   * @param number {Number} The number of hours to add.\n\t   */\n\t  plusHours: function(date, number) {\n\t    if (number === 0) {\n\t      return;\n\t    }\n\n\t    const deltaDays = parseInt(number / 24);\n\t    PrimeDate.plusDays(date, deltaDays);\n\n\t    const deltaHours = number % 24;\n\t    const newHour = date.getHours() + deltaHours;\n\t    if (newHour > 23) {\n\t      PrimeDate.plusDays(date, 1);\n\t      date.setHours(newHour - 24);\n\t    } else if (newHour < 0) {\n\t      PrimeDate.plusDays(date, -1);\n\t      date.setHours(24 + newHour);\n\t    } else {\n\t      date.setHours(newHour);\n\t    }\n\t  },\n\n\t  /**\n\t   * Adds the given number of minutes to the given Date. The number can be negative.\n\t   *\n\t   * @param date {Date} The date.\n\t   * @param number {Number} The number of minutes to add.\n\t   */\n\t  plusMinutes: function(date, number) {\n\t    if (number === 0) {\n\t      return;\n\t    }\n\n\t    const deltaHours = parseInt(number / 60);\n\t    PrimeDate.plusHours(date, deltaHours);\n\n\t    const deltaMinutes = number % 60;\n\t    const newMinute = date.getMinutes() + deltaMinutes;\n\t    if (newMinute > 60) {\n\t      PrimeDate.plusHours(date, 1);\n\t      date.setMinutes(newMinute - 60);\n\t    } else if (newMinute < 0) {\n\t      PrimeDate.plusHours(date, -1);\n\t      date.setMinutes(60 + newMinute);\n\t    } else {\n\t      date.setMinutes(newMinute);\n\t    }\n\t  },\n\n\t  /**\n\t   * Adds the given number of months to the given Date. The number can be negative.\n\t   *\n\t   * @param date {Date} The date.\n\t   * @param number {Number} The number of months to add.\n\t   */\n\t  plusMonths: function(date, number) {\n\t    if (number === 0) {\n\t      return;\n\t    }\n\n\t    let deltaYears = parseInt(number / 12);\n\t    let deltaMonths = number % 12;\n\t    let currentMonth = date.getMonth();\n\t    const newMonth = currentMonth + deltaMonths;\n\t    if (newMonth < 0) {\n\t      deltaYears--;\n\t      deltaMonths = newMonth;\n\t      currentMonth = 12;\n\t    } else if (newMonth >= 12) {\n\t      deltaYears++;\n\t      deltaMonths = newMonth - 12;\n\t      currentMonth = 0;\n\t    }\n\n\t    date.setYear(date.getFullYear() + deltaYears);\n\t    // If the day is 31 and you set month to 1 (February) it will adjust to March 3 (Feb 28 + 3)\n\t    const adjustedMonth = currentMonth + deltaMonths;\n\t    if (date.getDate() > this.DAYS_IN_MONTH[adjustedMonth]) {\n\t      date.setDate(this.DAYS_IN_MONTH[adjustedMonth]);\n\t    }\n\t    date.setMonth(adjustedMonth);\n\t  },\n\n\t  /**\n\t   * Adds the given number of seconds to the given Date. The number can be negative.\n\t   *\n\t   * @param date {Date} The date.\n\t   * @param number {Number} The number of seconds to add.\n\t   */\n\t  plusSeconds: function(date, number) {\n\t    if (number === 0) {\n\t      return;\n\t    }\n\n\t    const deltaMinutes = parseInt(number / 60);\n\t    PrimeDate.plusMinutes(date, deltaMinutes);\n\n\t    const deltaSeconds = number % 60;\n\t    const newSecond = date.getSeconds() + deltaSeconds;\n\t    if (newSecond > 60) {\n\t      PrimeDate.plusMinutes(date, 1);\n\t      date.setSeconds(newSecond - 60);\n\t    } else if (newSecond < 0) {\n\t      PrimeDate.plusMinutes(date, -1);\n\t      date.setSeconds(60 + newSecond);\n\t    } else {\n\t      date.setSeconds(newSecond);\n\t    }\n\t  },\n\n\t  /**\n\t   * Adds the given number of years to the given Date. The number can be negative.\n\t   *\n\t   * @param date {Date} The date.\n\t   * @param number {Number} The number of years to add.\n\t   */\n\t  plusYears: function(date, number) {\n\t    if (number === 0) {\n\t      return;\n\t    }\n\n\t    date.setFullYear(date.getFullYear() + number);\n\t  },\n\n\t  /**\n\t   * Return a string in simplified extended ISO format (ISO 8601) truncated to only return YYYY-MM-DD.\n\t   *\n\t   * For example: new Date(2015, 6, 4) --> 2015-07-04\n\t   *\n\t   * @param date {Date} The date.\n\t   * @returns {String} A date string in the format YYYY-MM-DD.\n\t   */\n\t  toDateOnlyISOString: function(date) {\n\t    if (date instanceof Date) {\n\t      return date.getFullYear()\n\t          + '-' + Utils.leftPadNumber(date.getMonth() + 1, 2)\n\t          + '-' + Utils.leftPadNumber(date.getDate(), 2);\n\t    }\n\t    throw TypeError('date parameter must be a Date object.');\n\t  }\n\t};\n\n\t/*\n\t * Copyright (c) 2015-2018, Inversoft Inc., All Rights Reserved\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n\t * either express or implied. See the License for the specific\n\t * language governing permissions and limitations under the License.\n\t */\n\n\tconst SHORT_DAY_NAMES = ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'];\n\tconst MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\tconst DATE_SEPARATOR = '/';\n\tconst TIME_SEPARATOR = ':';\n\tconst AM_PM = ['AM', 'PM'];\n\n\tclass DateTimePicker {\n\t  /**\n\t   * Constructs a new DateTimePicker object for the given input element.\n\t   *\n\t   * @param {PrimeElement|Element|EventTarget} element The Prime Element for the DateTimePicker widget.\n\t   * @constructor\n\t   */\n\t  constructor(element) {\n\t    Utils.bindAll(this);\n\n\t    this.element = PrimeElement.wrap(element);\n\t    if (!this.element.is('input')) {\n\t      throw new TypeError('You can only use DateTimePicker with an input element');\n\t    }\n\n\t    this.callback = null;\n\t    this.customFormatHandler = null;\n\t    this._setInitialOptions();\n\t  };\n\n\t  static get SHORT_DAY_NAMES() {\n\t    return SHORT_DAY_NAMES;\n\t  }\n\n\t  static get MONTHS() {\n\t    return MONTHS;\n\t  }\n\n\t  static get DATE_SEPARATOR() {\n\t    return DATE_SEPARATOR;\n\t  }\n\n\t  static get TIME_SEPARATOR() {\n\t    return TIME_SEPARATOR;\n\t  }\n\n\t  static get AM_PM() {\n\t    return AM_PM;\n\t  }\n\n\t  /**\n\t   * Closes the Date Picker widget.\n\t   *\n\t   * @returns {DateTimePicker} This DateTimePicker.\n\t   */\n\t  close() {\n\t    this.datepicker.removeClass('open');\n\n\t    // Pause a bit to cancel focus event and allow transition to play\n\t    setTimeout(function() {\n\t      this.datepicker.hide();\n\t    }.bind(this), this.options.closeTimeout);\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Closes the months select box.\n\t   *\n\t   * @returns {DateTimePicker} This DateTimePicker.\n\t   */\n\t  closeMonthsSelect() {\n\t    this.months.removeClass('open');\n\t    setTimeout(function() {\n\t      this.months.hide();\n\t    }.bind(this), this.options.closeTimeout);\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Closes the years select box.\n\t   *\n\t   * @returns {DateTimePicker} This DateTimePicker.\n\t   */\n\t  closeYearsSelect() {\n\t    this.years.removeClass('open');\n\t    setTimeout(function() {\n\t      this.years.hide();\n\t    }.bind(this), this.options.closeTimeout);\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Destroys the DateTimePicker Widget\n\t   */\n\t  destroy() {\n\t    this.datepicker.removeFromDOM();\n\t    this.element.removeEventListener('click', this._handleInputClick)\n\t        .removeEventListener('focus', this._handleInputClick)\n\t        .removeEventListener('keydown', this._handleInputKey);\n\t    PrimeDocument.removeEventListener('click', this._handleGlobalClick);\n\t    PrimeDocument.removeEventListener('keydown', this._handleGlobalKey);\n\t  }\n\n\t  /**\n\t   * Draws the calendar using the month and year from the given Date object.\n\t   *\n\t   * @param date {Date} The date to draw the calendar for.\n\t   * @return {DateTimePicker} This DateTimePicker.\n\t   */\n\t  drawCalendar(date) {\n\t    const month = date.getMonth();\n\t    const year = date.getFullYear();\n\t    const firstDay = new Date(year, month, 1);\n\t    const firstDayOfMonth = firstDay.getDay();\n\t    const daysInMonth = PrimeDate.numberOfDaysInMonth(year, month);\n\t    const used = firstDayOfMonth + daysInMonth;\n\t    const weeksInMonth = Math.ceil(used / 7);\n\n\t    let rows = '';\n\t    let startDay = 1;\n\t    for (let i = 0; i < weeksInMonth; i++) {\n\t      const startDayOfWeek = i === 0 ? firstDayOfMonth : 0;\n\t      rows += this._buildCalendarWeek(date, startDayOfWeek, startDay, daysInMonth);\n\t      startDay += 7 - startDayOfWeek; // increment by 7 adjusted by a week day of week offset\n\t    }\n\n\t    this.calendarBody.setHTML(rows);\n\n\t    // update data- attributes\n\t    this.monthDisplay.setDataAttribute('month', month);\n\t    this.yearDisplay.setDataAttribute('year', year);\n\n\t    // update text\n\t    this.monthDisplay.setTextContent(DateTimePicker.MONTHS[month]);\n\t    this.yearDisplay.setTextContent(year);\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Rebuilds the entire widget using the date value. Even if the user has moved to a different month display, this will\n\t   * rebuild the table completely.\n\t   *\n\t   * @returns {DateTimePicker} This DateTimePicker.\n\t   */\n\t  initialize() {\n\t    const value = this.element.getValue();\n\t    if (value === '' || value === null) {\n\t      this.date = new Date();\n\t    } else {\n\t      this.date = new Date(value);\n\t    }\n\n\t    const year = this.date.getUTCFullYear();\n\t    const timeSeparator = `<span>${DateTimePicker.TIME_SEPARATOR}</span>`;\n\t    const dateSeparator = `<span>${DateTimePicker.DATE_SEPARATOR}</span>`;\n\t    let html =\n\t        `<div class=\"${this.options.className }\">\n  <header>\n    <span class=\"prev\">&#9664;</span>\n    <span class=\"month\"></span>\n    <span class=\"year\"></span>\n    <span class=\"next\">&#9654;</span>\n  </header>\n  <table>\n    <thead>\n      <tr>\n        <th>${DateTimePicker.SHORT_DAY_NAMES[0]}</th>\n        <th>${DateTimePicker.SHORT_DAY_NAMES[1]}</th>\n        <th>${DateTimePicker.SHORT_DAY_NAMES[2]}</th>\n        <th>${DateTimePicker.SHORT_DAY_NAMES[3]}</th>\n        <th>${DateTimePicker.SHORT_DAY_NAMES[4]}</th>\n        <th>${DateTimePicker.SHORT_DAY_NAMES[5]}</th>\n        <th>${DateTimePicker.SHORT_DAY_NAMES[6]}</th>\n      </tr>\n    </thead>\n    <tbody>\n    </tbody>\n  </table>\n  <div class=\"inputs\">\n    <div class=\"date\">\n      <input size=\"2\" maxlength=\"2\" type=\"text\" name=\"month\" autocomplete=\"off\"/>${dateSeparator}\n      <input size=\"2\" maxlength=\"2\" type=\"text\" name=\"day\" autocomplete=\"off\"/>${dateSeparator}\n      <input size=\"4\" maxlength=\"4\" type=\"text\" name=\"year\" autocomplete=\"off\"/>\n    </div>\n    <div class=\"time\">\n      <input size=\"2\" maxlength=\"2\" type=\"text\" name=\"hour\" autocomplete=\"off\"/>${timeSeparator}\n      <input size=\"2\" maxlength=\"2\" type=\"text\" name=\"minute\" autocomplete=\"off\"/>${timeSeparator}\n      <input size=\"2\" maxlength=\"2\" type=\"text\" name=\"second\" autocomplete=\"off\"/>\n      <input size=\"2\" maxlength=\"2\" type=\"text\" name=\"am_pm\" autocomplete=\"off\"/>\n    </div>\n  </div>\n</div>`;\n\t    PrimeDocument.appendHTML(html);\n\t    this.datepicker = PrimeDocument.queryLast('.' + this.options.className).hide();\n\t    this.element.addEventListener('click', this._handleInputClick);\n\t    this.element.addEventListener('focus', this._handleInputClick);\n\t    this.element.addEventListener('keydown', this._handleInputKey);\n\n\t    this.calendarBody = this.datepicker.queryFirst('table tbody').addEventListener('click', this._handleDayClick);\n\t    this.monthDisplay = this.datepicker.queryFirst('header .month').addEventListener('click', this._handleMonthExpand);\n\t    this.yearDisplay = this.datepicker.queryFirst('header .year').addEventListener('click', this._handleYearExpand);\n\n\t    this.time = this.datepicker.queryFirst('.time');\n\t    this.inputs = this.datepicker.queryFirst('div.inputs');\n\t    this.hourInput = this.inputs.queryFirst('input[name=hour]').addEventListener('change', this._handleDateTimeChange).addEventListener('keydown', this._handleHourKey);\n\t    this.minuteInput = this.inputs.queryFirst('input[name=minute]').addEventListener('change', this._handleDateTimeChange).addEventListener('keydown', this._handleMinuteKey);\n\t    this.secondInput = this.inputs.queryFirst('input[name=second]').addEventListener('change', this._handleDateTimeChange).addEventListener('keydown', this._handleSecondKey);\n\t    this.ampmInput = this.inputs.queryFirst('input[name=am_pm]').addEventListener('keydown', this._handleAmPmKey);\n\t    this.monthInput = this.inputs.queryFirst('input[name=month]').setValue(this.date.getMonth() + 1).addEventListener('change', this._handleDateTimeChange).addEventListener('keydown', this._handleMonthKey);\n\t    this.dayInput = this.inputs.queryFirst('input[name=day]').setValue(this.date.getDate()).addEventListener('change', this._handleDateTimeChange).addEventListener('keydown', this._handleDayKey);\n\t    this.yearInput = this.inputs.queryFirst('input[name=year]').setValue(this.date.getFullYear()).addEventListener('change', this._handleDateTimeChange).addEventListener('keydown', this._handleYearKey);\n\n\t    this.datepicker.queryFirst('header .next').addEventListener('click', this._handleNextMonth);\n\t    this.datepicker.queryFirst('header .prev').addEventListener('click', this._handlePreviousMonth);\n\n\t    PrimeDocument.addEventListener('click', this._handleGlobalClick);\n\t    PrimeDocument.addEventListener('keydown', this._handleGlobalKey);\n\n\t    // Setup months dropdown\n\t    html = '<div class=\"months\">';\n\t    for (let i = 0; i < DateTimePicker.MONTHS.length; i++) {\n\t      html += `<div data-month=\"${i}\">${DateTimePicker.MONTHS[i]}</div>`;\n\t    }\n\t    html += '</div>';\n\t    this.datepicker.appendHTML(html);\n\t    this.months = this.datepicker.queryFirst('.months');\n\t    this.months.hide();\n\t    this.months.getChildren().each(function(month) {\n\t      month.addEventListener('click', function() {\n\t        this.setMonth(parseInt(month.getDataAttribute('month')));\n\t        this.closeMonthsSelect();\n\t      }.bind(this));\n\t    }.bind(this));\n\n\t    // Setup year dropdown\n\t    html = '<div class=\"years\">';\n\t    const startYear = this.date.getFullYear() - 10;\n\t    const endYear = this.date.getFullYear() + 10;\n\t    for (let i = startYear; i < endYear; i++) {\n\t      html += `<div data-year=\"${i}\">${i}</div>`;\n\t    }\n\t    html += '</div>';\n\t    this.datepicker.appendHTML(html);\n\t    this.years = this.datepicker.queryFirst('.years');\n\t    this.years.hide();\n\t    this.years.getChildren().each(function(year) {\n\t      year.addEventListener('click', function() {\n\t        this.setYear(parseInt(year.getDataAttribute('year')));\n\t        this.closeYearsSelect();\n\t      }.bind(this));\n\t    }.bind(this));\n\n\t    this._rebuild();\n\n\t    if (this.customFormatHandler !== null) {\n\t      this.element.setValue(this.customFormatHandler.call(null, this.date));\n\t    }\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * @returns {Date} Return the current value of the time picker.\n\t   */\n\t  getDate() {\n\t    return new Date(this.date.getTime());\n\t  }\n\n\t  /**\n\t   * Moves the DateTimePicker to the next month and redraws the calendar.\n\t   *\n\t   * @returns {DateTimePicker} This DateTimePicker.\n\t   */\n\t  nextMonth() {\n\t    const newDate = new Date(this.date);\n\t    newDate.setDate(1); // Set the day to 1 to keep us from wrapping months on the 30 and 31st.\n\t    newDate.setMonth(parseInt(this.monthDisplay.getDataAttribute('month')));\n\t    newDate.setFullYear(parseInt(this.yearDisplay.getDataAttribute('year')));\n\t    PrimeDate.plusMonths(newDate, 1);\n\t    this.drawCalendar(newDate);\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Opens the Date Picker widget.\n\t   *\n\t   * @returns {DateTimePicker} This DateTimePicker.\n\t   */\n\t  open() {\n\t    this.datepicker.setLeft(this.element.getLeft());\n\t    this.datepicker.setTop(this.element.getAbsoluteTop() + this.element.getHeight() + 8);\n\t    this.datepicker.show();\n\t    this.datepicker.addClass('open');\n\n\t    const zIndex = this.element.getRelativeZIndex();\n\t    this.datepicker.setStyle('zIndex', zIndex + 10);\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Opens the month select box.\n\t   */\n\t  openMonthSelect() {\n\t    this.closeYearsSelect();\n\n\t    this.months.setLeft(this.monthDisplay.getOffsetLeft() - 5);\n\t    this.months.setTop(this.monthDisplay.getOffsetTop() - 5);\n\t    this.months.setStyle('zIndex', this.monthDisplay.getRelativeZIndex() + 10);\n\t    this.months.show();\n\t    this.months.addClass('open');\n\n\t    const currentMonth = this.months.queryFirst('[data-month=\"' + this.date.getMonth() + '\"]');\n\t    this.months.getChildren().each(function(month) {\n\t      month.removeClass('selected');\n\t    });\n\t    currentMonth.addClass('selected');\n\t  }\n\n\t  /**\n\t   * Opens the year select box.\n\t   */\n\t  openYearSelect() {\n\t    this.closeMonthsSelect();\n\n\t    this.years.setLeft(this.yearDisplay.getOffsetLeft() - 5);\n\t    this.years.setTop(this.yearDisplay.getOffsetTop() - 5);\n\t    this.years.setStyle('zIndex', this.yearDisplay.getRelativeZIndex() + 10);\n\t    this.years.show();\n\t    this.years.addClass('open');\n\n\t    const currentYear = this.years.queryFirst('[data-year=\"' + this.date.getFullYear() + '\"]');\n\t    this.years.getChildren().each(function(year) {\n\t      year.removeClass('selected');\n\t    });\n\t    currentYear.addClass('selected');\n\t  }\n\n\t  /**\n\t   * Moves the DateTimePicker to the previous month and redraws the calendar.\n\t   *\n\t   * @returns {DateTimePicker} This DateTimePicker.\n\t   */\n\t  previousMonth() {\n\t    const newDate = new Date(this.date);\n\t    newDate.setDate(1); // Set to 1 until month has been set\n\t    newDate.setMonth(parseInt(this.monthDisplay.getDataAttribute('month')));\n\t    newDate.setFullYear(parseInt(this.yearDisplay.getDataAttribute('year')));\n\t    PrimeDate.plusMonths(newDate, -1);\n\t    this.drawCalendar(newDate);\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the date of the DateTimePicker and redraws the calendar to the month for the date.\n\t   *\n\t   * @param {Date} newDate The new date.\n\t   * @returns {DateTimePicker} This DateTimePicker.\n\t   */\n\t  setDate(newDate) {\n\t    this.date = newDate;\n\n\t    if (this.customFormatHandler !== null) {\n\t      this.element.setValue(this.customFormatHandler.call(null, this.date));\n\t    } else {\n\t      if (this.options.dateOnly) {\n\t        this.element.setValue(PrimeDate.toDateOnlyISOString(newDate));\n\t      } else {\n\t        this.element.setValue(newDate.toISOString());\n\t      }\n\t    }\n\n\t    this._rebuild();\n\n\t    if (this.callback !== null) {\n\t      this.callback(this);\n\t    }\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * @param {number} month The month. A 0 based number between 0 (January) and 11 (December).\n\t   * @returns {DateTimePicker}\n\t   */\n\t  setMonth(month) {\n\t    let currentYear = parseInt(this.yearDisplay.getDataAttribute('year'));\n\t    if (month < 0) {\n\t      month = 11;\n\t      currentYear--;\n\t    } else if (month > 11) {\n\t      currentYear++;\n\t      month = 0;\n\t    }\n\n\t    this.date.setMonth(month);\n\t    this.date.setYear(currentYear);\n\t    this.setDate(this.date);\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   *\n\t   * @param {number} year The year.\n\t   * @returns {DateTimePicker}\n\t   */\n\t  setYear(year) {\n\t    this.yearDisplay.setDataAttribute('year', year);\n\t    this.yearDisplay.setTextContent(year);\n\t    this.date.setYear(year);\n\t    this.setDate(this.date);\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the callback handler that is called with the DateTimePicker's value is changed.\n\t   *\n\t   * @param callback {Function} The callback function.\n\t   * @return {DateTimePicker} This.\n\t   */\n\t  withCallback(callback) {\n\t    this.callback = callback;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the class name for the main div of the date time picker.\n\t   *\n\t   * @param className {string} The class name.\n\t   * @returns {DateTimePicker} This.\n\t   */\n\t  withClassName(className) {\n\t    this.options.className = className;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the timeout used in the close method to allow for transitions.\n\t   *\n\t   * @param timeout {int} The timeout.\n\t   * @returns {DateTimePicker}\n\t   */\n\t  withCloseTimeout(timeout) {\n\t    this.options.closeTimeout = timeout;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets a custom format handler responsible for formatting the date string that will be set into the input field.\n\t   * When not defined the default behavior will be used.\n\t   *\n\t   * @param formatHandler {Function} The handler function.\n\t   * @return {DateTimePicker} This.\n\t   */\n\t  withCustomFormatHandler(formatHandler) {\n\t    this.customFormatHandler = formatHandler;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Render the DateTimePicker w/out the time picker. Only the calendar will be displayed and the input field will be updated with date only.\n\t   *\n\t   *\n\t   * @returns {DateTimePicker} This DateTimePicker.\n\t   */\n\t  withDateOnly() {\n\t    this.options.dateOnly = true;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Set more than one option at a time by providing a map of key value pairs. This is considered an advanced\n\t   * method to set options on the widget. The caller needs to know what properties are valid in the options object.\n\t   *\n\t   * @param {Object} options Key value pair of configuration options.\n\t   * @returns {DateTimePicker} This DateTimePicker.\n\t   */\n\t  withOptions(options) {\n\t    if (!Utils.isDefined(options)) {\n\t      return this;\n\t    }\n\n\t    for (let option in options) {\n\t      if (options.hasOwnProperty(option)) {\n\t        this.options[option] = options[option];\n\t      }\n\t    }\n\t    return this;\n\t  }\n\n\t  /* ===================================================================================================================\n\t   * Private methods\n\t   * ===================================================================================================================*/\n\n\t  /**\n\t   * Build the HTML for a single calendar week.\n\t   *\n\t   * @param date {Date} The date to build the calendar week based on.\n\t   * @param startDayOfWeek {Number} The day of the week of this week begins. A 0 based number between 0 and 6.\n\t   * @param startDayOfMonth {Number} The day of the month this week begins. A number between 1 and 31.\n\t   * @param daysInMonth {Number} The number of days in this calendar month.\n\t   * @returns {string} The HTML for this week.\n\t   * @private\n\t   */\n\t  _buildCalendarWeek(date, startDayOfWeek, startDayOfMonth, daysInMonth) {\n\t    const daysInPreviousMonth = new Date(date.getFullYear(), date.getMonth(), 0).getDate();\n\t    let startDayOfPreviousMonth = daysInPreviousMonth - startDayOfWeek + 1;\n\t    let startDayOfNextMonth = 1;\n\n\t    let row = '<tr>';\n\t    let emptyColumns = 0;\n\t    const year = date.getFullYear();\n\t    const month = date.getMonth();\n\n\t    for (let i = 0; i < 7; i++) {\n\t      const dayOfWeek = startDayOfMonth + i;\n\t      // Days of the previous month\n\t      if (dayOfWeek <= startDayOfWeek) {\n\t        row += '<td><a class=\"inactive\" href=\"#\" data-year=\"' + year + '\" data-month=\"' + (month - 1) + '\" data-day=\"' + startDayOfPreviousMonth + '\">' + startDayOfPreviousMonth + '</a></td>';\n\t        startDayOfPreviousMonth++;\n\t        emptyColumns++;\n\t      } else if (dayOfWeek > daysInMonth) {\n\t        // Days of the next month\n\t        row += '<td><a class=\"inactive\" href=\"#\" data-year=\"' + year + '\" data-month=\"' + month + '\" data-day=\"' + dayOfWeek + '\">' + startDayOfNextMonth + '</a></td>';\n\t        startDayOfNextMonth++;\n\t      } else {\n\t        // Days in the current month\n\t        const day = dayOfWeek - emptyColumns;\n\t        const selected = this.date.getDate() === day && this.date.getMonth() === month;\n\t        row += '<td><a ' + (selected ? 'class=\"selected\"' : '') + 'href=\"#\" data-year=\"' + year + '\" data-month=\"' + month + '\" data-day=\"' + day + '\">' + day + '</a></td>';\n\t      }\n\t    }\n\n\t    row += '</tr>';\n\t    return row;\n\t  }\n\n\t  // noinspection JSMethodCanBeStatic\n\t  /**\n\t   * Clamp the value between the minimum and maximum values.\n\t   *\n\t   * @param {Number} min the minimum number value.\n\t   * @param {Number} max The maximum number value.\n\t   * @param {Number} value The value to clamp.\n\t   * @returns {Number} The resulting value, either the min, max or actual value if not out of bounds.\n\t   * @private\n\t   */\n\t  _clamp(min, max, value) {\n\t    return Math.max(min, Math.min(value, max));\n\t  }\n\n\t  /**\n\t   * Handles when the AM/PM element is selected and the user hits a key. If the user hits A, this changes to AM. If the\n\t   * user hits P, this changes to PM. If the use hits the up or down arrows, this toggles between AM and PM.\n\t   *\n\t   * @param {KeyboardEvent} event The keyboard event.\n\t   * @private\n\t   */\n\t  _handleAmPmKey(event) {\n\t    if (event.keyCode === Events.Keys.TAB) {\n\t      Utils.stopEvent(event);\n\t      if (event.shiftKey) {\n\t        this.secondInput.domElement.setSelectionRange(0, this.secondInput.getValue().length);\n\t        this.secondInput.focus();\n\t      } else {\n\t        this.monthInput.domElement.setSelectionRange(0, this.monthInput.getValue().length);\n\t        this.monthInput.focus();\n\t      }\n\t      return;\n\t    }\n\n\t    // Decode the key event\n\t    const current = this.ampmInput.getValue();\n\t    if (event.keyCode === 65) {\n\t      // User hit A\n\t      if (current === DateTimePicker.AM_PM[1]) {\n\t        PrimeDate.plusHours(this.date, -12);\n\t      }\n\t    } else if (event.keyCode === 80) {\n\t      // User hit P\n\t      if (current === DateTimePicker.AM_PM[0]) {\n\t        PrimeDate.plusHours(this.date, 12);\n\t      }\n\t    } else if (event.keyCode === Events.Keys.UP_ARROW || event.keyCode === Events.Keys.DOWN_ARROW) {\n\t      // User hit up or down arrow\n\t      if (current === DateTimePicker.AM_PM[0]) {\n\t        PrimeDate.plusHours(this.date, 12);\n\t      } else if (current === DateTimePicker.AM_PM[1]) {\n\t        PrimeDate.plusHours(this.date, -12);\n\t      }\n\t    } else if (event.keyCode === Events.Keys.ENTER || event.keyCode === Events.Keys.ESCAPE) {\n\t      return;\n\t    }\n\n\t    this.setDate(this.date);\n\t    this.ampmInput.domElement.setSelectionRange(0, this.ampmInput.getValue().length);\n\t    Utils.stopEvent(event);\n\t  }\n\n\t  /**\n\t   * Handle date/time change events. This pulls the values from the 3 date fields and makes a new Date. Then it calls\n\t   * {@link #setDate(Date)}.\n\t   *\n\t   * @param {KeyboardEvent} event The keyboard event.\n\t   * @private\n\t   */\n\t  _handleDateTimeChange(event) {\n\t    Utils.stopEvent(event);\n\t    const newDate = new Date();\n\t    const hours = this._clamp(1, 12, parseInt(this.hourInput.getValue()));\n\t    if (this.ampmInput.getValue() === DateTimePicker.AM_PM[0]) {\n\t      if (hours === 12) {\n\t        newDate.setHours(0);\n\t      } else {\n\t        newDate.setHours(hours);\n\t      }\n\t    } else {\n\t      if (hours === 12) {\n\t        newDate.setHours(12);\n\t      } else {\n\t        newDate.setHours(hours + 12);\n\t      }\n\t    }\n\n\t    const seconds = this._clamp(0, 59, parseInt(this.secondInput.getValue()));\n\t    const minutes = this._clamp(0, 59, parseInt(this.minuteInput.getValue()));\n\n\t    newDate.setSeconds(seconds);\n\t    newDate.setMinutes(minutes);\n\t    newDate.setDate(1); // Set to 1 until month has been set\n\t    newDate.setMonth(parseInt(this.monthInput.getValue()) - 1);\n\t    newDate.setDate(parseInt(this.dayInput.getValue()));\n\t    newDate.setYear(parseInt(this.yearInput.getValue()));\n\n\t    this.setDate(newDate);\n\t  }\n\n\t  /**\n\t   * Handle the click on a day.\n\t   *\n\t   * @parameter {MouseEvent} event The click event.\n\t   * @private\n\t   */\n\t  _handleDayClick(event) {\n\t    Utils.stopEvent(event);\n\t    let dayElement = new PrimeElement(event.target);\n\t    if (!dayElement.is('a')) {\n\t      dayElement = dayElement.queryFirst('a');\n\t    }\n\n\t    const newDate = new Date(this.date);\n\t    newDate.setDate(1); // Set to 1 until month has been set\n\t    newDate.setFullYear(parseInt(dayElement.getDataAttribute('year')));\n\t    newDate.setMonth(parseInt(dayElement.getDataAttribute('month')));\n\t    newDate.setDate(parseInt(dayElement.getDataAttribute('day')));\n\t    this.setDate(newDate);\n\t  }\n\n\t  /**\n\t   * Handles when a key is click in the day input field so that tab and shift tab work properly.\n\t   * <p>\n\t   * Also handles up and down arrow to increment and decrement the day.\n\t   *\n\t   * @param {KeyboardEvent} event The key event.\n\t   * @private\n\t   */\n\t  _handleDayKey(event) {\n\t    if (event.keyCode === Events.Keys.UP_ARROW) {\n\t      PrimeDate.plusDays(this.date, 1);\n\t      this.setDate(this.date);\n\t      this.dayInput.domElement.setSelectionRange(0, this.dayInput.getValue().length);\n\t      Utils.stopEvent(event);\n\t    } else if (event.keyCode === Events.Keys.DOWN_ARROW) {\n\t      Utils.stopEvent(event);\n\t      PrimeDate.plusDays(this.date, -1);\n\t      this.setDate(this.date);\n\t      this.dayInput.domElement.setSelectionRange(0, this.dayInput.getValue().length);\n\t    } else if (event.keyCode === Events.Keys.ENTER) {\n\t      this.date.setDate(parseInt(this.dayInput.getValue()));\n\t    }\n\t  }\n\n\t  /**\n\t   * Handles a global click event. This determines if the click was outside of the DateTimePicker and closes it.\n\t   *\n\t   * @param {MouseEvent} event The click event.\n\t   * @private\n\t   */\n\t  _handleGlobalClick(event) {\n\t    // Skip this function completely if they clicked the input field\n\t    if (event.target === this.element.domElement) {\n\t      return;\n\t    }\n\n\t    const top = this.datepicker.getTop();\n\t    const bottom = this.datepicker.getBottom();\n\t    const left = this.datepicker.getLeft();\n\t    const right = this.datepicker.getRight();\n\t    if (this.datepicker.isVisible() && (event.x < left || event.x > right || event.y < top || event.y > bottom)) {\n\t      this.close();\n\t      this.closeYearsSelect();\n\t      this.closeMonthsSelect();\n\t    } else {\n\t      if (this.years.isVisible()) {\n\t        this.closeYearsSelect();\n\t      }\n\t      if (this.months.isVisible()) {\n\t        this.closeMonthsSelect();\n\t      }\n\t    }\n\t  }\n\n\t  /**\n\t   * Handles a global key event. This determines if the DateTimePicker is open and if enter or escape was hit.\n\t   *\n\t   * @param {KeyboardEvent} event The key event.\n\t   * @private\n\t   */\n\t  _handleGlobalKey(event) {\n\t    // Skip this function completely if the DateTimePicker isn't open\n\t    if (!this.datepicker.isVisible()) {\n\t      return;\n\t    }\n\n\t    if (event.keyCode === Events.Keys.ENTER) {\n\t      Utils.stopEvent(event);\n\t      this.setDate(this.date);\n\t      this.close();\n\t      this.element.focus();\n\t    } else if (event.keyCode === Events.Keys.ESCAPE) {\n\t      this.close();\n\t      this.element.focus();\n\t    }\n\t  }\n\n\t  /**\n\t   * Handles when a key is click in the hours input field so that tab and shift tab work properly.\n\t   * <p>\n\t   * Also handles up and down arrow to increment and decrement the hour.\n\t   *\n\t   * @param {KeyboardEvent} event The key event.\n\t   * @private\n\t   */\n\t  _handleHourKey(event) {\n\t    if (event.keyCode === Events.Keys.UP_ARROW) {\n\t      Utils.stopEvent(event);\n\t      PrimeDate.plusHours(this.date, 1);\n\t      this.setDate(this.date);\n\t      this.hourInput.domElement.setSelectionRange(0, this.hourInput.getValue().length);\n\t    } else if (event.keyCode === Events.Keys.DOWN_ARROW) {\n\t      Utils.stopEvent(event);\n\t      PrimeDate.plusHours(this.date, -1);\n\t      this.setDate(this.date);\n\t      this.hourInput.domElement.setSelectionRange(0, this.hourInput.getValue().length);\n\t    } else if (event.keyCode === Events.Keys.ENTER) {\n\t      this.date.setHours(parseInt(this.hourInput.getValue()));\n\t    }\n\t  }\n\n\t  /**\n\t   * Handle the click event for the input date field. If the DateTimePicker is hidden this will call the {@link #show()}\n\t   * function.\n\t   *\n\t   * @returns {boolean} Always true.\n\t   * @private\n\t   */\n\t  _handleInputClick() {\n\t    if (!this.datepicker.isVisible()) {\n\t      this.open();\n\t      this.monthInput.domElement.setSelectionRange(0, this.monthInput.getValue().length);\n\t      this.monthInput.focus();\n\t    }\n\t  }\n\n\t  /**\n\t   * Handle the key event for the input date field. If the user hits tab or shift-tab, this moves the focus to the\n\t   * nested inputs.\n\t   *\n\t   * @param {KeyboardEvent} event The keyboard event.\n\t   * @private\n\t   */\n\t  _handleInputKey(event) {\n\t    if (this.datepicker.isVisible() && event.keyCode === Events.Keys.TAB) {\n\t      Utils.stopEvent(event);\n\t      if (event.shiftKey) {\n\t        this.ampmInput.domElement.setSelectionRange(0, this.ampmInput.getValue().length);\n\t        this.ampmInput.focus();\n\t      } else {\n\t        this.monthInput.domElement.setSelectionRange(0, this.monthInput.getValue().length);\n\t        this.monthInput.focus();\n\t      }\n\t    }\n\t  }\n\n\t  /**\n\t   * Handle the key down event and capture the up and down arrow key to increment and decrement the minute.\n\n\t   * @param {KeyboardEvent} event The key event.\n\t   * @private\n\t   */\n\t  _handleMinuteKey(event) {\n\t    if (event.keyCode === Events.Keys.UP_ARROW) {\n\t      Utils.stopEvent(event);\n\t      PrimeDate.plusMinutes(this.date, 1);\n\t      this.setDate(this.date);\n\t      this.minuteInput.domElement.setSelectionRange(0, this.minuteInput.getValue().length);\n\t    } else if (event.keyCode === Events.Keys.DOWN_ARROW) {\n\t      Utils.stopEvent(event);\n\t      PrimeDate.plusMinutes(this.date, -1);\n\t      this.setDate(this.date);\n\t      this.minuteInput.domElement.setSelectionRange(0, this.minuteInput.getValue().length);\n\t    } else if (event.keyCode === Events.Keys.ENTER) {\n\t      this.date.setMinutes(parseInt(this.minuteInput.getValue()));\n\t    }\n\t  }\n\n\t  /**\n\t   * Handles the click on the month to open the month select.\n\t   *\n\t   * @private\n\t   */\n\t  _handleMonthExpand(event) {\n\t    Utils.stopEvent(event);\n\t    this.openMonthSelect();\n\t  }\n\n\t  /**\n\t   * Handles when a key is click in the month input field so that tab and shift tab work properly.\n\t   * <p>\n\t   * Also handles up and down arrow to increment and decrement the month.\n\t   *\n\t   * @param {KeyboardEvent} event The key event.\n\t   * @private\n\t   */\n\t  _handleMonthKey(event) {\n\t    if (event.keyCode === Events.Keys.TAB && event.shiftKey) {\n\t      Utils.stopEvent(event);\n\t      if (this.options.dateOnly) {\n\t        this.yearInput.domElement.setSelectionRange(0, this.yearInput.getValue().length);\n\t        this.yearInput.focus();\n\t      } else {\n\t        this.ampmInput.domElement.setSelectionRange(0, this.ampmInput.getValue().length);\n\t        this.ampmInput.focus();\n\t      }\n\t      return;\n\t    }\n\n\t    if (event.keyCode === Events.Keys.UP_ARROW) {\n\t      Utils.stopEvent(event);\n\t      PrimeDate.plusMonths(this.date, 1);\n\t      this.setDate(this.date);\n\t      this.monthInput.domElement.setSelectionRange(0, this.monthInput.getValue().length);\n\t    } else if (event.keyCode === Events.Keys.DOWN_ARROW) {\n\t      Utils.stopEvent(event);\n\t      PrimeDate.plusMonths(this.date, -1);\n\t      this.setDate(this.date);\n\t      this.monthInput.domElement.setSelectionRange(0, this.monthInput.getValue().length);\n\t    } else if (event.keyCode === Events.Keys.ENTER) {\n\t      this.date.setMonth(parseInt(this.monthInput.getValue()) - 1);\n\t    }\n\t  }\n\n\t  /**\n\t   * Handle the next month button click.\n\t   *\n\t   * @param {MouseEvent} event The mouse event.\n\t   * @private\n\t   */\n\t  _handleNextMonth(event) {\n\t    Utils.stopEvent(event);\n\t    this.nextMonth();\n\t  }\n\n\t  /**\n\t   * Handle the previous month button click.\n\t   *\n\t   * @param {MouseEvent} event The mouse event.\n\t   * @private\n\t   */\n\t  _handlePreviousMonth(event) {\n\t    Utils.stopEvent(event);\n\t    this.previousMonth();\n\t  }\n\n\t  /**\n\t   * Handle the key down event and capture the up and down arrow key to increment and decrement the second.\n\n\t   * @param {KeyboardEvent} event The key event.\n\t   * @private\n\t   */\n\t  _handleSecondKey(event) {\n\t    if (event.keyCode === Events.Keys.UP_ARROW) {\n\t      Utils.stopEvent(event);\n\t      PrimeDate.plusSeconds(this.date, 1);\n\t      this.setDate(this.date);\n\t      this.secondInput.domElement.setSelectionRange(0, this.secondInput.getValue().length);\n\t    } else if (event.keyCode === Events.Keys.DOWN_ARROW) {\n\t      Utils.stopEvent(event);\n\t      PrimeDate.plusSeconds(this.date, -1);\n\t      this.setDate(this.date);\n\t      this.secondInput.domElement.setSelectionRange(0, this.secondInput.getValue().length);\n\t    } else if (event.keyCode === Events.Keys.ENTER) {\n\t      this.date.setSeconds(parseInt(this.secondInput.getValue()));\n\t    }\n\t  }\n\n\t  /**\n\t   * Handles the click on the year to open the year select.\n\t   *\n\t   * @private\n\t   */\n\t  _handleYearExpand(event) {\n\t    Utils.stopEvent(event);\n\t    this.openYearSelect();\n\t  }\n\n\t  /**\n\t   * Handles when a key is click in the year input field so that tab and shift tab work properly.\n\t   * <p>\n\t   * Also handles up and down arrow to increment and decrement the year.\n\t   *\n\t   * @param {KeyboardEvent} event The key event.\n\t   * @private\n\t   */\n\t  _handleYearKey(event) {\n\t    if (event.keyCode === Events.Keys.UP_ARROW) {\n\t      Utils.stopEvent(event);\n\t      PrimeDate.plusYears(this.date, 1);\n\t      this.setDate(this.date);\n\t      this.yearInput.domElement.setSelectionRange(0, this.yearInput.getValue().length);\n\t    } else if (event.keyCode === Events.Keys.DOWN_ARROW) {\n\t      Utils.stopEvent(event);\n\t      PrimeDate.plusYears(this.date, -1);\n\t      this.setDate(this.date);\n\t      this.yearInput.domElement.setSelectionRange(0, this.yearInput.getValue().length);\n\t    } else if (event.keyCode === Events.Keys.TAB && this.options.dateOnly) {\n\t      Utils.stopEvent(event);\n\t      if (event.shiftKey) {\n\t        this.dayInput.domElement.setSelectionRange(0, this.dayInput.getValue().length);\n\t        this.dayInput.focus();\n\t      } else {\n\t        this.monthInput.domElement.setSelectionRange(0, this.monthInput.getValue().length);\n\t        this.monthInput.focus();\n\t      }\n\t    } else if (event.keyCode === Events.Keys.ENTER) {\n\t      this.date.setFullYear(parseInt(this.yearInput.getValue()));\n\t    }\n\t  }\n\n\t  /**\n\t   * Rebuilds the HTML of the DateTimePicker.\n\t   * @private\n\t   */\n\t  _rebuild() {\n\t    this.drawCalendar(this.date);\n\t    this._refreshInputs();\n\n\t    if (this.options.dateOnly) {\n\t      this.time.hide();\n\t    }\n\t  }\n\n\t  /**\n\t   * Refresh the time inputs.\n\t   *\n\t   * @private\n\t   */\n\t  _refreshInputs() {\n\t    // Set Time -- assuming 12-hour time for the input fields and ISO 24-hour time for the field\n\t    const hours = PrimeDate.getHourOfDay(this.date);\n\t    this.hourInput.setValue(hours);\n\n\t    const minutes = this.date.getMinutes();\n\t    this.minuteInput.setValue((\"00\" + minutes).slice(-2));\n\n\t    const seconds = this.date.getSeconds();\n\t    this.secondInput.setValue((\"00\" + seconds).slice(-2));\n\n\t    if (this.date.getHours() >= 12) {\n\t      this.ampmInput.setValue(DateTimePicker.AM_PM[1]);\n\t    } else {\n\t      this.ampmInput.setValue(DateTimePicker.AM_PM[0]);\n\t    }\n\n\t    this.monthInput.setValue(this.date.getMonth() + 1);\n\t    this.dayInput.setValue(this.date.getDate());\n\t    this.yearInput.setValue(this.date.getFullYear());\n\t  }\n\n\t  /**\n\t   * Set the initial options for this widget.\n\t   * @private\n\t   */\n\t  _setInitialOptions() {\n\t    // Defaults\n\t    this.options = {\n\t      className: 'prime-date-picker',\n\t      closeTimeout: 200,\n\t      dateOnly: false\n\t    };\n\n\t    const userOptions = Utils.dataSetToOptions(this.element);\n\t    for (let option in userOptions) {\n\t      if (userOptions.hasOwnProperty(option)) {\n\t        this.options[option] = userOptions[option];\n\t      }\n\t    }\n\t  }\n\t}\n\n\t/*\n\t * Copyright (c) 2017, Inversoft Inc., All Rights Reserved\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n\t * either express or implied. See the License for the specific\n\t * language governing permissions and limitations under the License.\n\t */\n\n\tclass Dismissable {\n\t  /**\n\t   * Constructs a new Dismissable object for the given element.\n\t   *\n\t   * @param {PrimeElement|Element|EventTarget} element The Element for the Dismissable widget.\n\t   * @param {PrimeElement|Element|EventTarget} dismissButton The Element for the Dismissable button.\n\t   * @constructor\n\t   */\n\t  constructor(element, dismissButton) {\n\t    Utils.bindAll(this);\n\n\t    this.element = PrimeElement.wrap(element);\n\t    this.dismissButton = dismissButton;\n\t    this._setInitialOptions();\n\t  }\n\n\t  /**\n\t   * Closes the Dismissable by removing the open class from the element and setting a timer to remove the element from\n\t   * the DOM.\n\t   */\n\t  close() {\n\t    this.element.addClass('closed');\n\t    setTimeout(function() {\n\t      this.element.removeFromDOM();\n\t    }.bind(this), this.options.closeTimeout);\n\t  }\n\n\t  /**\n\t   * Destroys the widget.\n\t   */\n\t  destroy() {\n\t    this.dismissButton.removeEventListener('click', this._handleClick);\n\t  }\n\n\t  /**\n\t   * Initializes the Dismissable by binding the events to the dismiss button.\n\t   *\n\t   * @returns {Dismissable} This.\n\t   */\n\t  initialize() {\n\t    this.dismissButton.addEventListener('click', this._handleClick);\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the timeout used in the close method to allow for transitions.\n\t   *\n\t   * @param timeout {int} The timeout.\n\t   * @returns {Dismissable} This.\n\t   */\n\t  withCloseTimeout(timeout) {\n\t    this.options.closeTimeout = timeout;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Set more than one option at a time by providing a map of key value pairs. This is considered an advanced\n\t   * method to set options on the widget. The caller needs to know what properties are valid in the options object.\n\t   *\n\t   * @param {Object} options Key value pair of configuration options.\n\t   * @returns {Dismissable} This.\n\t   */\n\t  withOptions(options) {\n\t    if (!Utils.isDefined(options)) {\n\t      return this;\n\t    }\n\n\t    for (let option in options) {\n\t      if (options.hasOwnProperty(option)) {\n\t        this.options[option] = options[option];\n\t      }\n\t    }\n\t    return this;\n\t  }\n\n\t  /* ===================================================================================================================\n\t   * Private methods\n\t   * ===================================================================================================================*/\n\n\t  /**\n\t   * Handles the click event.\n\t   * @private\n\t   */\n\t  _handleClick(event) {\n\t    Utils.stopEvent(event);\n\t    this.close();\n\t  }\n\n\t  /**\n\t   * Set the initial options for this widget.\n\t   * @private\n\t   */\n\t  _setInitialOptions() {\n\t    // Defaults\n\t    this.options = {\n\t      closeTimeout: 400\n\t    };\n\t  }\n\t}\n\n\t/*\n\t * Copyright (c) 2017, Inversoft Inc., All Rights Reserved\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n\t * either express or implied. See the License for the specific\n\t * language governing permissions and limitations under the License.\n\t */\n\n\tclass HTMLDialog {\n\t  /**\n\t   * Constructs a new dialog box from an element.\n\t   *\n\t   * @param {PrimeElement|Element|EventTarget} element The Prime Element for the HTMLDialog widget.\n\t   * @constructor\n\t   */\n\t  constructor(element) {\n\t    Utils.bindAll(this);\n\n\t    this.element = PrimeElement.wrap(element);\n\t    this._setInitialOptions();\n\t    this.draggable = null;\n\t  }\n\n\t  /**\n\t   * Closes the dialog, destroys the HTML and updates or hides the overlay.\n\t   * @returns {HTMLDialog} This.\n\t   */\n\t  close() {\n\t    this.element.removeClass('open');\n\t    if (this.draggable !== null) {\n\t      this.draggable.destroy();\n\t      this.draggable = null;\n\t    }\n\n\t    setTimeout(function() {\n\t      this.element.hide();\n\n\t      const highestZIndex = this._determineZIndex();\n\t      if (highestZIndex !== 0) {\n\t        Overlay.instance.setZIndex(highestZIndex);\n\t      } else {\n\t        Overlay.instance.close();\n\t      }\n\t    }.bind(this), this.options.closeTimeout);\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Destroys the dialog by calling the close function.\n\t   * @returns {HTMLDialog} This.\n\t   */\n\t  destroy() {\n\t    this.close();\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Initializes the dialog.\n\t   * @returns {HTMLDialog} This.\n\t   */\n\t  initialize() {\n\t    this.element.hide();\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Opens the dialog.\n\t   *\n\t   * @returns {HTMLDialog} This.\n\t   */\n\t  open() {\n\t    const highestZIndex = this._determineZIndex();\n\t    Overlay.instance.open(highestZIndex + this.options.zIndexOffset);\n\t    this.element.setStyle('zIndex', (highestZIndex + this.options.zIndexOffset + 10).toString());\n\t    this.element.show();\n\t    this.element.addClass('open');\n\n\t    // Call the callback before positioning to ensure all changes to the dialog have been made\n\t    if (this.options.callback !== null) {\n\t      this.options.callback(this);\n\t    }\n\n\t    // Position the fixed dialog in the center of the screen\n\t    const windowHeight = PrimeWindow.getInnerHeight();\n\t    const dialogHeight = this.element.getHeight();\n\t    this.element.setTop(((windowHeight - dialogHeight) / 2) - 20);\n\n\t    this._setupButtons();\n\n\t    if (this.draggable === null) {\n\t      if (this.options.draggableElementSelector !== null && this.element.queryFirst(this.options.draggableElementSelector) !== null) {\n\t        this.draggable = new Draggable(this.element, this.options.draggableElementSelector).initialize();\n\t      }\n\t    }\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Updates the HTML contents of the dialog.\n\t   *\n\t   * @param html {String} The HTML.\n\t   * @returns {HTMLDialog} This.\n\t   */\n\t  setHTML(html) {\n\t    this.element.setHTML(html);\n\t    this._setupButtons();\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the callback that is called after the dialog has been fetched and rendered.\n\t   *\n\t   * @param callback {function} The callback function.\n\t   * @returns {HTMLDialog} This.\n\t   */\n\t  withCallback(callback) {\n\t    this.options.callback = callback;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the class name for the dialog element.\n\t   *\n\t   * @param className {string} The class name.\n\t   * @returns {HTMLDialog} This.\n\t   */\n\t  withClassName(className) {\n\t    this.options.className = className;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the close button element selector that is used to setup the close button in the HTML that was returned from\n\t   * the server.\n\t   *\n\t   * @param selector {string} The element selector.\n\t   * @returns {HTMLDialog} This.\n\t   */\n\t  withCloseButtonElementSelector(selector) {\n\t    this.options.closeButtonElementSelector = selector;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the timeout used in the close method to allow for transitions.\n\t   *\n\t   * @param timeout {int} The timeout.\n\t   * @returns {HTMLDialog} This.\n\t   */\n\t  withCloseTimeout(timeout) {\n\t    this.options.closeTimeout = timeout;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the draggable element selector that is used for the Draggable.\n\t   *\n\t   * @param selector {string} The element selector.\n\t   * @returns {HTMLDialog} This.\n\t   */\n\t  withDraggableButtonElementSelector(selector) {\n\t    this.options.draggableElementSelector = selector;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Set more than one option at a time by providing a map of key value pairs. This is considered an advanced\n\t   * method to set options on the widget. The caller needs to know what properties are valid in the options object.\n\t   *\n\t   * @param {Object} options Key value pair of configuration options.\n\t   * @returns {HTMLDialog} This.\n\t   */\n\t  withOptions(options) {\n\t    if (!Utils.isDefined(options)) {\n\t      return this;\n\t    }\n\n\t    for (let option in options) {\n\t      if (options.hasOwnProperty(option)) {\n\t        this.options[option] = options[option];\n\t      }\n\t    }\n\t    return this;\n\t  }\n\n\t  /* ===================================================================================================================\n\t   * Private methods\n\t   * ===================================================================================================================*/\n\n\t  _determineZIndex() {\n\t    let highestZIndex = 0;\n\t    PrimeDocument.query('.' + this.options.className).each(function(dialog) {\n\t      const zIndex = parseInt(dialog.getComputedStyle()['zIndex']);\n\t      if (dialog.isVisible() && zIndex > highestZIndex) {\n\t        highestZIndex = zIndex;\n\t      }\n\t    });\n\t    return highestZIndex;\n\t  }\n\n\t  _handleCloseClickEvent(event) {\n\t    Utils.stopEvent(event);\n\t    this.close();\n\t  }\n\n\t  _setupButtons() {\n\t    this.element.query(this.options.closeButtonElementSelector).each(function(e) {\n\t      e.addEventListener('click', this._handleCloseClickEvent);\n\t    }.bind(this));\n\t  }\n\n\t  /**\n\t   * Set the initial options for this widget.\n\t   * @private\n\t   */\n\t  _setInitialOptions() {\n\t    // Defaults\n\t    this.options = {\n\t      callback: null,\n\t      className: 'prime-dialog',\n\t      closeButtonElementSelector: '[data-dialog-role=\"close-button\"]',\n\t      closeTimeout: 200,\n\t      draggableElementSelector: '[data-dialog-role=\"draggable\"]',\n\t      zIndexOffset: 1000\n\t    };\n\n\t    const userOptions = Utils.dataSetToOptions(this.element);\n\t    for (let option in userOptions) {\n\t      if (userOptions.hasOwnProperty(option)) {\n\t        this.options[option] = userOptions[option];\n\t      }\n\t    }\n\t  }\n\t}\n\n\t/*\n\t * Copyright (c) 2017, Inversoft Inc., All Rights Reserved\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n\t * either express or implied. See the License for the specific\n\t * language governing permissions and limitations under the License.\n\t */\n\n\tclass InProgress {\n\t  /**\n\t   * Constructs a In Progress widget that opens an overlay over an element while something is running and closes it when\n\t   * it finishes.\n\t   *\n\t   * @param {PrimeElement|Element|EventTarget} element The Prime Element to overlay.\n\t   * @constructor\n\t   */\n\t  constructor(element) {\n\t    Utils.bindAll(this);\n\n\t    this.element = PrimeElement.wrap(element);\n\t    this._setInitialOptions();\n\t    this.draggable = null;\n\t  }\n\n\t  /**\n\t   * Closes the InProgress process.\n\t   *\n\t   * @param {Function} callback (Optional) A callback function to invoke after the InProgress has been completely closed.\n\t   */\n\t  close(callback) {\n\t    try {\n\t      this.options.endFunction(this);\n\t    } finally {\n\t      const now = new Date().getTime();\n\t      const duration = now - this.startInstant;\n\t      if (duration < this.options.minimumTime) {\n\t        setTimeout(function() {\n\t          this.overlay.removeFromDOM();\n\n\t          if (callback) {\n\t            callback();\n\t          }\n\t        }.bind(this), this.options.minimumTime - duration);\n\t      } else {\n\t        this.overlay.removeFromDOM();\n\n\t        if (callback) {\n\t          callback();\n\t        }\n\t      }\n\t    }\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Opens the InProgress process.\n\t   */\n\t  open() {\n\t    this.startInstant = new Date().getTime();\n\t    this.overlay = PrimeDocument.newElement('<div/>').setId('prime-in-progress-overlay').appendTo(document.body);\n\t    PrimeDocument.newElement('<i/>', {class: 'fa fa-spin fa-' + this.options.iconName}).appendTo(this.overlay);\n\n\t    const coords = this.element.getCoordinates();\n\t    const bodyCoords = PrimeDocument.bodyElement.getCoordinates();\n\t    this.overlay.setTop(coords.top - bodyCoords.top);\n\t    this.overlay.setLeft(coords.left - bodyCoords.left);\n\t    this.overlay.setWidth(this.element.getBorderedWidth());\n\t    this.overlay.setHeight(this.element.getBorderedHeight());\n\t    this.overlay.setStyle('zIndex', (this.element.getRelativeZIndex() + 1000).toString());\n\n\t    this.options.startFunction(this);\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the end function that is called when the InProgress process is finished.\n\t   *\n\t   * @param f {function} The function.\n\t   * @returns {InProgress} This.\n\t   */\n\t  withEndFunction(f) {\n\t    this.options.endFunction = f;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the FontAwesome icon name to use for the overlay.\n\t   *\n\t   * @param iconName {string} The icon name.\n\t   * @returns {InProgress} This.\n\t   */\n\t  withIconName(iconName) {\n\t    this.options.iconName = iconName;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the minimum time that the InProgress process must run.\n\t   *\n\t   * @param time {number} The time in milliseconds.\n\t   * @returns {InProgress} This.\n\t   */\n\t  withMinimumTime(time) {\n\t    this.options.minimumTime = time;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the start function that is called when the InProgress process is started.\n\t   *\n\t   * @param f {function} The function.\n\t   * @returns {InProgress} This.\n\t   */\n\t  withStartFunction(f) {\n\t    this.options.startFunction = f;\n\t    return this;\n\t  }\n\n\t  /* ===================================================================================================================\n\t   * Private methods\n\t   * ===================================================================================================================*/\n\n\t  /**\n\t   * Set the initial options for this widget.\n\t   * @private\n\t   */\n\t  _setInitialOptions() {\n\t    // Defaults\n\t    this.options = {\n\t      endFunction: function() {\n\t      },\n\t      iconName: 'refresh',\n\t      minimumTime: 1000,\n\t      startFunction: function() {\n\t      }\n\t    };\n\n\t    const userOptions = Utils.dataSetToOptions(this.element);\n\t    for (let option in userOptions) {\n\t      if (userOptions.hasOwnProperty(option)) {\n\t        this.options[option] = userOptions[option];\n\t      }\n\t    }\n\t  }\n\t}\n\n\t/*\n\t * Copyright (c) 2014-2018, Inversoft Inc., All Rights Reserved\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n\t * either express or implied. See the License for the specific\n\t * language governing permissions and limitations under the License.\n\t */\n\n\tclass Searcher {\n\t  /**\n\t   * Constructs a Searcher object for the given text input.\n\t   *\n\t   * The Searcher object can be attached and used in conjunction with any other widgets in a generic manner. It\n\t   * provides search capabilities and manages the search results. This is useful for MultipleSelects, IntelliSense and\n\t   * other widgets. Here's the HTML for the search results.\n\t   *\n\t   * <pre>\n\t   *   &lt;input type=\"text\" class=\"prime-search-result-input\" value=\"F\"/>\n\t   *   &lt;ul>\n\t   *     &lt;li>Four&lt;/li>\n\t   *     &lt;li>Five&lt;/li>\n\t   *     &lt;li>Fifteen&lt;/li>\n\t   *     &lt;li>Add Custom Entry: F/li>\n\t   *   &lt;/ul>\n\t   * &lt;/div>\n\t   * </pre>\n\t   *\n\t   * The with* methods can be used to setup the configuration for this SearchResults, but here are some defaults:\n\t   *\n\t   * <ul>\n\t   *   <li>closeTimeout = 200</li>\n\t   *   <li>customAddEnabled = true</li>\n\t   *   <li>customAddCallback = function(customValue){return true;}</li>\n\t   *   <li>customAddLabel = \"Add Custom:\"</li>\n\t   *   <li>tooManySearchResultsLabel = \"Too Many Matches For:\"</li>\n\t   *   <li>noSearchResultsLabel = \"No Matches For:\"</li>\n\t   * </ul>\n\t   *\n\t   * The callback object must conform to this interface:\n\t   *\n\t   * <pre>\n\t   *   CallbackObject {\n\t *     void deletedBeyondSearchInput()\n\t *     void doesNotContainValue()\n\t *     object{results:Array, tooManyResults:boolean} search(_searchString:string),\n\t *     void selectSearchResult(selectedSearchResult:string),\n\t *   }\n\t   * </pre>\n\t   *\n\t   * @constructor\n\t   * @param {PrimeElement|Element|EventTarget} inputElement The input element that is used to execute the search.\n\t   * @param {PrimeElement|Element|EventTarget} searchResultsContainer The element that is used to store the search results.\n\t   * @param {*} callbackObject The object that is used to callback for searching and numerous other functions to help\n\t   *            communicate state and determine how to draw the input and search results.\n\t   */\n\t  constructor(inputElement, searchResultsContainer, callbackObject) {\n\t    Utils.bindAll(this);\n\n\t    this.searchResults = PrimeElement.wrap(searchResultsContainer);\n\t    this.inputElement = PrimeElement.wrap(inputElement);\n\t    if (this.inputElement.domElement.tagName !== 'INPUT') {\n\t      throw new TypeError('You can only use Prime.Widgets.SearchResults with INPUT elements');\n\t    }\n\n\t    this._setInitialOptions(callbackObject);\n\t  }\n\n\t  /**\n\t   * A search function that works on a select box.\n\t   *\n\t   * @param searchText {String} The search String.\n\t   * @param select {HTMLSelectElement|PrimeElement} The select box.\n\t   * @returns {{results: Array, tooManyResults: boolean}}\n\t   */\n\t  static selectSearchFunction(searchText, select) {\n\t    const options = PrimeElement.unwrap(select).options;\n\t    const selectableOptions = [];\n\t    for (let i = 0; i < options.length; i++) {\n\t      const option = new PrimeElement(options[i]);\n\t      if (option.isSelected()) {\n\t        continue;\n\t      }\n\n\t      const html = option.getHTML();\n\t      if (searchText === null || searchText === undefined || searchText === '' || html.toLowerCase().indexOf(searchText.toLowerCase()) === 0) {\n\t        selectableOptions.push(html);\n\t      }\n\t    }\n\n\t    // Alphabetize the options\n\t    if (selectableOptions.length > 0) {\n\t      selectableOptions.sort();\n\t    }\n\n\t    return {results: selectableOptions, tooManyResults: false};\n\t  }\n\n\t  /**\n\t   * Closes the search results display, unhighlights any options that are highlighted and resets the input's value to\n\t   * empty string.\n\t   */\n\t  closeSearchResults() {\n\t    this._removeAllSearchResults();\n\t    this.inputElement.setValue('');\n\t    this.searchResults.removeClass('open');\n\t    setTimeout(function() {\n\t      this.searchResults.hide();\n\t      this.resizeInput();\n\t    }.bind(this), this.options.closeTimeout);\n\t  }\n\n\t  /**\n\t   * Removes all of the event listeners from the input element.\n\t   */\n\t  destroy() {\n\t    this.inputElement\n\t        .removeEventListener('blur', this._handleBlurEvent)\n\t        .removeEventListener('click', this._handleClickEvent)\n\t        .removeEventListener('keyup', this._handleKeyUpEvent)\n\t        .removeEventListener('keydown', this._handleKeyDownEvent)\n\t        .removeEventListener('focus', this._handleFocusEvent);\n\t  }\n\n\t  focus() {\n\t    this.inputElement.focus();\n\t  }\n\n\t  /**\n\t   * @returns {PrimeElement} The highlighted search result or null.\n\t   */\n\t  getHighlightedSearchResult() {\n\t    return this.searchResults.queryFirst('.selected');\n\t  }\n\n\t  /**\n\t   * Highlights the next search result if one is highlighted. If there isn't a highlighted search result, this\n\t   * highlights the first one. This method handles wrapping.\n\t   *\n\t   * @returns {Searcher} This Searcher.\n\t   */\n\t  highlightNextSearchResult() {\n\t    let searchResult = this.getHighlightedSearchResult();\n\t    if (searchResult !== null) {\n\t      searchResult = searchResult.getNextSibling();\n\t    }\n\n\t    // Grab the first search result in the list if there isn't a next sibling\n\t    if (searchResult === null) {\n\t      searchResult = this.searchResults.queryFirst('.search-result');\n\t    }\n\n\t    if (searchResult !== null) {\n\t      this.highlightSearchResult(searchResult);\n\t    }\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Highlights the previous search result if one is highlighted. If there isn't a highlighted search result, this\n\t   * selects the last one. This method handles wrapping.\n\t   *\n\t   * @returns {Searcher} This Searcher.\n\t   */\n\t  highlightPreviousSearchResult() {\n\t    let searchResult = this.getHighlightedSearchResult();\n\t    if (searchResult !== null) {\n\t      searchResult = searchResult.getPreviousSibling();\n\t    }\n\n\t    if (searchResult === null) {\n\t      searchResult = this.searchResults.queryFirst('.search-result');\n\t    }\n\n\t    if (searchResult !== null) {\n\t      this.highlightSearchResult(searchResult);\n\t    }\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Highlights the given search result.\n\t   *\n\t   * @param {PrimeElement} searchResult The search result to highlight.\n\t   * @returns {Searcher} This Searcher.\n\t   */\n\t  highlightSearchResult(searchResult) {\n\t    this.searchResults.getChildren().removeClass('selected');\n\n\t    searchResult.addClass('selected');\n\t    const scrollTop = this.searchResults.getScrollTop();\n\t    const height = this.searchResults.getHeight();\n\t    const searchResultOffset = searchResult.getOffsetTop();\n\t    if (searchResultOffset + 1 >= scrollTop + height) {\n\t      this.searchResults.scrollTo(searchResult.getOffsetTop() - this.searchResults.getHeight() + searchResult.getOuterHeight());\n\t    } else if (searchResultOffset < scrollTop) {\n\t      this.searchResults.scrollTo(searchResultOffset);\n\t    }\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Initializes the Searcher by setting up the event listeners and closing the search result element.\n\t   *\n\t   * @returns {Searcher} This.\n\t   */\n\t  initialize() {\n\t    this.inputElement\n\t        .addEventListener('blur', this._handleBlurEvent)\n\t        .addEventListener('click', this._handleClickEvent)\n\t        .addEventListener('keyup', this._handleKeyUpEvent)\n\t        .addEventListener('keydown', this._handleKeyDownEvent)\n\t        .addEventListener('focus', this._handleFocusEvent);\n\n\t    this.closeSearchResults();\n\t    return this;\n\t  }\n\n\t  /**\n\t   * @returns {boolean} True if the search results add custom option is being displayed currently.\n\t   */\n\t  isCustomAddVisible() {\n\t    return this.searchResults.queryFirst('.custom-add') !== null;\n\t  }\n\n\t  /**\n\t   * @returns {boolean} True if any search results are being displayed currently.\n\t   */\n\t  isSearchResultsVisible() {\n\t    return this.searchResults.hasClass('open');\n\t  }\n\n\t  /**\n\t   * Poor mans resizing of the input field as the user types into it.\n\t   */\n\t  resizeInput() {\n\t    const text = this.inputElement.getValue() === '' ? this.inputElement.getAttribute('placeholder') : this.inputElement.getValue();\n\t    const newLength = Utils.calculateTextLength(this.inputElement, text) + 35;\n\t    this.inputElement.setWidth(newLength);\n\t  }\n\n\t  /**\n\t   * Executes a search by optionally updating the input to the given value (if specified) and then rebuilding the search\n\t   * results using the input's value. This method also puts focus on the input and shows the search results (in case\n\t   * they are hidden for any reason).\n\t   *\n\t   * @param {string} [searchText] The text to search for (this value is also set into the input box). If this is not\n\t   * specified then the search is run using the input's value.\n\t   * @returns {Searcher} This Searcher.\n\t   */\n\t  search(searchText) {\n\t    // Set the search text into the input box if it is different and then lowercase it\n\t    if (Utils.isDefined(searchText) && this.inputElement.getValue() !== searchText) {\n\t      this.inputElement.setValue(searchText);\n\t    }\n\n\t    searchText = Utils.isDefined(searchText) ? searchText.toLowerCase() : this.inputElement.getValue();\n\t    this.resizeInput();\n\n\t    // Clear the search results (if there are any)\n\t    this._removeAllSearchResults();\n\n\t    // Call the callback\n\t    const searchResults = this.options.callbackObject.search(searchText);\n\t    if (!searchResults.hasOwnProperty('results') || !searchResults.hasOwnProperty('tooManyResults')) {\n\t      throw new TypeError('The callback must return an Object that contains the properties results[Array] and tooManyResults[boolean]');\n\t    }\n\n\t    let count = 0;\n\t    let matchingSearchResultElement = null;\n\t    for (let i = 0; i < searchResults.results.length; i++) {\n\t      const searchResult = searchResults.results[i];\n\t      const element = PrimeDocument.newElement('<li/>')\n\t          .addClass('search-result')\n\t          .setAttribute('value', searchResult)\n\t          .setHTML(searchResult)\n\t          .addEventListener('click', this._handleClickEvent)\n\t          .addEventListener('mouseover', this._handleMouseOverEvent)\n\t          .appendTo(this.searchResults);\n\t      if (searchResult.toLowerCase().trim() === searchText.toLowerCase().trim()) {\n\t        matchingSearchResultElement = element;\n\t      }\n\n\t      count++;\n\t    }\n\n\t    // Show the custom add option if necessary\n\t    const trimmedLength = searchText.trim().length;\n\t    if (this.options.customAddEnabled && trimmedLength !== 0 && matchingSearchResultElement === null\n\t        && (!('doesNotContainValue' in this.options.callbackObject) || this.options.callbackObject.doesNotContainValue(searchText))) {\n\t      matchingSearchResultElement = PrimeDocument.newElement('<li/>')\n\t          .addClass('custom-add')\n\t          .addEventListener('click', this._handleClickEvent)\n\t          .addEventListener('mouseover', this._handleMouseOverEvent)\n\t          .setHTML(this.options.customAddLabel + Utils.escapeHTML(searchText))\n\t          .appendTo(this.searchResults);\n\t      count++;\n\t    }\n\n\t    if (count === 0 && trimmedLength !== 0) {\n\t      PrimeDocument.newElement('<li/>')\n\t          .addClass('no-search-results')\n\t          .setHTML(this.options.noSearchResultsLabel + Utils.escapeHTML(searchText))\n\t          .appendTo(this.searchResults);\n\t      count++;\n\t    }\n\n\t    // Handle too many results\n\t    if (searchResults.tooManyResults) {\n\t      PrimeDocument.newElement('<li/>')\n\t          .addClass('too-many-search-results')\n\t          .setHTML(this.options.tooManySearchResultsLabel + Utils.escapeHTML(searchText))\n\t          .appendTo(this.searchResults);\n\t      count++;\n\t    }\n\n\t    if (count !== 0) {\n\t      this.searchResults.show();\n\t      this.searchResults.addClass('open');\n\n\t      if (count >= 10) {\n\t        this.searchResults.setHeight(this.searchResults.getChildren()[0].getOuterHeight() * 10 + 1);\n\t      } else {\n\t        this.searchResults.setHeight(this.searchResults.getChildren()[0].getOuterHeight() * count + 1);\n\t      }\n\t    } else {\n\t      this.closeSearchResults();\n\t    }\n\n\t    if (matchingSearchResultElement !== null) {\n\t      this.highlightSearchResult(matchingSearchResultElement);\n\t    }\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Selects the highlighted search result unless there isn't one highlighted, in which case, this does nothing.\n\t   *\n\t   * @returns {Searcher} This Searcher.\n\t   */\n\t  selectHighlightedSearchResult() {\n\t    const searchResult = this.getHighlightedSearchResult();\n\t    if (searchResult === null) {\n\t      return this;\n\t    }\n\n\t    const custom = searchResult.hasClass('custom-add');\n\t    const value = (custom) ? this.inputElement.getValue().trim() : searchResult.getHTML();\n\t    if (custom) {\n\t      // The client of this searcher needs to warn the user.\n\t      if (!this.options.customAddCallback(value)) {\n\t        return this;\n\t      }\n\t    }\n\n\t    this.options.callbackObject.selectSearchResult(value);\n\t    this.closeSearchResults();\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the timeout used in the close method to allow for transitions.\n\t   *\n\t   * @param timeout {int} The timeout.\n\t   * @returns {Searcher} This.\n\t   */\n\t  withCloseTimeout(timeout) {\n\t    this.options.closeTimeout = timeout;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets whether or not this Searcher allows custom options to be added.\n\t   *\n\t   * @param {boolean} enabled The flag.\n\t   * @returns {Searcher} This Searcher.\n\t   */\n\t  withCustomAddEnabled(enabled) {\n\t    this.options.customAddEnabled = enabled;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets whether or not this Searcher allows custom options to be added.\n\t   *\n\t   * @param {Function} callback The function to call that will return true if the custom option can be added.\n\t   * @returns {Searcher} This Searcher.\n\t   */\n\t  withCustomAddCallback(callback) {\n\t    this.options.customAddCallback = callback;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the label used when custom options are added.\n\t   *\n\t   * @param {string} customAddLabel The label.\n\t   * @returns {Searcher} This Searcher.\n\t   */\n\t  withCustomAddLabel(customAddLabel) {\n\t    this.options.customAddLabel = customAddLabel;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Set more than one option at a time by providing a map of key value pairs. This is considered an advanced\n\t   * method to set options on the widget. The caller needs to know what properties are valid in the options object.\n\t   *\n\t   * @param {Object} options Key value pair of configuration options.\n\t   * @returns {Searcher} This.\n\t   */\n\t  withOptions(options) {\n\t    if (!Utils.isDefined(options)) {\n\t      return this;\n\t    }\n\n\t    for (let option in options) {\n\t      if (options.hasOwnProperty(option)) {\n\t        this.options[option] = options[option];\n\t      }\n\t    }\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the label that is printed when there are no search results.\n\t   *\n\t   * @param {string} noSearchResultsLabel The label text.\n\t   * @returns {Searcher} This Searcher.\n\t   */\n\t  withNoSearchResultsLabel(noSearchResultsLabel) {\n\t    this.options.noSearchResultsLabel = noSearchResultsLabel;\n\t    return this;\n\t  }\n\n\t  /* ===================================================================================================================\n\t   * Private methods\n\t   * ===================================================================================================================*/\n\n\t  /**\n\t   * Sets the label that is printed when there are too many search results.\n\t   *\n\t   * @param {string} tooManySearchResultsLabel The label text.\n\t   * @returns {Searcher} This Searcher.\n\t   */\n\t  withTooManySearchResultsLabel(tooManySearchResultsLabel) {\n\t    this.options.tooManySearchResultsLabel = tooManySearchResultsLabel;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Handles the blur event when the input goes out of focus.\n\t   *\n\t   * @private\n\t   */\n\t  _handleBlurEvent() {\n\t    window.setTimeout((function() {\n\t      if (document.activeElement !== this.inputElement.domElement) {\n\t        this.closeSearchResults();\n\t      }\n\t    }).bind(this), 300);\n\t  }\n\n\t  /**\n\t   * Handles all click events sent to the Searcher.\n\t   *\n\t   * @param {Event} event The mouse event.\n\t   * @private\n\t   */\n\t  _handleClickEvent(event) {\n\t    const target = new PrimeElement(event.currentTarget);\n\t    if (target.hasClass('custom-add') || target.hasClass('search-result')) {\n\t      this.selectHighlightedSearchResult();\n\t    } else if (target.domElement === this.inputElement.domElement) {\n\t      this.search();\n\t    } else {\n\t      console.log('Clicked something else target=[' + event.target + '] currentTarget=[' + event.currentTarget + ']');\n\t    }\n\t  }\n\n\t  /**\n\t   * Handles when the input field is focused by opening the search results.\n\t   *\n\t   * @private\n\t   */\n\t  _handleFocusEvent() {\n\t    this.search();\n\t  }\n\n\t  /**\n\t   * Handles the key down events that should not be propagated.\n\t   *\n\t   * @param {KeyboardEvent} event The keyboard event object.\n\t   * @private\n\t   */\n\t  _handleKeyDownEvent(event) {\n\t    const key = event.keyCode;\n\t    if (key === Events.Keys.BACKSPACE) {\n\t      this.previousSearchString = this.inputElement.getValue();\n\t    } else if (key === Events.Keys.UP_ARROW) {\n\t      Utils.stopEvent(event);\n\t      this.highlightPreviousSearchResult();\n\t    } else if (key === Events.Keys.DOWN_ARROW) {\n\t      Utils.stopEvent(event);\n\t      if (this.isSearchResultsVisible()) {\n\t        this.highlightNextSearchResult();\n\t      } else {\n\t        this.search();\n\t      }\n\t    } else if (key === Events.Keys.ENTER) {\n\t      Utils.stopEvent(event); // Don't bubble enter otherwise the form submits\n\t    }\n\t  }\n\n\t  /**\n\t   * Handles all key up events sent to the search results container.\n\t   *\n\t   * @param {KeyboardEvent} event The keyboard event object.\n\t   *  @private\n\t   */\n\t  _handleKeyUpEvent(event) {\n\t    const key = event.keyCode;\n\t    const value = this.inputElement.getValue();\n\n\t    if (key === Events.Keys.BACKSPACE) {\n\t      if (value === '' && this.previousSearchString === '') {\n\t        this.options.callbackObject.deletedBeyondSearchInput();\n\t      } else {\n\t        this.search();\n\t      }\n\t    } else if (key === Events.Keys.ENTER) {\n\t      Utils.stopEvent(event);\n\t      // If a search result is highlighted, add it\n\t      if (this.getHighlightedSearchResult() !== null) {\n\t        this.selectHighlightedSearchResult();\n\t      }\n\t    } else if (key === Events.Keys.ESCAPE) {\n\t      this.closeSearchResults();\n\t    } else if (key === Events.Keys.SPACE || key === Events.Keys.DELETE ||\n\t        (key >= 48 && key <= 90) || (key >= 96 && key <= 111) || (key >= 186 && key <= 192) || (key >= 219 && key <= 222)) {\n\t      this.search();\n\t    }\n\t  }\n\n\t  /**\n\t   * Handles mouseover events for the search results (only) by highlighting the event target.\n\t   *\n\t   * @param {Event} event The mouseover event.\n\t   * @private\n\t   */\n\t  _handleMouseOverEvent(event) {\n\t    const target = new PrimeElement(event.currentTarget);\n\t    this.highlightSearchResult(target);\n\t  }\n\n\t  /**\n\t   * Removes all of the search results.\n\t   *\n\t   * @private\n\t   */\n\t  _removeAllSearchResults() {\n\t    this.searchResults.query('li').removeAllFromDOM();\n\t  }\n\n\t  /* ===================================================================================================================\n\t   * Search function implementations.\n\t   * ===================================================================================================================*/\n\n\t  /**\n\t   * Set the initial options for this widget.\n\t   * @private\n\t   */\n\t  _setInitialOptions(callbackObject) {\n\t    // Defaults\n\t    this.options = {\n\t      callbackObject: callbackObject,\n\t      closeTimeout: 200,\n\t      customAddEnabled: true,\n\t      'customAddCallback'() {\n\t        return true;\n\t      },\n\t      customAddLabel: 'Add Custom: ',\n\t      noSearchResultsLabel: 'No Matches For: ',\n\t      tooManySearchResultsLabel: 'Too Many Matches For: ',\n\t    };\n\n\t    const userOptions = Utils.dataSetToOptions(this.inputElement);\n\t    for (let option in userOptions) {\n\t      if (userOptions.hasOwnProperty(option)) {\n\t        this.options[option] = userOptions[option];\n\t      }\n\t    }\n\t  }\n\t}\n\n\t/*\n\t * Copyright (c) 2017, Inversoft Inc., All Rights Reserved\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n\t * either express or implied. See the License for the specific\n\t * language governing permissions and limitations under the License.\n\t */\n\n\tlet count = 1;\n\tlet AddOptionEvent = 'MultipleSelect:addOption';\n\tlet DeselectOptionEvent = 'MultipleSelect:deselectOption';\n\tlet SelectOptionEvent = 'MultipleSelect:selectOption';\n\n\tclass MultipleSelect {\n\t  /**\n\t   * Constructs a MultipleSelect object for the given element.\n\t   *\n\t   * The MultipleSelect generates a number of different HTML elements directly after the SELECT element you pass to the\n\t   * constructor. A fully rendered MultipleSelect might look something like this:\n\t   *\n\t   * <pre>\n\t   * &lt;select id=\"foo\">\n\t   *   &lt;option value=\"one\">One&lt;/option>\n\t   *   &lt;option value=\"two\">Two&lt;/option>\n\t   *   &lt;option value=\"three\">Three&lt;/option>\n\t   * &lt;/select>\n\t   * &lt;div id=\"foo-display\" class=\"prime-multiple-select\">\n\t   *   &lt;ul id=\"foo-option-list\" class=\"option-list\">\n\t   *     &lt;li id=\"foo-option-one\">&lt;span>One&lt;/span>&lt;a href=\"#\">X&lt;/a>&lt;/li>\n\t   *     &lt;li id=\"foo-option-two\">&lt;span>Two&lt;/span>&lt;a href=\"#\">X&lt;/a>&lt;/li>\n\t   *     &lt;li id=\"foo-option-three\">&lt;span>Three&lt;/span>&lt;a href=\"#\">X&lt;/a>&lt;/li>\n\t   *     &lt;li>&lt;input type=\"text\" value=\"aaa\"/>&lt;/li>\n\t   *   &lt;/ul>\n\t   *   &lt;ul class=\"search-results\">\n\t   *     &lt;li>One&lt;/li>\n\t   *     &lt;li>Two&lt;/li>\n\t   *     &lt;li>Three&lt;/li>\n\t   *     &lt;li>Add Custom Entry: aaa/li>\n\t   *   &lt;/ul>\n\t   * &lt;/div>\n\t   * </pore>\n\t   *\n\t   * The with* methods can be used to setup the configuration for this MultipleSelect, but here are some defaults:\n\t   *\n\t   * <ul>\n\t   *   <li>placeholder = \"Choose\"</li>\n\t   *   <li>customAddEnabled = true</li>\n\t   *   <li>customAddLabel = \"Add Custom Value:\"</li>\n\t   *   <li>noSearchResultsLabel = \"No Matches For:\"</li>\n\t   * </ul>\n\t   *\n\t   * @constructor\n\t   * @param {PrimeElement|Element|EventTarget} element The Prime Element for the MultipleSelect.\n\t   */\n\t  constructor(element) {\n\t    Utils.bindAll(this);\n\t    this.initialized = false;\n\n\t    this.element = PrimeElement.wrap(element);\n\t    if (this.element.domElement.tagName !== 'SELECT') {\n\t      throw new TypeError('You can only use MultipleSelect with select elements');\n\t    }\n\n\t    if (this.element.getAttribute('multiple') !== 'multiple') {\n\t      throw new TypeError('The select box you are attempting to convert to a MultipleSelect must have the multiple=\"multiple\" attribute set');\n\t    }\n\n\t    this._setInitialOptions();\n\t  }\n\n\t  /*\n\t   * Statics\n\t   */\n\t  /**\n\t   * @returns {number}\n\t   */\n\t  static get count() {\n\t    return count;\n\t  }\n\n\t  /**\n\t   * @param {number} value\n\t   */\n\t  static set count(value) {\n\t    count = value;\n\t  }\n\n\t  /**\n\t   * @returns {string}\n\t   */\n\t  static get AddOptionEvent() {\n\t    return AddOptionEvent;\n\t  }\n\n\t  /**\n\t   * @param {string} value\n\t   */\n\t  static set AddOptionEvent(value) {\n\t    AddOptionEvent = value;\n\t  }\n\n\t  /**\n\t   * @returns {string}\n\t   */\n\t  static get DeselectOptionEvent() {\n\t    return DeselectOptionEvent;\n\t  }\n\n\t  /**\n\t   * @param {string} value\n\t   */\n\t  static set DeselectOptionEvent(value) {\n\t    DeselectOptionEvent = value;\n\t  }\n\n\t  /**\n\t   * @returns {string}\n\t   */\n\t  static get SelectOptionEvent() {\n\t    return SelectOptionEvent;\n\t  }\n\n\t  /**\n\t   * @param {string} value\n\t   */\n\t  static set SelectOptionEvent(value) {\n\t    SelectOptionEvent = value;\n\t  }\n\n\t  /**\n\t   * Finds the HTMLSelectOption with the given id and returns it wrapped in a PrimeElement.\n\t   *\n\t   * @param {String} id\n\t   * @returns {PrimeElement}\n\t   */\n\t  static findOptionWithId(id) {\n\t    return PrimeDocument.queryFirst('[data-option-id=\"' + id + '\"]');\n\t  }\n\n\t  /**\n\t   * Pass through to add event listeners to This. The custom events that this MultipleSelect fires are:\n\t   *\n\t   *  'MultipleSelect:deselectOption'\n\t   *  'MultipleSelect:selectOption'\n\t   *  'MultipleSelect:addOption'\n\t   *\n\t   * @param {string} event The name of the event.\n\t   * @param {Function} listener The listener function.\n\t   * @returns {MultipleSelect} This.\n\t   */\n\t  addEventListener(event, listener) {\n\t    this.element.addEventListener(event, listener);\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Determines if this MultipleSelect contains an option with the given value.\n\t   *\n\t   * @param {String} value The value to look for.\n\t   */\n\t  containsOptionWithValue(value) {\n\t    return this.findOptionWithValue(value) !== null;\n\t  }\n\n\t  /**\n\t   * Adds the given option to this select. The option will not be selected.\n\t   *\n\t   * @param {String} value The value for the option.\n\t   * @param {String} display The display text for the option.\n\t   * @param {?String} [id] The id of the element. (Defaults to null)\n\t   * @returns {MultipleSelect} This.\n\t   */\n\t  addOption(value, display, id) {\n\t    if ((id === null || id === undefined) && this.containsOptionWithValue(value)) {\n\t      return this;\n\t    }\n\n\t    let element = PrimeDocument.newElement('<option/>')\n\t        .setValue(value)\n\t        .setHTML(display)\n\t        .appendTo(this.element);\n\n\t    if (id) {\n\t      element.setDataAttribute(\"optionId\", id);\n\t    }\n\n\t    // Fire the custom event\n\t    this.element.fireEvent(MultipleSelect.AddOptionEvent, value, this);\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Deselects the option with the given value by removing the selected attribute from the option in the select box and\n\t   * removing the option from the display container. If the MultipleSelect doesn't contain an option for the given value,\n\t   * this method throws an exception.\n\t   *\n\t   * @param {String} value The value to look for.\n\t   * @returns {MultipleSelect} This.\n\t   */\n\t  deselectOptionWithValue(value) {\n\t    const option = this.findOptionWithValue(value);\n\t    if (option === null) {\n\t      throw new Error('MultipleSelect doesn\\'t contain an option with the value [' + value + ']');\n\t    }\n\n\t    this.deselectOption(option);\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Deselects the option with the given value by removing the selected attribute from the option in the select box and\n\t   * removing the option from the display container.\n\t   *\n\t   * @param {PrimeElement} option The option to deselect.\n\t   * @returns {MultipleSelect} This.\n\t   */\n\t  deselectOption(option) {\n\t    option.setSelected(false);\n\n\t    const id = option.getDataAttribute('optionId') || this._makeOptionID(option);\n\t    const displayOption = PrimeDocument.queryById(id);\n\t    if (displayOption !== null) {\n\t      displayOption.removeFromDOM();\n\t    }\n\n\t    // If there are no selected options left, add back the placeholder attribute to the input and resize it\n\t    if (this.optionList.query('li').length === 1) {\n\t      this.input.setAttribute('placeholder', this.options.placeholder);\n\t      this.searcher.resizeInput();\n\t    }\n\n\t    // Fire the custom event\n\t    this.element.fireEvent(MultipleSelect.DeselectOptionEvent, option.getValue(), this);\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Destroys the widget completely.\n\t   */\n\t  destroy() {\n\t    this.element.show();\n\t    this.displayContainer.removeFromDOM();\n\t  }\n\n\t  /**\n\t   * Finds the HTMLSelectOption with the given text and returns it wrapped in a PrimeElement.\n\t   *\n\t   * @param {String} text The text to look for.\n\t   * @returns {PrimeElement} The option element or null.\n\t   */\n\t  findOptionWithText(text) {\n\t    const options = this.element.getOptions();\n\t    for (let i = 0; i < options.length; i++) {\n\t      if (options[i].getTextContent() === text) {\n\t        return options[i];\n\t      }\n\t    }\n\n\t    return null;\n\t  }\n\n\t  deselectOptionWithId(id) {\n\t    const option = MultipleSelect.findOptionWithId(id);\n\t    if (option === null) {\n\t      throw new Error('MultipleSelect doesn\\'t contain an option with the id [' + id + ']');\n\t    }\n\n\t    this.deselectOption(option);\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Finds the HTMLSelectOption with the given value and returns it wrapped in a PrimeElement.\n\t   *\n\t   * @param {String} value The value to look for.\n\t   * @returns {PrimeElement} The option element or null.\n\t   */\n\t  findOptionWithValue(value) {\n\t    for (let i = 0; i < this.element.domElement.length; i++) {\n\t      const cur = this.element.domElement.options[i];\n\t      if (cur.value === value) {\n\t        return new PrimeElement(cur);\n\t      }\n\t    }\n\n\t    return null;\n\t  }\n\n\t  /**\n\t   * @returns {string[]} The currently selected options values.\n\t   */\n\t  getSelectedValues() {\n\t    return this.element.getSelectedValues();\n\t  }\n\n\t  /**\n\t   * Determines if the MultipleSelect contains an option with the given value.\n\t   *\n\t   * @param {string} value The value.\n\t   * @returns {boolean} True if the MultipleSelect contains an option with the given value, false otherwise.\n\t   */\n\t  hasOptionWithValue(value) {\n\t    return this.findOptionWithValue(value) !== null;\n\t  }\n\n\t  /**\n\t   * Highlights the final selected option (if there is one) to indicate that it will be unselected if the user clicks\n\t   * the delete key again.\n\t   *\n\t   * @returns {MultipleSelect} This.\n\t   */\n\t  highlightOptionForUnselect() {\n\t    const options = this.optionList.getChildren();\n\t    if (options.length > 1) {\n\t      options[options.length - 2].addClass('selected');\n\t    }\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Initializes the display from the underlying select element. All of the current display options (li elements) are\n\t   * removed. New display options are added for each selected option in the select box.\n\t   *\n\t   * @returns {MultipleSelect} This.\n\t   */\n\t  initialize() {\n\t    this.element.hide();\n\n\t    let id = this.element.getId();\n\t    if (id === null || id === '') {\n\t      id = 'prime-multiple-select' + MultipleSelect.count++;\n\t      this.element.setId(id);\n\t    }\n\n\t    this.displayContainer = PrimeDocument.queryById(id + '-display');\n\t    this.input = null;\n\t    if (this.displayContainer === null) {\n\t      this.displayContainer = PrimeDocument.newElement('<div/>')\n\t          .setId(id + '-display')\n\t          .addClass(this.options.className)\n\t          .addEventListener('click', this._handleClickEvent)\n\t          .addEventListener('keyup', this._handleKeyUpEvent)\n\t          .insertAfter(this.element);\n\n\t      this.optionList = PrimeDocument.newElement('<ul/>')\n\t          .addClass('option-list')\n\t          .appendTo(this.displayContainer);\n\n\t      this.searchResults = PrimeDocument.newElement('<ul/>')\n\t          .addClass('search-results')\n\t          .hide()\n\t          .appendTo(this.displayContainer);\n\t    } else {\n\t      this.displayContainer\n\t          .removeAllEventListeners()\n\t          .addEventListener('click', this._handleClickEvent)\n\t          .addEventListener('keyup', this._handleKeyUpEvent);\n\t      this.optionList = this.displayContainer.queryFirst('.option-list');\n\t      this.searchResults = this.displayContainer.queryFirst('.search-results');\n\t    }\n\n\t    PrimeDocument.queryFirst('html').addEventListener('click', this._handleGlobalClickEvent);\n\n\t    // Close the search\n\t    this.searchResults.hide();\n\t    this._redraw();\n\n\t    // When the caller specified a selected order, process all selected options to honor the requested order.\n\t    // - Do this after redraw to ensure that we don't modify the order of the display container.\n\t    // - Currently we only honor the requested order if the option is already selected.\n\t    if (this.options.initialSelectedOrder.length > 0) {\n\t      for (let i = 0; i < this.options.initialSelectedOrder.length; i++) {\n\t        const actual = this.element.queryFirst('option[value=' + this.options.initialSelectedOrder[i] + ']');\n\t        if (actual !== null && actual.isSelected()) {\n\t          this.selectOption(actual);\n\t        }\n\t      }\n\t    }\n\n\t    this.initialized = true;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * @returns {boolean} True if the last option is highlighted for unselect.\n\t   */\n\t  isLastOptionHighlightedForUnselect() {\n\t    const options = this.optionList.getChildren();\n\t    return options.length > 1 && options[options.length - 2].hasClass('selected');\n\t  }\n\n\t  /**\n\t   * Removes all of the options from the MultipleSelect.\n\t   *\n\t   * @returns {MultipleSelect} This.\n\t   */\n\t  removeAllOptions() {\n\t    // Remove in reverse order because the options array is dynamically updated when elements are deleted from the DOM\n\t    const options = this.element.domElement.options;\n\t    for (let i = options.length - 1; i >= 0; i--) {\n\t      this.removeOption(new PrimeElement(options[i]));\n\t    }\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Removes the highlighted option.\n\t   */\n\t  removeHighlightedOption() {\n\t    const options = this.optionList.getChildren();\n\t    if (this.options.allowDuplicates) {\n\t      this.deselectOptionWithId(options[options.length - 2].getId());\n\t    } else {\n\t      this.deselectOptionWithValue(options[options.length - 2].getAttribute('value'));\n\t    }\n\t    this.search();\n\t  }\n\n\t  /**\n\t   * Removes the given option from the MultipleSelect by removing the option in the select box and the option in the\n\t   * display container.\n\t   *\n\t   * @param {PrimeElement} option The option to remove.\n\t   * @returns {MultipleSelect} This.\n\t   */\n\t  removeOption(option) {\n\t    if (!(option instanceof PrimeElement)) {\n\t      throw new TypeError('MultipleSelect#removeOption only takes PrimeElement instances');\n\t    }\n\n\t    option.removeFromDOM();\n\n\t    let id, displayOption;\n\t    if (this.options.allowDuplicates) {\n\t      // The ids are random so we need to get the data attribute.\n\t      id = option.getDataAttribute('optionId');\n\t      displayOption = PrimeDocument.queryById(id);\n\t    } else {\n\t      // The ids aren't random and can be reproducably created.\n\t      id = this._makeOptionID(option);\n\t      displayOption = PrimeDocument.queryById(id);\n\t    }\n\n\t    // Check if the option has already been selected\n\t    if (displayOption !== null) {\n\t      displayOption.removeFromDOM();\n\t    }\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Removes the option with the given value from the MultipleSelect by removing the option in the select box and the\n\t   * option in the display container. If the MultipleSelect doesn't contain an option with the given value, this throws\n\t   * an exception.\n\t   *\n\t   * @param {string} value The value of the option to remove.\n\t   * @returns {MultipleSelect} This.\n\t   */\n\t  removeOptionWithValue(value) {\n\t    const option = this.findOptionWithValue(value);\n\t    if (option === null) {\n\t      throw new Error('MultipleSelect doesn\\'t contain an option with the value [' + value + ']');\n\t    }\n\n\t    this.removeOption(option);\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Selects the given option by setting the selected attribute on the option in the select box (the object passed in is\n\t   * the option from the select box wrapped in a PrimeElement) and adding it to the display container. If the\n\t   * option is already in the display container, that step is skipped.\n\t   *\n\t   * @param {PrimeElement} option The option object from the select box wrapped in a PrimeElement instance.\n\t   * @returns {MultipleSelect} This.\n\t   */\n\t  selectOption(option) {\n\t    if (!(option instanceof PrimeElement)) {\n\t      throw new TypeError('MultipleSelect#selectOption only takes PrimeElement instances');\n\t    }\n\n\t    const id = this._makeOptionID(option);\n\t    let displayOption = PrimeDocument.queryById(id);\n\n\t    // Move the option if configured, and if already displayed remove it and add it again to get the correct order.\n\t    const moveDuringInitialization = !this.initialized && this.options.initialSelectedOrder.length > 0;\n\t    if (this.options.preserveDisplayedSelectionOrder || moveDuringInitialization) {\n\t      const parent =  option.getParent();\n\t      const lastOption = parent.getLastChild('option');\n\t      if (option.getValue() !== lastOption.getValue()) {\n\t        option.removeFromDOM();\n\t        option.appendTo(parent);\n\t        // If we moved the option, and we already have a display option, delete it so that we can rebuild it.\n\t        if (displayOption !== null) {\n\t          displayOption.removeFromDOM();\n\t          displayOption = null;\n\t        }\n\t      }\n\t    }\n\n\t    // Check if the option has already been selected\n\t    if (displayOption === null) {\n\t      /*\n\t      If we allow dupes, always duplicate the option and append it to the end or the order will be a problem. The default multiselect doesn't support order)\n\t       */\n\t      if (this.options.allowDuplicates) {\n\t        this.addOption(option.getValue(), option.getHTML(), id);\n\t        option = MultipleSelect.findOptionWithId(id);\n\t      }\n\t      option.setSelected(true);\n\n\t      const li = PrimeDocument.newElement('<li/>')\n\t          .setAttribute('value', option.getValue())\n\t          .setId(id)\n\t          .insertBefore(this.inputOption);\n\t      PrimeDocument.newElement('<span/>')\n\t          .setHTML(option.getHTML())\n\t          .setAttribute('value', option.getValue())\n\t          .appendTo(li);\n\t      PrimeDocument.newElement('<a/>')\n\t          .setAttribute('href', '#')\n\t          .setAttribute('value', option.getValue())\n\t          .setHTML(this.options.removeIcon)\n\t          .addEventListener('click', this._handleClickEvent)\n\t          .appendTo(li);\n\t    }\n\n\t    // Remove the placeholder attribute on the input and resize it\n\t    this.input.removeAttribute('placeholder');\n\n\t    // Close the search results and resize the input\n\t    this.searcher.closeSearchResults();\n\n\t    // Scroll the display to the bottom\n\t    this.optionList.scrollToBottom();\n\n\t    // Fire the custom event\n\t    this.element.fireEvent(MultipleSelect.SelectOptionEvent, option.getValue(), this);\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Selects the option with the given value by setting the selected attribute on the option in the select box (the\n\t   * object passed in is the option from the select box wrapped in a PrimeElement) and adding it to the display\n\t   * container. If the option is already in the display container, that step is skipped.\n\t   * <p/>\n\t   * If there isn't an option with the given value, this throws an exception.\n\t   *\n\t   * @param {String} value The value of the option to select.\n\t   * @returns {MultipleSelect} This.\n\t   */\n\t  selectOptionWithValue(value) {\n\t    const option = this.findOptionWithValue(value);\n\t    if (option === null) {\n\t      throw new Error('MultipleSelect doesn\\'t contain an option with the value [' + value + ']');\n\t    }\n\n\t    this.selectOption(option);\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the selected options. This mimics the function on Element to provide consistency.\n\t   *\n\t   * @param {string[]} [arguments] The list of options to select based on their values.\n\t   * @returns {MultipleSelect} This.\n\t   */\n\t  setSelectedValues() {\n\t    this.element.setSelectedValues.apply(this.element, arguments);\n\t    this._redraw();\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Unhighlights the last option if it is highlighted.\n\t   *\n\t   * @returns {MultipleSelect} This.\n\t   */\n\t  unhighlightOptionForUnselect() {\n\t    this.optionList.getChildren().each(function(element) {\n\t      element.removeClass('selected');\n\t    });\n\t    return this;\n\t  }\n\n\t  withAllowDuplicates(value) {\n\t    this.options.allowDuplicates = value;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the class name for the MultipleSelect element.\n\t   *\n\t   * @param className {string} The class name.\n\t   * @returns {MultipleSelect} This.\n\t   */\n\t  withClassName(className) {\n\t    this.options.className = className;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the timeout used in the close method to allow for transitions.\n\t   *\n\t   * @param timeout {int} The timeout.\n\t   * @returns {MultipleSelect} This.\n\t   */\n\t  withCloseTimeout(timeout) {\n\t    this.options.closeTimeout = timeout;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets whether or not this MultipleSelect allows custom options to be added.\n\t   *\n\t   * @param {boolean} enabled The flag.\n\t   * @returns {MultipleSelect} This.\n\t   */\n\t  withCustomAddEnabled(enabled) {\n\t    this.options.customAddEnabled = enabled;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the label used when custom options are added.\n\t   *\n\t   * @param {string} customAddLabel The label.\n\t   * @returns {MultipleSelect} This.\n\t   */\n\t  withCustomAddLabel(customAddLabel) {\n\t    this.options.customAddLabel = customAddLabel;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Enable error class handling. When this option is used, if the specified error class is found on any element\n\t   * in the tab content the same error class will be added to the tab to identify the tab contains errors.\n\t   *\n\t   * @returns {MultipleSelect} This.\n\t   */\n\t  withErrorClassHandling(errorClass) {\n\t    this.options.errorClass = errorClass;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the label that is printed when there are no search results. This must be called before render is called.\n\t   *\n\t   * @param {string} noSearchResultsLabel The label text.\n\t   * @returns {MultipleSelect} This.\n\t   */\n\t  withNoSearchResultsLabel(noSearchResultsLabel) {\n\t    this.options.noSearchResultsLabel = noSearchResultsLabel;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the placeholder text for This. This must be called before render is called.\n\t   *\n\t   * @param {string} placeholder The placeholder text.\n\t   * @returns {MultipleSelect} This.\n\t   */\n\t  withPlaceholder(placeholder) {\n\t    this.options.placeholder = placeholder;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * When set equal to true, the displayed selection in the widget will be reflected in the serialized form data.\n\t   *\n\t   * Default is 'false', and is the legacy behavior.\n\t   *\n\t   * @param value {boolean} The boolean value, true or false.\n\t   * @returns {MultipleSelect} This.\n\t   */\n\t  withPreserveDisplayedSelectionOrder(value) {\n\t    this.options.preserveDisplayedSelectionOrder = value;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the remove icon value. This overrides the default value.\n\t   *\n\t   * @param {string} removeIcon The remove icon text.\n\t   * @returns {MultipleSelect} This.\n\t   */\n\t  withRemoveIcon(removeIcon) {\n\t    this.options.removeIcon = removeIcon;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the search function that can be used to search other sources besides the select box that backs this widget.\n\t   *\n\t   * @param searchFunction {Function} The search function.\n\t   * @returns {MultipleSelect} This.\n\t   */\n\t  withSearchFunction(searchFunction) {\n\t    this.options.searchFunction = searchFunction;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Used during initialization to modify the order of selected options in the DOM.\n\t   *\n\t   * This does not affect the selected attribute, only the order in the DOM. It is not necessary to\n\t   * provide a complete list of selected option values.\n\t   *\n\t   * If options 'en', 'fr' and 'du' are selected, and you only provide 'du' as input here, 'du'\n\t   * will be moved to ensure it is first in the submitted form data, and the order of 'en' and 'fr'\n\t   * will not be modified, but will come after 'du'.\n\t   *\n\t   * Example:\n\t   *   A user who selected preferred languages in the order German, English, French would initialize the selected\n\t   *   options as: ['du', 'en', 'fr']\n\t   *\n\t   * @param {string[]} selections The selected options values.\n\t   * @returns {MultipleSelect} This.\n\t   */\n\t  withInitialSelectedOrder(selections) {\n\t    this.options.initialSelectedOrder = selections;\n\t    return this;\n\t  }\n\n\t  /* ===================================================================================================================\n\t   * Searcher's callback interface methods.\n\t   * ===================================================================================================================*/\n\n\t  /**\n\t   * Called when the Searcher gets a keyboard event that deletes beyond the search input. This highlights the last word\n\t   * in the phrase for removal.\n\t   */\n\t  deletedBeyondSearchInput() {\n\t    if (this.isLastOptionHighlightedForUnselect()) {\n\t      this.removeHighlightedOption();\n\t    }\n\n\t    this.highlightOptionForUnselect();\n\t  }\n\n\t  /**\n\t   * Called when the search needs to determine if the custom add option should be displayed. As long as this\n\t   * MultipleSelect does not contain the given value, the custom add option should be displayed.\n\t   *\n\t   * @param {string} value The value.\n\t   * @returns {boolean} True if this MultipleSelect does not contain the value, false otherwise.\n\t   */\n\t  doesNotContainValue(value) {\n\t    return !this.containsOptionWithValue(value);\n\t  }\n\n\t  /**\n\t   * Called when the Searcher is executing a search. This executes a search via the callback and returns the results.\n\t   *\n\t   * @param {string} [searchText] The text to search for.\n\t   * @returns {Object} The SearchResults.\n\t   */\n\t  search(searchText) {\n\t    this.unhighlightOptionForUnselect();\n\t    return this.options.searchFunction.call(null, searchText, this.element);\n\t  }\n\n\t  /**\n\t   * Called when the Searcher gets an event that causes a search result to be selected. This adds the word.\n\t   */\n\t  selectSearchResult(value) {\n\n\t    value = Utils.unescapeHTML(value); // In case the string has html escapes in it.\n\n\t    // Add the custom option if there is one\n\t    let option = this.findOptionWithText(value);\n\t    if (option === null) {\n\t      this.addOption(value, Utils.escapeHTML(value));\n\t      option = this.findOptionWithValue(value); // The value will still be unescaped\n\t    }\n\n\t    this.selectOption(option);\n\t  }\n\n\n\t  /* ===================================================================================================================\n\t   * Private Methods\n\t   * ===================================================================================================================*/\n\n\t  /**\n\t   * Handles the blur event when the input goes out of focus.\n\t   *\n\t   * @private\n\t   */\n\t  _handleBlurEvent() {\n\t    window.setTimeout((function() {\n\t      if (document.activeElement !== this.input.domElement) {\n\t        this.searcher.closeSearchResults();\n\t      }\n\t    }).bind(this), 300);\n\t    this.displayContainer.removeClass('focus');\n\t  }\n\n\t  /**\n\t   * Handles all click events sent to the MultipleSelect.\n\t   *\n\t   * @param {Event} event The mouse event.\n\t   * @private\n\t   */\n\t  _handleClickEvent(event) {\n\t    Utils.stopEvent(event);\n\t    const target = new PrimeElement(event.target);\n\t    if (target.is('a')) {\n\t      if (this.options.allowDuplicates) {\n\t        const id = target.getParent().getId();\n\t        this.removeOption(MultipleSelect.findOptionWithId(id));\n\t      } else {\n\t        this.removeOptionWithValue(target.getAttribute('value'));\n\t      }\n\t    } else if (target.is('span')) {\n\t      target.selectElementContents();\n\t    } else {\n\t      this.input.focus();\n\t    }\n\t  }\n\n\t  /**\n\t   * Handles the blur event when the input goes out of focus.\n\t   *\n\t   * @private\n\t   */\n\t  _handleFocusEvent() {\n\t    this.displayContainer.addClass('focus');\n\t  }\n\n\t  /**\n\t   * Handles mouse clicks outside of This. If they clicked anything that is not within this MultipleSelect,\n\t   * it closes the search results.\n\t   *\n\t   * @param {Event} event The event.\n\t   * @returns {boolean} Always true so the event is bubbled.\n\t   * @private\n\t   */\n\t  _handleGlobalClickEvent(event) {\n\t    const target = new PrimeElement(event.target);\n\t    if (this.displayContainer.domElement !== target.domElement && !target.isChildOf(this.displayContainer)) {\n\t      this.searcher.closeSearchResults();\n\t    }\n\t  }\n\n\t  /**\n\t   * Handles all key up events sent to the display container.\n\t   *\n\t   * @param {Event} event The browser event object.\n\t   * @returns {boolean} True if the search display is not open, false otherwise. This will prevent the event from continuing.\n\t   * @private\n\t   */\n\t  _handleKeyUpEvent(event) {\n\t    const key = event.keyCode;\n\t    if (key === Events.Keys.ESCAPE) {\n\t      this.unhighlightOptionForUnselect();\n\t    }\n\t  }\n\n\t  /**\n\t   * Makes an ID for the option.\n\t   *\n\t   * @param {PrimeElement} option The option to make the ID for.\n\t   * @private\n\t   */\n\t  _makeOptionID(option) {\n\t    if (this.options.allowDuplicates === true) {\n\t      let d = new Date().getTime();\n\t      // UUID ish\n\t      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n\t        let r = (d + Math.random() * 16) % 16 | 0;\n\t        d = Math.floor(d / 16);\n\t        return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);\n\t      });\n\t    }\n\t    return this.element.getId() + '-option-' + option.getValue().replace(' ', '-');\n\t  }\n\n\t  /**\n\t   * Redraws the widget.\n\t   * @private\n\t   */\n\t  _redraw() {\n\t    // Remove the currently displayed options\n\t    this.optionList.getChildren().each(function(option) {\n\t      option.removeFromDOM();\n\t    });\n\n\t    // Add the input option since the select options are inserted before it\n\t    this.inputOption = PrimeDocument.newElement('<li/>')\n\t        .appendTo(this.optionList);\n\t    this.input = PrimeDocument.newElement('<input/>')\n\t        .addEventListener('click', this._handleClickEvent)\n\t        .addEventListener('blur', this._handleBlurEvent)\n\t        .addEventListener('focus', this._handleFocusEvent)\n\t        .setAttribute('type', 'text')\n\t        .appendTo(this.inputOption);\n\t    this.searcher = new Searcher(this.input, this.searchResults, this)\n\t        .withOptions(this.options)\n\t        .initialize();\n\n\t    // Add the selected options\n\t    let hasSelectedOptions = false;\n\t    const options = this.element.getOptions();\n\t    for (let i = 0; i < options.length; i++) {\n\t      const option = options[i];\n\t      if (option.isSelected()) {\n\t        this.selectOption(option);\n\t        hasSelectedOptions = true;\n\t      }\n\t    }\n\n\t    // Put the placeholder attribute in if the MultipleSelect has no selected options\n\t    if (!hasSelectedOptions) {\n\t      this.input.setAttribute('placeholder', this.options.placeholder);\n\t    }\n\n\t    this.searcher.resizeInput();\n\n\t    // If error class handling was enabled and the select box has the error class, add it to the display\n\t    if (this.options.errorClass && this.element.hasClass(this.options.errorClass)) {\n\t      this.displayContainer.addClass(this.options.errorClass);\n\t    }\n\t  }\n\n\t  /**\n\t   * Set the initial options for this widget.\n\t   * @private\n\t   */\n\t  _setInitialOptions() {\n\t    // Defaults\n\t    this.options = {\n\t      allowDuplicates: false,\n\t      className: 'prime-multiple-select',\n\t      closeTimeout: 200,\n\t      customAddEnabled: true,\n\t      customAddLabel: 'Add Custom Value: ',\n\t      errorClass: null,\n\t      initialSelectedOrder: [],\n\t      noSearchResultsLabel: 'No Matches For: ',\n\t      placeholder: 'Choose',\n\t      preserveDisplayedSelectionOrder: false,\n\t      searchFunction: Searcher.selectSearchFunction,\n\t      removeIcon: 'X'\n\t    };\n\n\t    const userOptions = Utils.dataSetToOptions(this.element);\n\t    for (let option in userOptions) {\n\t      if (userOptions.hasOwnProperty(option)) {\n\t        this.options[option] = userOptions[option];\n\t      }\n\t    }\n\t  }\n\t}\n\n\t/*\n\t * Copyright (c) 2020, Inversoft Inc., All Rights Reserved\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n\t * either express or implied. See the License for the specific\n\t * language governing permissions and limitations under the License.\n\t */\n\n\tclass Reorder {\n\t  /**\n\t   * Constructs a new Reorder object for the given element.\n\t   *\n\t   * @param {PrimeElement|Element|EventTarget} element The Prime Element for containing the re-orderable items.\n\t   * @constructor\n\t   */\n\t  constructor(element) {\n\t    Utils.bindAll(this);\n\n\t    this.element = PrimeElement.wrap(element);\n\t    this._setInitialOptions();\n\t  }\n\n\t  /**\n\t   * Destroy this widget.\n\t   *\n\t   * @returns {Reorder} This.\n\t   */\n\t  destroy() {\n\t    this.element.removeEventListener('click', this._handleMoveDownClick);\n\t    this.element.removeEventListener('click', this._handleMoveUpClick);\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Initializes the widget by attaching event listeners to the element.\n\t   *\n\t   * @returns {Reorder} This.\n\t   */\n\t  initialize() {\n\t    this.element.addDelegatedEventListener('click', this.options.moveDownSelector, this._handleMoveDownClick);\n\t    this.element.addDelegatedEventListener('click', this.options.moveUpSelector, this._handleMoveUpClick);\n\n\t    this._refreshButtonStates();\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Move the item down.\n\t   *\n\t   * @param item {PrimeElement|Element} the item to move.\n\t   * @returns {Reorder} This.\n\t   */\n\t  moveDown(item) {\n\t    if (item !== null) {\n\t      item.getNextSibling().insertBefore(item);\n\t    }\n\n\t    this._refreshButtonStates();\n\n\t    if (this.options.reorderCallback) {\n\t      this.options.reorderCallback(this, item);\n\t    }\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Move the item up.\n\t   *\n\t   * @param item {PrimeElement|Element} the item to move.\n\t   * @returns {Reorder} This.\n\t   */\n\t  moveUp(item) {\n\t    if (item !== null) {\n\t      item.getPreviousSibling().insertAfter(item);\n\t    }\n\n\t    this._refreshButtonStates();\n\n\t    if (this.options.reorderCallback) {\n\t      this.options.reorderCallback(this, item);\n\t    }\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the selector which is used to identify the re-orderable items in the container.\n\t   *\n\t   * @param itemSelector {String} The item selector.\n\t   * @returns {Reorder} This.\n\t   */\n\t  withItemSelector(itemSelector) {\n\t    this.options.itemSelector = itemSelector;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the selector which is used to identify the move down button within the re-orderable item.\n\t   *\n\t   * @param moveDownSelector {String} The move down button selector.\n\t   * @returns {Reorder} This.\n\t   */\n\t  withDownSelector(moveDownSelector) {\n\t    this.options.moveDownSelector = moveDownSelector;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the selector which is used to identify the move up button within the re-orderable item.\n\t   *\n\t   * @param moveUpSelector {String} The move up button selector.\n\t   * @returns {Reorder} This.\n\t   */\n\t  withMoveUpSelector(moveUpSelector) {\n\t    this.options.moveUpSelector = moveUpSelector;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets a callback function to be used after an element changes order.\n\t   *\n\t   * @param reorderCallback {function} The optional callback function to call after an element changes order. This\n\t   *        function will be provided with the item that just moved.\n\t   * @returns {Reorder} This.\n\t   */\n\t  withReorderCallback(reorderCallback) {\n\t    this.options.reorderCallback = reorderCallback;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Set more than one option at a time by providing a map of key value pairs. This is considered an advanced\n\t   * method to set options on the widget. The caller needs to know what properties are valid in the options object.\n\t   *\n\t   * @param {Object} options Key value pair of configuration options.\n\t   * @returns {Reorder} This.\n\t   */\n\t  withOptions(options) {\n\t    if (!Utils.isDefined(options)) {\n\t      return this;\n\t    }\n\n\t    for (let option in options) {\n\t      if (options.hasOwnProperty(option)) {\n\t        this.options[option] = options[option];\n\t      }\n\t    }\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Redraw the state of this widget. This may be called if you have added additional items to be re-ordered.\n\t   *\n\t   * @returns {Reorder} This.\n\t   */\n\t  redraw() {\n\t    this._refreshButtonStates();\n\t    return this;\n\t  }\n\n\t  /* ===================================================================================================================\n\t   * Private methods\n\t   * ===================================================================================================================*/\n\n\t  /**\n\t   * Handle the Move Down click event.\n\t   *\n\t   * @param {Event} event The event.\n\t   * @private\n\t   */\n\t  _handleMoveDownClick(event) {\n\t    Utils.stopEvent(event);\n\n\t    const target = new PrimeElement(event.target);\n\t    const item = target.queryUp(this.options.itemSelector);\n\t    this.moveDown(item);\n\t  }\n\n\t  /**\n\t   * Handle the Move Up click event.\n\t   *\n\t   * @param {Event} event The event.\n\t   * @private\n\t   */\n\t  _handleMoveUpClick(event) {\n\t    Utils.stopEvent(event);\n\n\t    const target = new PrimeElement(event.target);\n\t    const item = target.queryUp(this.options.itemSelector);\n\t    this.moveUp(item);\n\t  }\n\n\t  /**\n\t   * Handle a 'refresh' to ensure the buttons are in the correct state.\n\t   * @private\n\t   */\n\t  _refreshButtonStates() {\n\t    const items = this.element.query(this.options.itemSelector);\n\t    if (items.length === 0) {\n\t      return;\n\t    }\n\n\t    if (items.length === 1) {\n\t      // Only one item, all buttons are disabled\n\t      items[0].queryFirst(this.options.moveDownSelector).addClass('disabled');\n\t      items[0].queryFirst(this.options.moveUpSelector).addClass('disabled');\n\t      items[0].setDataAttribute('index', 0);\n\t      return;\n\t    }\n\n\t    // More than one item\n\t    items.each(function(element, index) {\n\t      if (index === 0) {\n\t        // First element\n\t        element.queryFirst(this.options.moveUpSelector).addClass('disabled');\n\t        element.queryFirst(this.options.moveDownSelector).removeClass('disabled');\n\t      } else if (index === (items.length - 1)) {\n\t        // Last element\n\t        element.queryFirst(this.options.moveUpSelector).removeClass('disabled');\n\t        element.queryFirst(this.options.moveDownSelector).addClass('disabled');\n\t      } else {\n\t        // Enable these up and down buttons\n\t        element.queryFirst(this.options.moveDownSelector).removeClass('disabled');\n\t        element.queryFirst(this.options.moveUpSelector).removeClass('disabled');\n\t      }\n\n\t      // Set the index data attribute\n\t      element.setDataAttribute('index', index);\n\t    }.bind(this));\n\t  }\n\n\t  /**\n\t   * Set the initial options for this widget.\n\t   * @private\n\t   */\n\t  _setInitialOptions() {\n\t    // Defaults\n\t    this.options = {\n\t      itemSelector: 'data-item',\n\t      moveDownSelector: 'a.down',\n\t      moveUpSelector: 'a.up',\n\t      reorderCallback: null\n\t    };\n\n\t    const userOptions = Utils.dataSetToOptions(this.element);\n\t    for (let option in userOptions) {\n\t      if (userOptions.hasOwnProperty(option)) {\n\t        this.options[option] = userOptions[option];\n\t      }\n\t    }\n\t  }\n\t}\n\n\t/*\n\t * Copyright (c) 2016-2017, Inversoft Inc., All Rights Reserved\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n\t * either express or implied. See the License for the specific\n\t * language governing permissions and limitations under the License.\n\t */\n\n\t//Some externs to make intellij linter shutup. :p\n\t/**\n\t * @external TouchEvent\n\t */\n\n\t/**\n\t * @property {Array} changedTouches\n\t * @name TouchEvent#changedTouches\n\t */\n\n\t/**\n\t * @class Touchable\n\t */\n\tclass Touchable {\n\t  /**\n\t   * Constructs a new Touchable object for the given element.\n\t   *\n\t   * @param {PrimeElement|Element|EventTarget} element The Prime Element for the Touchable widget.\n\t   * @param {Function} [eventPropagationHandler] A Function that handles how the event is handled for the touchstart,\n\t   * touchend, touchmove, and touchcancel events. This Function takes the event object as its only parameter.\n\t   * @constructor\n\t   */\n\t  constructor(element, eventPropagationHandler) {\n\t    Utils.bindAll(this);\n\n\t    this.element = PrimeElement.wrap(element);\n\t    this.eventPropagationHandler = eventPropagationHandler;\n\t  }\n\n\t  /**\n\t   * Destroys the Touchable Widget\n\t   */\n\t  destroy() {\n\t    this.element\n\t        .removeEventListener('touchstart', this._handleTouchStart)\n\t        .removeEventListener('touchmove', this._handleTouchMove)\n\t        .removeEventListener('touchcancel', this._handleTouchCancel)\n\t        .removeEventListener('touchend', this._handleTouchEnd)\n\t        .removeEventListenersByPattern(/Prime\\.Widgets\\.Touchable:.+/);\n\t  }\n\n\t  /**\n\t   * Initializes the widget by attaching all of the event listeners to the element.\n\t   *\n\t   * @returns {Touchable} This.\n\t   */\n\t  initialize() {\n\t    this.element\n\t        .addEventListener('touchstart', this._handleTouchStart)\n\t        .addEventListener('touchmove', this._handleTouchMove)\n\t        .addEventListener('touchcancel', this._handleTouchCancel)\n\t        .addEventListener('touchend', this._handleTouchEnd);\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Provide a handler that will be called when a long press is detected.\n\t   *\n\t   * @param {Function} handler The event handler.\n\t   * @returns {Touchable} This\n\t   */\n\t  withLongPressHandler(handler) {\n\t    this.element.addEventListener('Touchable:longPress', handler);\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Provide a handler that will be called when a move event is detected.\n\t   *\n\t   * @param {Function} handler The event handler.\n\t   * @returns {Touchable} This\n\t   */\n\t  withMoveHandler(handler) {\n\t    this.element.addEventListener('Touchable:move', handler);\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Provide a handler that will be called when a long press is detected.\n\t   *\n\t   * @param {Function} handler The event handler.\n\t   * @returns {Touchable} This\n\t   */\n\t  withSwipeDownHandler(handler) {\n\t    this.element.addEventListener('Touchable:swipeDown', handler);\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Provide a handler that will be called when a swipe left event is detected.\n\t   *\n\t   * @param {Function} handler The event handler.\n\t   * @returns {Touchable} This\n\t   */\n\t  withSwipeLeftHandler(handler) {\n\t    this.element.addEventListener('Touchable:swipeLeft', handler);\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Provide a handler that will be called when a swipe right event is detected.\n\t   *\n\t   * @param {Function} handler The event handler.\n\t   * @returns {Touchable} This\n\t   */\n\t  withSwipeRightHandler(handler) {\n\t    this.element.addEventListener('Touchable:swipeRight', handler);\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Provide a handler that will be called when a swipe up event is detected.\n\t   *\n\t   * @param {Function} handler The event handler.\n\t   * @returns {Touchable} This\n\t   */\n\t  withSwipeUpHandler(handler) {\n\t    this.element.addEventListener('Touchable:swipeUp', handler);\n\t    return this;\n\t  }\n\n\t  /* ===================================================================================================================\n\t   * Private methods\n\t   * ===================================================================================================================*/\n\n\t  /**\n\t   * Collects all of the touch data at the end of the touch and calculates the distances and times.\n\t   *\n\t   * @param {TouchEvent} event The TouchEvent.\n\t   * @private\n\t   */\n\t  _collectTouchData(event) {\n\t    const touchPoints = event.changedTouches.length;\n\t    if (touchPoints > 1) {\n\t      return;\n\t    }\n\n\t    const touch = event.changedTouches[0];\n\t    this.elapsedTime = new Date().getTime() - this.touchStarted;\n\t    this.touchEndX = touch.pageX;\n\t    this.touchEndY = touch.pageY;\n\t    this.touchX = this.touchStartX - this.touchEndX;\n\t    this.touchY = this.touchStartY - this.touchEndY;\n\t  }\n\n\t  /**\n\t   * Called when all processing is finished and the handlers are called based on direction and time of the touches.\n\t   *\n\t   * @private\n\t   */\n\t  _finished() {\n\t    // Make sure this was a swipe\n\t    const event = {\n\t      elapsedTime: this.elapsedTime,\n\t      touchStartX: this.touchStartX,\n\t      touchStartY: this.touchStartY,\n\t      touchEndX: this.touchEndX,\n\t      touchEndY: this.touchEndY,\n\t      touchX: this.touchX,\n\t      touchY: this.touchY,\n\t      element: this.element,\n\t      target: this.element.domElement\n\t    };\n\t    event.swipe = Math.abs(event.touchX) > 50 || Math.abs(event.touchY) > 50;\n\t    event.swipeX = event.swipe && Math.abs(event.touchX) > Math.abs(event.touchY);\n\t    event.swipeY = event.swipe && !event.swipeX;\n\t    event.longPress = !event.swipe && event.elapsedTime > 500;\n\n\t    if (event.longPress) {\n\t      this.element.fireCustomEvent('Touchable:longPress', event);\n\t    } else if (event.swipeX && event.touchX > 0) {\n\t      this.element.fireCustomEvent('Touchable:swipeLeft', event);\n\t    } else if (event.swipeX) {\n\t      this.element.fireCustomEvent('Touchable:swipeRight', event);\n\t    } else if (event.swipeY && event.touchY > 0) {\n\t      this.element.fireCustomEvent('Touchable:swipeUp', event);\n\t    } else if (event.swipeY) {\n\t      this.element.fireCustomEvent('Touchable:swipeDown', event);\n\t    }\n\t  }\n\n\t  /**\n\t   * Handle the touch cancel event.\n\t   *\n\t   * @param {TouchEvent} event The touch event.\n\t   * @private\n\t   */\n\t  _handleTouchCancel(event) {\n\t    this._collectTouchData(event);\n\t    this._finished();\n\t    if (Utils.isDefined(this.eventPropagationHandler)) {\n\t      this.eventPropagationHandler(event);\n\t    }\n\t  }\n\n\t  /**\n\t   * Handle the touch end event.\n\t   *\n\t   * @param {TouchEvent} event The touch event.\n\t   * @private\n\t   */\n\t  _handleTouchEnd(event) {\n\t    this._collectTouchData(event);\n\t    this._finished();\n\t    if (Utils.isDefined(this.eventPropagationHandler)) {\n\t      this.eventPropagationHandler(event);\n\t    }\n\t  }\n\n\t  /**\n\t   * Handle the touch move event.\n\t   *\n\t   * @param {TouchEvent} event The touch event.\n\t   * @private\n\t   */\n\t  _handleTouchMove(event) {\n\t    this.element.fireEvent('Touchable:move', event);\n\t    if (Utils.isDefined(this.eventPropagationHandler)) {\n\t      this.eventPropagationHandler(event);\n\t    }\n\t  }\n\n\t  /**\n\t   * Handle the touch start event.\n\t   *\n\t   * @param {TouchEvent} event The touch event.\n\t   * @private\n\t   */\n\t  _handleTouchStart(event) {\n\t    const touchPoints = event.changedTouches.length;\n\t    if (touchPoints > 1) {\n\t      if (Utils.isDefined(this.eventPropagationHandler)) {\n\t        this.eventPropagationHandler(event);\n\t      }\n\n\t      return;\n\t    }\n\n\t    const touch = event.changedTouches[0];\n\t    this.touchStarted = new Date().getTime();\n\t    this.touchStartX = touch.pageX;\n\t    this.touchStartY = touch.pageY;\n\t    if (Utils.isDefined(this.eventPropagationHandler)) {\n\t      this.eventPropagationHandler(event);\n\t    }\n\t  }\n\t}\n\n\t/*\n\t * Copyright (c) 2015-2017, Inversoft Inc., All Rights Reserved\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n\t * either express or implied. See the License for the specific\n\t * language governing permissions and limitations under the License.\n\t */\n\n\tclass SideMenu {\n\t  /**\n\t   * Constructs the side menu.\n\t   *\n\t   * @param {PrimeElement|Element} button The button element that is used to open the side menu.\n\t   * @param {PrimeElement|Element} sideMenuElement The side menu element that will be \"hidden\" and \"show\".\n\t   * @constructor\n\t   */\n\t  constructor(button, sideMenuElement) {\n\t    Utils.bindAll(this);\n\t    this.sideMenu = PrimeElement.wrap(sideMenuElement);\n\t    this.button = PrimeElement.wrap(button);\n\t    this._setInitialOptions();\n\t  }\n\n\t  /**\n\t   * Closes the side menu.\n\t   *\n\t   * @returns {SideMenu} This.\n\t   */\n\t  close() {\n\t    if (!PrimeDocument.bodyElement.hasClass(this.options.closedClass)) {\n\t      PrimeDocument.bodyElement.addClass(this.options.closedClass);\n\t    }\n\n\t    if (PrimeDocument.bodyElement.hasClass(this.options.openClass)) {\n\t      PrimeDocument.bodyElement.removeClass(this.options.openClass);\n\t    }\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Initializes the widget by attaching the event listener to the menu button.\n\t   *\n\t   * @returns {SideMenu}\n\t   */\n\t  initialize() {\n\t    this.button.addEventListener('click', this._handleClickEvent);\n\t    return this;\n\t  }\n\n\t  /**\n\t   * @returns {boolean} True if the side menu is currently open.\n\t   */\n\t  isOpen() {\n\t    return this.sideMenu.getLeft() >= 0;\n\t    // return PrimeDocument.bodyElement.hasClass('prime-side-menu-open') || !PrimeDocument.bodyElement.hasClass('prime-side-menu-closed');\n\t  }\n\n\t  /**\n\t   * Opens the mobile nav.\n\t   * @returns {SideMenu} This.\n\t   */\n\t  open() {\n\t    if (PrimeDocument.bodyElement.hasClass(this.options.closedClass)) {\n\t      PrimeDocument.bodyElement.removeClass(this.options.closedClass);\n\t    }\n\n\t    if (!PrimeDocument.bodyElement.hasClass(this.options.openClass)) {\n\t      PrimeDocument.bodyElement.addClass(this.options.openClass);\n\t    }\n\n\t    this.touchable = new Touchable(PrimeDocument.bodyElement).withSwipeLeftHandler(this._handleSwipeLeft);\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Set more than one option at a time by providing a map of key value pairs. This is considered an advanced\n\t   * method to set options on the widget. The caller needs to know what properties are valid in the options object.\n\t   *\n\t   * @param {Object} options Key value pair of configuration options.\n\t   * @returns {SideMenu} This.\n\t   */\n\t  withOptions(options) {\n\t    if (!Utils.isDefined(options)) {\n\t      return this;\n\t    }\n\n\t    for (let option in options) {\n\t      if (options.hasOwnProperty(option)) {\n\t        this.options[option] = options[option];\n\t      }\n\t    }\n\t    return this;\n\t  }\n\n\t  /* ===================================================================================================================\n\t   * Private methods\n\t   * ===================================================================================================================*/\n\n\t  /**\n\t   * Handles the click event on the side menu button and calls either the open or close function.\n\t   *\n\t   * @private\n\t   */\n\t  _handleClickEvent(event) {\n\t    Utils.stopEvent(event);\n\t    if (this.isOpen()) {\n\t      this.close();\n\t    } else {\n\t      this.open();\n\t    }\n\t  }\n\n\t  /**\n\t   * Handles the synthetic swipe left event that Prime.js provides.\n\t   *\n\t   * @private\n\t   */\n\t  _handleSwipeLeft() {\n\t    if (this.isOpen()) {\n\t      this.close();\n\t    }\n\n\t    if (Utils.isDefined(this.touchable)) {\n\t      this.touchable.destroy();\n\t      this.touchable = null;\n\t    }\n\t  }\n\n\t  /**\n\t   * Set the initial options for this widget.\n\t   * @private\n\t   */\n\t  _setInitialOptions() {\n\t    // Defaults\n\t    this.options = {\n\t      closedClass: 'prime-side-menu-closed',\n\t      openClass: 'prime-side-menu-open'\n\t    };\n\n\t    const userOptions = Utils.dataSetToOptions(this.sideMenu);\n\t    for (let option in userOptions) {\n\t      if (userOptions.hasOwnProperty(option)) {\n\t        this.options[option] = userOptions[option];\n\t      }\n\t    }\n\t  }\n\t}\n\n\t/*\n\t * Copyright (c) 2017, Inversoft Inc., All Rights Reserved\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n\t * either express or implied. See the License for the specific\n\t * language governing permissions and limitations under the License.\n\t */\n\n\tconst PrimeStorage = {\n\t  /**\n\t   * True if local storage is supported.\n\t   * @type {boolean} true if local storage is supported. Local in this case being used to indicate either type 'local' or 'session'.\n\t   */\n\t  supported: typeof(Storage) !== 'undefined',\n\n\t  /**\n\t   * Set an object into session storage.\n\t   * @param key {string} the key to store the object.\n\t   * @param object {object} the object to store.\n\t   */\n\t  setSessionObject: function(key, object) {\n\t    PrimeStorage._setObject(sessionStorage, key, object);\n\t  },\n\n\t  /**\n\t   * Retrieve an object from session storage.\n\t   * @param key {string} the key that was used to store the object.\n\t   * @return {object} the stored object or null if it does not exist or local storage is not supported.\n\t   */\n\t  getSessionObject: function(key) {\n\t    return PrimeStorage._getObject(sessionStorage, key);\n\t  },\n\n\t  /**\n\t   * Set an object into local storage storage.\n\t   * @param key {string} the key to store the object.\n\t   * @param object {object} the object to store.\n\t   */\n\t  setLocalObject: function(key, object) {\n\t    PrimeStorage._setObject(localStorage, key, object);\n\t  },\n\n\t  /**\n\t   * Retrieve an object from local storage.\n\t   * @param key {string} the key that was used to store the object.\n\t   * @return {object} the stored object or null if it does not exist or local storage is not supported.\n\t   */\n\t  getLocalObject: function(key) {\n\t    return PrimeStorage._getObject(localStorage, key);\n\t  },\n\n\t  /* ===================================================================================================================\n\t   * Private methods\n\t   * ===================================================================================================================*/\n\n\t  _getObject: function(storage, key) {\n\t    if (PrimeStorage.supported) {\n\t      const item = storage.getItem(key);\n\t      if (item !== null) {\n\t        return JSON.parse(item);\n\t      }\n\t    }\n\n\t    return null;\n\t  },\n\n\t  _setObject: function(storage, key, object) {\n\t    if (PrimeStorage.supported) {\n\t      storage.setItem(key, JSON.stringify(object));\n\t    }\n\t  }\n\t};\n\n\t/*\n\t * Copyright (c) 2014-2017, Inversoft Inc., All Rights Reserved\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n\t * either express or implied. See the License for the specific\n\t * language governing permissions and limitations under the License.\n\t */\n\n\tclass SplitButton {\n\t  /**\n\t   * Constructs a new SplitButton object for the given element.\n\t   *\n\t   * The markup must be a specific structure in order for the SplitButton to remember the last action the user took\n\t   * as well as show and hide the menu of items.\n\t   *\n\t   * Here's the format for the elements.\n\t   *\n\t   * <pre>\n\t   *   &lt;div class=\"split-button\"&gt;\n\t   *     &lt;a href=\"#\"&gt;Loading... &lt;/a&gt;\n\t   *     &lt;button type=\"button\"&gt;&lt;/button&gt;\n\t   *     &lt;div type=\"menu\"&gt;\n\t   *       &lt;a class=\"item\" href=\"/admin/foo/add/\"&gt;Add&lt;/a&gt;\n\t   *       &lt;a class=\"item\" href=\"/admin/foo/delete/\"&gt;Delete&lt;/a&gt;\n\t   *     &lt;/div&gt;\n\t   *   &lt;/ul&gt;\n\t   * </pre>\n\t   *\n\t   * Also, it is important to understand how to attach event listeners to the SplitButton. You cannot attach them to\n\t   * the individual menu items since those will never be clicked. Instead, you must attach them to the div at the top\n\t   * and handle all the events from inside. This is due to how the split button changes the main button based on the\n\t   * action the user took last.\n\t   *\n\t   * @param element {PrimeElement|Element|EventTarget} The element to transform into a split button.\n\t   * @constructor\n\t   */\n\t  constructor(element) {\n\t    Utils.bindAll(this);\n\n\t    this.element = PrimeElement.wrap(element);\n\t    this.currentAction = this.element.queryFirst('a');\n\t    if (this.currentAction === null) {\n\t      throw new TypeError('The SplitButton element must contain an <a> that is the currently selected action.');\n\t    }\n\t    this.loading = this.currentAction;\n\n\t    this.button = this.element.queryFirst('button');\n\t    if (this.button === null) {\n\t      throw new TypeError('The SplitButton element must contain a <button> that is used to open it.');\n\t    }\n\n\t    this.menu = this.element.queryFirst('.menu');\n\t    if (this.menu === null) {\n\t      throw new TypeError('The SplitButton element must contain a <div class=\"menu\"> that contains the menu items.');\n\t    }\n\n\t    this.items = this.menu.query('.item');\n\t    if (this.items.length === 0) {\n\t      throw new TypeError('The SplitButton element must contain at least one item.');\n\t    }\n\n\t    this.actionIndex = null;\n\t    this.options = {};\n\t    this._setInitialOptions();\n\t  }\n\n\t  /**\n\t   * Removes the event listeners.\n\t   */\n\t  destroy() {\n\t    this.button.removeEventListener('click', this._handleButtonClick);\n\t  }\n\n\t  /**\n\t   * Initializes the SplitButton by setting up all the event listeners and managing the default action or the last action\n\t   * that the user took.\n\t   */\n\t  initialize() {\n\t    this.button.addEventListener('click', this._handleButtonClick);\n\t    this.items.each(item => item.addEventListener('click', this._handleItemClick));\n\t    this.redraw();\n\t    return this;\n\t  }\n\n\t  redraw() {\n\t    // Load the last action (if any)\n\t    let actionId = null;\n\t    if (PrimeStorage.supported && this.options.localStorageKey !== null) {\n\t      actionId = PrimeStorage.getSessionObject(this.options.localStorageKey);\n\t      if (actionId !== null) {\n\t        this.selectAction(actionId);\n\t      }\n\t    }\n\n\t    // If no action is selected from local storage, select the default\n\t    if (actionId === null) {\n\t      this.selectDefaultAction();\n\t    }\n\n\t    return this;\n\t  }\n\n\t  selectAction(actionId) {\n\t    const item = PrimeDocument.queryById(actionId);\n\t    if (item !== null) {\n\t      let classes = '';\n\t      if (this.loading !== null) {\n\t        classes = this.loading.getAttribute('class');\n\t        this.loading.removeFromDOM();\n\t        this.loading = null;\n\t      } else {\n\t        classes = this.currentAction.getAttribute('class');\n\t        this.currentAction.setAttribute('class', this.currentAction.getAttribute('data-original-class'));\n\t        this.currentAction.removeFromDOM();\n\t        this.currentAction.prependTo(this.menu);\n\t      }\n\n\t      item.setAttribute('data-original-class', item.getAttribute('class'));\n\t      item.setAttribute('class', classes);\n\t      item.removeFromDOM();\n\t      item.prependTo(this.element);\n\t      this.currentAction = item;\n\t    } else {\n\t      // This shouldn't infinitely recurse because that method always finds something\n\t      this.selectDefaultAction();\n\t    }\n\n\t    // this.currentAction.setAttribute('href', item.getAttribute('href'));\n\t    // this.currentAction.setHTML(item.getHTML());\n\t    return this;\n\t  }\n\n\t  selectDefaultAction() {\n\t    // Find the default\n\t    let actionId = null;\n\t    for (let i = 0; i < this.items.length; i++) {\n\t      if (this.items[i].hasClass('default')) {\n\t        actionId = this.items[i].getId();\n\t        break;\n\t      }\n\t    }\n\n\t    // Fall back if it wasn't found\n\t    if (actionId === null) {\n\t      actionId = this.items[0].getId();\n\t    }\n\n\t    // Select the default (or first item)\n\t    if (actionId !== null) {\n\t      this._saveLastAction(actionId);\n\t      this.selectAction(actionId);\n\t    }\n\n\t    return this;\n\t  }\n\n\t  withLocalStorageKey(localStorageKey) {\n\t    this.options.localStorageKey = localStorageKey;\n\t    return this;\n\t  }\n\n\t  withOptions(options) {\n\t    if (!Utils.isDefined(options)) {\n\t      return this;\n\t    }\n\n\t    for (let option in options) {\n\t      if (options.hasOwnProperty(option)) {\n\t        this.options[option] = options[option];\n\t      }\n\t    }\n\n\t    return this;\n\t  }\n\n\t  /* ===================================================================================================================\n\t   * Private methods\n\t   * ===================================================================================================================*/\n\n\t  /**\n\t   * Handles the button click event.\n\t   * @private\n\t   */\n\t  _handleButtonClick(event) {\n\t    Utils.stopEvent(event);\n\t    if (this.menu.isVisible()) {\n\t      this.menu.hide();\n\t    } else {\n\t      this.menu.show();\n\t    }\n\t  }\n\n\t  /**\n\t   * Handles the item click event to update the last action in local storage (if enabled).\n\t   * @private\n\t   */\n\t  _handleItemClick(event) {\n\t    for (let i = 0; i < this.items.length; i++) {\n\t      if (this.items[i].domElement === event.target) {\n\t        let actionId = this.items[i].getId();\n\t        this._saveLastAction(actionId);\n\t        this.selectAction(actionId);\n\t        this.menu.hide();\n\t        break;\n\t      }\n\t    }\n\t  }\n\n\t  _saveLastAction(actionId) {\n\t    if (PrimeStorage.supported && this.options.localStorageKey !== null) {\n\t      PrimeStorage.setSessionObject(this.options.localStorageKey, actionId);\n\t    }\n\t  }\n\n\t  /**\n\t   * Set the initial options for this widget.\n\t   * @private\n\t   */\n\t  _setInitialOptions() {\n\t    // Defaults\n\t    this.options = {\n\t      localStorageKey: null\n\t    };\n\n\t    const userOptions = Utils.dataSetToOptions(this.element);\n\t    for (let option in userOptions) {\n\t      if (userOptions.hasOwnProperty(option)) {\n\t        this.options[option] = userOptions[option];\n\t      }\n\t    }\n\t  }\n\t}\n\n\t/*\n\t * Copyright (c) 2017-2018, Inversoft Inc., All Rights Reserved\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n\t * either express or implied. See the License for the specific\n\t * language governing permissions and limitations under the License.\n\t */\n\n\tclass Table {\n\t  /**\n\t   * Constructs a new Table object for the given table element.\n\t   *\n\t   * @param {PrimeElement|Element} element The table element.\n\t   * @constructor\n\t   */\n\t  constructor(element) {\n\t    Utils.bindAll(this);\n\n\t    this.column = null;\n\t    this.columnIndex = 0;\n\t    this.sortAscending = true;\n\n\t    this.element = PrimeElement.wrap(element);\n\t    this.thead = this.element.queryFirst('thead');\n\t    this.tbody = this.element.queryFirst('tbody');\n\n\t    if (!this.element.is('table')) {\n\t      throw new TypeError('The element you passed in is not a table element.');\n\t    }\n\n\t    this._setInitialOptions();\n\t  }\n\n\t  /**\n\t   * Initializes the table widget.\n\t   *\n\t   * @returns {Table} This.\n\t   */\n\t  initialize() {\n\t    // Sortable by default unless it is disabled\n\t    if (this.element.getDataAttribute('sortable') !== 'false') {\n\t      this._initializeSort();\n\t    }\n\n\t    // Initialize the checkbox handling\n\t    this.selectAll = this.element.queryFirst('thead > tr > th input[type=\"checkbox\"]');\n\t    if (this.selectAll !== null) {\n\t      this.selectAll.addEventListener('change', this._handleSelectAllChange);\n\t    }\n\n\t    this.element.query('tbody > tr > td input[type=\"checkbox\"]').addEventListener('click', this._handleCheckboxEvent);\n\t    this.checkedCount = 0;\n\t    this.numberofCheckboxes = this.element.query('tbody td input[type=\"checkbox\"]').length;\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sort the table.\n\t   */\n\t  sort() {\n\t    this._clearSortIndicators();\n\n\t    if (this.column.hasClass('sort-up')) {\n\t      this.column.removeClass('sort-up').addClass('sort-down');\n\t      this.sortAscending = false;\n\t    } else if (this.column.hasClass('sort-down')) {\n\t      this.column.removeClass('sort-down').addClass('sort-up');\n\t      this.sortAscending = true;\n\t    } else {\n\t      this.column.addClass('sort-up');\n\t      this.sortAscending = true;\n\t    }\n\n\t    // Collect the values to sort\n\t    const rows = [];\n\t    this.tbody.query('tr').each(function(element) {\n\t      rows.push(element);\n\t    });\n\n\t    rows.sort(this._comparator);\n\t    let i = 0;\n\t    const length = rows.length;\n\t    if (this.sortAscending) {\n\t      for (i = 0; i <  length; i++) {\n\t        this.tbody.appendElement(rows[i]);\n\t      }\n\t    } else {\n\t      for (i = length; i > 0; i--) {\n\t        this.tbody.appendElement(rows[i - 1]);\n\t      }\n\t    }\n\n\t    // Save current sorted column state in local storage.\n\t    if (PrimeStorage.supported && this.options.localStorageKey !== null) {\n\t      const data = {\n\t        columnIndex: this.columnIndex,\n\t        sortAscending: this.sortAscending\n\t      };\n\t      PrimeStorage.setSessionObject(this.options.localStorageKey, data);\n\t    }\n\t  }\n\n\t  /**\n\t   * Sets a callback on a checkbox event.\n\t   *\n\t   * @param {function} callback The callback function\n\t   * @returns {Table} This.\n\t   */\n\t  withCheckEventCallback(callback) {\n\t    this.options.checkEventCallback = callback;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Enables local storage of the sorted column. This key is required to enable local storage of the sorted column.\n\t   *\n\t   * @param {String} key The local storage key.\n\t   * @returns {Table} This.\n\t   */\n\t  withLocalStorageKey(key) {\n\t    this.options.localStorageKey = key;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Set more than one option at a time by providing a map of key value pairs. This is considered an advanced\n\t   * method to set options on the widget. The caller needs to know what properties are valid in the options object.\n\t   *\n\t   * @param {Object} options Key value pair of configuration options.\n\t   * @returns {Table} This.\n\t   */\n\t  withOptions(options) {\n\t    if (!Utils.isDefined(options)) {\n\t      return this;\n\t    }\n\n\t    for (let option in options) {\n\t      if (options.hasOwnProperty(option)) {\n\t        this.options[option] = options[option];\n\t      }\n\t    }\n\t    return this;\n\t  }\n\n\t  /* ===================================================================================================================\n\t   * Private methods\n\t   * ===================================================================================================================*/\n\n\t  /**\n\t   * Remove the ascending and descending sort classes on every column except the current column being sorted.\n\t   * @private\n\t   */\n\t  _clearSortIndicators() {\n\t    this.thead.query('th').each((function(element) {\n\t      if (element.domElement !== this.column.domElement) {\n\t        element.removeClass('sort-up sort-down');\n\t      }\n\t    }).bind(this));\n\t  }\n\n\t  /**\n\t   * Sort function to be used by the .sort() method.\n\t   * @param a The first row to compare\n\t   * @param b The second row to compare\n\t   * @returns {number}\n\t   * @private\n\t   */\n\t  _comparator(a, b) {\n\t    const sortType = this.thead.query('th')[this.columnIndex].getDataAttribute('sortType') || 'string';\n\t    if (sortType !== 'string' && sortType !== 'number') {\n\t      throw new Error('Unsupported sort type. [string] or [number] are the two supported sort types.');\n\t    }\n\n\t    const cell1 = a.query('td')[this.columnIndex];\n\t    const cell2 = b.query('td')[this.columnIndex];\n\n\t    const sortValue1 = cell1.getDataAttribute('sortValue');\n\t    const sortValue2 = cell2.getDataAttribute('sortValue');\n\n\t    // Prefer the data-sort-value if provided\n\t    let value1 = sortValue1 || cell1.getTextContent().toLowerCase();\n\t    let value2 = sortValue2 || cell2.getTextContent().toLowerCase();\n\n\t    if (sortType === 'string') {\n\t      return value1.localeCompare(value2);\n\t    } else {\n\t      value1 = this._toNumber(value1);\n\t      value2 = this._toNumber(value2);\n\n\t      if (value1 < value2) {\n\t        return -1;\n\t      }\n\n\t      if (value1 > value2) {\n\t        return 1;\n\t      }\n\n\t      return 0;\n\t    }\n\t  }\n\n\t  // noinspection JSMethodCanBeStatic\n\t  /**\n\t   * Return the column index where 0 is the first column in the table.\n\t   * @param column {PrimeElement} the column to determine the index of\n\t   * @returns {number} a positive integer representing the index of the column in the table.\n\t   * @private\n\t   */\n\t  _getColumnIndex(column) {\n\t    let columnIndex = 0;\n\t    let current = column;\n\t    let previous = column;\n\t    while (previous !== null) {\n\t      previous = current.getPreviousSibling();\n\t      current = previous;\n\t      columnIndex++;\n\t    }\n\n\t    return columnIndex - 1;\n\t  }\n\n\t  _handleCheckboxEvent(event) {\n\t    const target = new PrimeElement(event.currentTarget);\n\t    const currentCheckedCount = this.checkedCount;\n\t    this.checkedCount = this.checkedCount + (target.isChecked() ? 1 : -1);\n\n\t    if (this.selectAll !== null) {\n\t      if (currentCheckedCount === this.numberofCheckboxes && this.numberofCheckboxes !== this.checkedCount) {\n\t        this.selectAll.setChecked(false);\n\t      } else if (currentCheckedCount !== this.numberofCheckboxes && this.numberofCheckboxes === this.checkedCount) {\n\t        this.selectAll.setChecked(true);\n\t      }\n\t    }\n\n\t    if (this.options.checkEventCallback !== null) {\n\t      this.options.checkEventCallback({\n\t        checkedCount: this.checkedCount\n\t      });\n\t    }\n\t  }\n\n\t  _handleSelectAllChange() {\n\t    if (this.selectAll.isChecked()) {\n\t      this.element.query('tbody tr > td input[type=\"checkbox\"]').each(function(e) {\n\t        if (!e.isChecked()) {\n\t          e.setChecked(true);\n\t          this.checkedCount++;\n\t        }\n\t      }.bind(this));\n\t    } else {\n\t      this.element.query('tbody tr > td input[type=\"checkbox\"]').each(function(e) {\n\t        if (e.isChecked()) {\n\t          e.setChecked(false);\n\t          this.checkedCount--;\n\t        }\n\t      }.bind(this));\n\t    }\n\n\t    if (this.options.checkEventCallback !== null) {\n\t      this.options.checkEventCallback({\n\t        checkedCount: this.checkedCount\n\t      });\n\t    }\n\t  }\n\n\t  /**\n\t   * Handle the click event on the sortable column.\n\t   * @param event {MouseEvent} the click event\n\t   * @private\n\t   */\n\t  _handleSortableColumnClick(event) {\n\t    Utils.stopEvent(event);\n\t    const target = new PrimeElement(event.currentTarget);\n\t    this.column = target;\n\t    this.columnIndex = this._getColumnIndex(target);\n\n\t    this.sort();\n\t  }\n\n\t  /**\n\t   * Add the click event listener to the column unless it matches the ignore selector.\n\t   * @param column {PrimeElement} the column element to initialize.\n\t   * @private\n\t   */\n\t  _initializeColumn(column) {\n\t    if (!column.is('[data-sortable=\"false\"]') && column.queryFirst('input[type=\"checkbox\"]') === null) {\n\t      column.addClass('sortable').addEventListener('click', this._handleSortableColumnClick);\n\t    }\n\t  }\n\n\t  _initializeSort() {\n\t    this.thead.query('th').each(this._initializeColumn);\n\n\t    if (PrimeStorage.supported && this.options.localStorageKey !== null) {\n\t      const state = PrimeStorage.getSessionObject(this.options.localStorageKey);\n\t      if (state !== null) {\n\t        this.columnIndex = state.columnIndex;\n\t        this.sortAscending = state.sortAscending;\n\n\t        this.column = this.thead.query('th')[this.columnIndex];\n\t        if (this.sortAscending) {\n\t          this.column.addClass('sort-down');\n\t        } else {\n\t          this.column.addClass('sort-up');\n\t        }\n\n\t        this.sort();\n\t      }\n\t    }\n\t  }\n\n\t  /**\n\t   * Set the initial options for this widget.\n\t   * @private\n\t   */\n\t  _setInitialOptions() {\n\t    // Defaults\n\t    this.options = {\n\t      localStorageKey: null,\n\t      checkEventCallback: null\n\t    };\n\n\t    const userOptions = Utils.dataSetToOptions(this.element);\n\t    for (let option in userOptions) {\n\t      if (userOptions.hasOwnProperty(option)) {\n\t        this.options[option] = userOptions[option];\n\t      }\n\t    }\n\t  }\n\n\t  // noinspection JSMethodCanBeStatic\n\t  _toNumber(value) {\n\t    const number = Number(value);\n\t    if (isNaN(value)) {\n\t      console.error(new Error('Expected value [' + value + '] to be a number.'));\n\t      return value;\n\t    }\n\t    return number;\n\t  }\n\t}\n\n\t/*\n\t * Copyright (c) 2015-2018, Inversoft Inc., All Rights Reserved\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n\t * either express or implied. See the License for the specific\n\t * language governing permissions and limitations under the License.\n\t */\n\n\tclass Tabs {\n\t  /**\n\t   * Constructs a new Tabs object for the given ul element.\n\t   *\n\t   * @param {PrimeElement|Element|EventTarget} element The ul element to build the tab widget from\n\t   * @constructor\n\t   */\n\t  constructor(element) {\n\t    Utils.bindAll(this);\n\n\t    this.element = PrimeElement.wrap(element);\n\t    if (this.element.getTagName().toLowerCase() === 'ul') {\n\t      this.tabsContainer = this.element;\n\t    } else {\n\t      this.tabsContainer = this.element.queryFirst('ul');\n\t    }\n\n\t    if (this.tabsContainer === null) {\n\t      throw new TypeError('Tabs requires a ul element. The passed element does not contain a ul element');\n\t    }\n\n\t    this._setInitialOptions();\n\t    this.tabContents = {};\n\t    this.tabs = {};\n\t    this.tabArray = [];\n\t    this.selectedTab = null;\n\t  }\n\n\t  /**\n\t   * Destroys the Tabs widget\n\t   */\n\t  destroy() {\n\t    this.tabsContainer.query('a').each(function(a) {\n\t      a.removeEventListener('click', this._handleClick);\n\t    }.bind(this));\n\n\t    for (let i = 0; i < this.tabs.length; i++) {\n\t      this.tabs[i].removeClass(this.options.tabContentClass);\n\t    }\n\t  }\n\n\t  /**\n\t   * Hides the tab for the given Id.\n\t   *\n\t   * @param id The Id of the tab to hide.\n\t   */\n\t  hideTab(id) {\n\t    const tab = this.tabs[id];\n\t    tab.hide();\n\t    this.redraw();\n\t  }\n\n\t  /**\n\t   * Initializes the Tabs widget. Call this after you have set all the initial options.\n\t   *\n\t   * @returns {Tabs} This.\n\t   */\n\t  initialize() {\n\t    this.tabsContainer.query('li:not(.disabled)').each(function(tab) {\n\t      const a = tab.queryFirst('a').addEventListener('click', this._handleClick);\n\t      const dataSet = tab.getDataSet();\n\n\t      const href = a.getAttribute('href');\n\t      const isAnchor = href.charAt(0) === '#';\n\t      if (isAnchor) {\n\t        dataSet.tabId = href.substring(1);\n\t        dataSet.tabUrl = '';\n\t      } else {\n\t        dataSet.tabId = href;\n\t        dataSet.tabUrl = href;\n\t      }\n\n\t      this.tabs[dataSet.tabId] = tab;\n\t      this.tabArray.push(tab);\n\n\t      let content = PrimeDocument.queryById(dataSet.tabId);\n\t      if (content === null && isAnchor) {\n\t        throw new Error('A div is required with the following ID [' + dataSet.tabId + ']');\n\t      } else if (content === null) {\n\t        content = PrimeDocument.newElement('<div>').insertAfter(this.element).setAttribute('id', href);\n\t      }\n\n\t      content.hide();\n\n\t      content.addClass(this.options.tabContentClass);\n\t      this.tabContents[dataSet.tabId] = content;\n\t    }.bind(this));\n\n\t    if (this.options.deepLinkingEnabled) {\n\t      const tabId = window.location.hash.replace(/^#/, '');\n\t      if (Utils.isDefined(tabId) && Utils.isDefined(this.tabs[tabId])) {\n\t        this.selectTab(tabId);\n\t      }\n\t    }\n\n\t    this.redraw();\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Re-applies the first-child, last-child, and active classes based on the current state of the tabs. If there\n\t   * is no tab that is active, this also selects the first tab that is visible.\n\t   */\n\t  redraw() {\n\t    let firstVisible = null;\n\t    let lastVisible = null;\n\t    let selectNew = false;\n\t    let noneActive = true;\n\t    for (let i = 0; i < this.tabArray.length; i++) {\n\t      if (this.tabArray[i].isVisible()) {\n\t        if (firstVisible === null) {\n\t          firstVisible = this.tabArray[i];\n\t        }\n\n\t        lastVisible = this.tabArray[i];\n\n\t        if (this.tabArray[i].hasClass('selected')) {\n\t          noneActive = false;\n\t        }\n\t      } else if (this.tabArray[i].hasClass('selected')) {\n\t        selectNew = true;\n\t      }\n\n\t      this.tabArray[i].removeClass('first-visible-tab');\n\t      this.tabArray[i].removeClass('last-visible-tab');\n\t    }\n\n\t    firstVisible.addClass('first-visible-tab');\n\t    lastVisible.addClass('last-visible-tab');\n\n\t    let tabId = null;\n\t    if (selectNew || noneActive) {\n\t      if (PrimeStorage.supported && this.options.localStorageKey !== null) {\n\t        const state = PrimeStorage.getSessionObject(this.options.localStorageKey);\n\t        if (state !== null) {\n\t          tabId = state.tabId;\n\t        }\n\t      }\n\n\t      // If no tabId was found or the tab is not currently visible, select the first visible\n\t      if (tabId === null || !this.tabs[tabId] || !this.tabs[tabId].isVisible()) {\n\t        tabId = firstVisible.getDataSet().tabId;\n\t      }\n\n\t      this.selectTab(tabId);\n\t    }\n\n\t    // If error class handling was enabled, add the error class to the tab and set focus\n\t    if (this.options.errorClass) {\n\t      for (tabId in this.tabContents) {\n\t        if (this.tabContents.hasOwnProperty(tabId)) {\n\t          const errorElement = this.tabContents[tabId].queryFirst('.' + this.options.errorClass);\n\t          if (errorElement !== null) {\n\t            this.tabs[tabId].queryFirst('a').addClass(this.options.errorClass);\n\t            this.selectTab(tabId);\n\t          }\n\t        }\n\t      }\n\t    }\n\t  }\n\n\t  /**\n\t   * Select the active tab. Sets the active class on the li and shows only the corresponding tab content.\n\t   *\n\t   * @param id The Id of the tab to select.\n\t   */\n\t  selectTab(id) {\n\t    if (this.selectedTab !== null && this.selectedTab.getDataSet().tabId === id) {\n\t      return;\n\t    }\n\n\t    for (const tabId in this.tabs) {\n\t      if (this.tabs.hasOwnProperty(tabId)) {\n\t        this.tabs[tabId].removeClass('selected');\n\t      }\n\t    }\n\n\t    this.tabs[id].addClass('selected');\n\t    this.selectedTab = this.tabs[id];\n\t    for (const tabId in this.tabContents) {\n\t      if (this.tabContents.hasOwnProperty(tabId) && tabId === id) {\n\t        this.tabContents[tabId].show('block');\n\t        if (this.options.selectCallback) {\n\t          this.options.selectCallback(this.tabs[tabId], this.tabContents[tabId]);\n\t        }\n\t      } else {\n\t        this.tabContents[tabId].hide();\n\t      }\n\t    }\n\n\t    // Save current selected tab state in local storage. The JSON object isn't necessary at the moment,\n\t    // but we can tack on other properties as needed for additional state in the future.\n\t    if (PrimeStorage.supported && this.options.localStorageKey !== null) {\n\t      const data = {\n\t        tabId: id\n\t      };\n\t      PrimeStorage.setSessionObject(this.options.localStorageKey, data);\n\t    }\n\n\t    const ajaxURL = this.selectedTab.getDataSet().tabUrl;\n\t    if (ajaxURL !== '') {\n\t      this.selectedTab.addClass('loading');\n\t      this.tabContents[id].setHTML('');\n\t      this.tabContents[id].addClass('loading');\n\t      new PrimeRequest(ajaxURL, 'GET')\n\t          .withSuccessHandler(this._handleAJAXResponse)\n\t          .withErrorHandler(this._handleAJAXResponse)\n\t          .go();\n\t    }\n\t  }\n\n\t  /**\n\t   * Shows the tab for the given Id.\n\t   *\n\t   * @param {String} id The Id of the tab to hide.\n\t   */\n\t  showTab(id) {\n\t    this.tabs[id].show();\n\t    this.redraw();\n\t  }\n\n\t  /**\n\t   * Adds a callback for AJAX calls. This is invoked after the AJAX load completes and the HTML is inserted into the\n\t   * DOM. The function is passed the container for the tab that was selected.\n\t   *\n\t   * @param {Function} callback The callback function.\n\t   * @returns {Tabs} This Tabs.\n\t   */\n\t  withAJAXCallback(callback) {\n\t    this.options.ajaxCallback = callback;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Disable the default behavior of allowing a deep link provided on the URL to set the default tab during render.\n\t   *\n\t   * @returns {Tabs} This Tabs.\n\t   */\n\t  withDeepLinkingDisabled() {\n\t    this.options.deepLinkingEnabled = false;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Enable error class handling. When this option is used, if the specified error class is found on any element\n\t   * in the tab content the same error class will be added to the tab to identify the tab contains errors.\n\t   *\n\t   * @returns {Tabs} This Tabs.\n\t   */\n\t  withErrorClassHandling(errorClass) {\n\t    this.options.errorClass = errorClass;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Enables local storage of the currently selected tab. If the user navigates away from the page and back, the same\n\t   * tab will be selected. This key is how the selected tab is stored in local storage and by setting a key you also\n\t   * enable this feature.\n\t   *\n\t   * @param {?String} key The local storage key.\n\t   * @returns {Tabs} This Tabs.\n\t   */\n\t  withLocalStorageKey(key) {\n\t    this.options.localStorageKey = key;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Set more than one option at a time by providing a map of key value pairs. This is considered an advanced\n\t   * method to set options on the widget. The caller needs to know what properties are valid in the options object.\n\t   *\n\t   * @param {Object} options Key value pair of configuration options.\n\t   * @returns {Tabs} This Tabs.\n\t   */\n\t  withOptions(options) {\n\t    if (!Utils.isDefined(options)) {\n\t      return this;\n\t    }\n\n\t    for (let option in options) {\n\t      if (options.hasOwnProperty(option)) {\n\t        this.options[option] = options[option];\n\t      }\n\t    }\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Specifies a callback function that is called whenever tabs are changed.\n\t   *\n\t   * @param {?Function} callback The callback function.\n\t   * @returns {Tabs} This Tabs.\n\t   */\n\t  withSelectCallback(callback) {\n\t    this.options.selectCallback = callback;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the class name for the tab content elements.\n\t   *\n\t   * @param className {String} The class name.\n\t   * @returns {Tabs}\n\t   */\n\t  withTabContentClass(className) {\n\t    this.options.tabContentClass = className;\n\t    return this;\n\t  }\n\n\t  /* ===================================================================================================================\n\t   * Private methods\n\t   * ===================================================================================================================*/\n\n\t  /**\n\t   * Handles the AJAX response.\n\t   *\n\t   * @param {XMLHttpRequest} xhr The AJAX response.\n\t   * @private\n\t   */\n\t  _handleAJAXResponse(xhr) {\n\t    this.selectedTab.removeClass('loading');\n\t    const container = this.tabContents[this.selectedTab.getDataSet().tabId];\n\t    container.removeClass('loading');\n\t    container.setHTML(xhr.responseText);\n\n\t    if (this.options.ajaxCallback !== null) {\n\t      this.options.ajaxCallback(container);\n\t    }\n\t  }\n\n\t  /**\n\t   * Handle the tab click by showing the corresponding panel and hiding the others.\n\t   *\n\t   * @param {MouseEvent} event The click event on the anchor tag.\n\t   * @private\n\t   */\n\t  _handleClick(event) {\n\t    Utils.stopEvent(event);\n\t    const a = new PrimeElement(event.currentTarget);\n\t    if (!a.hasClass('disabled')) {\n\t      const href = a.getAttribute('href');\n\t      if (href.charAt(0) === '#') {\n\t        this.selectTab(href.substring(1));\n\t      } else {\n\t        this.selectTab(href);\n\t      }\n\t    }\n\t  }\n\n\t  /**\n\t   * Set the initial options for this widget.\n\t   * @private\n\t   */\n\t  _setInitialOptions() {\n\t    // Defaults\n\t    this.options = {\n\t      ajaxCallback: null,\n\t      errorClass: null,\n\t      deepLinkingEnabled: true,\n\t      localStorageKey: null,\n\t      selectCallback: null,\n\t      tabContentClass: 'prime-tab-content'\n\t    };\n\n\t    const userOptions = Utils.dataSetToOptions(this.element);\n\t    for (let option in userOptions) {\n\t      if (userOptions.hasOwnProperty(option)) {\n\t        this.options[option] = userOptions[option];\n\t      }\n\t    }\n\t  }\n\t}\n\n\t/*\n\t * Copyright (c) 2017-2018, Inversoft Inc., All Rights Reserved\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n\t * either express or implied. See the License for the specific\n\t * language governing permissions and limitations under the License.\n\t */\n\n\tconst open = [];\n\n\tclass Tooltip {\n\t  /**\n\t   * Constructs a new Tooltip object for the given element.\n\t   *\n\t   * @param {PrimeElement|Element|EventTarget} element The Prime Element for the Tooltip widget.\n\t   * @constructor\n\t   */\n\t  constructor(element) {\n\t    Utils.bindAll(this);\n\n\t    this.element = PrimeElement.wrap(element);\n\t    this._setInitialOptions();\n\t  }\n\n\t  static get open() {\n\t    return open;\n\t  }\n\n\t  /**\n\t   * Hides the tooltip.\n\t   *\n\t   * @returns {Tooltip} This.\n\t   */\n\t  hide() {\n\t    if (Tooltip.open.length > 0) {\n\t      Tooltip.open.forEach(function(t) {\n\t        t.removeFromDOM();\n\t      });\n\t    }\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Initializes the widget by attaching event listeners to the element.\n\t   *\n\t   * @returns {Tooltip} This.\n\t   */\n\t  initialize() {\n\t    this.element.addEventListener('mouseenter', this._handleMouseEnter).addEventListener('mouseleave', this._handleMouseLeave);\n\t    PrimeDocument.addEventListener('scroll', this._handleMouseLeave);\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Shows the tooltip.\n\t   *\n\t   * @returns {Tooltip} This.\n\t   */\n\t  show() {\n\t    const text = this.element.getDataSet()[this.options.dataName] || this.element.getAttribute('title');\n\t    const zIndex = this.element.getRelativeZIndex();\n\t    let classNames = this.options.className + ' ' + this.element.getTagName().toLocaleLowerCase();\n\t    if (this.options.additionalClasses !== null) {\n\t      classNames = classNames + ' ' + this.options.additionalClasses;\n\t    }\n\t    const tooltip = PrimeDocument.newElement('<span>')\n\t        .appendTo(PrimeDocument.bodyElement)\n\t        .addClass(classNames)\n\t        .setHTML(text)\n\t        .setStyle('zIndex', zIndex + 100);\n\n\t    const left = this.element.getLeft();\n\t    const top = this.element.getTop();\n\t    const width = this.element.getWidth();\n\t    const tooltipWidth = tooltip.getWidth();\n\t    const tooltipHeight = tooltip.getHeight();\n\n\t    tooltip.setLeft(left - (tooltipWidth / 2) + (width / 2));\n\t    tooltip.setTop(top - tooltipHeight - 8);\n\n\t    // If the tooltip is too close to the top of the screen invert it and move it under the element\n\t    if ((top - tooltipHeight - 8) < 0) {\n\t      tooltip.setTop(top + this.element.getHeight() + 8).addClass('inverted');\n\t    }\n\n\t    Tooltip.open.push(tooltip);\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the class name to use when creating the tooltip.\n\t   *\n\t   * @param additionalClasses {?String} The class name or spaces separated names.\n\t   * @returns {Tooltip} This.\n\t   */\n\t  withAdditionalClassNames(additionalClasses) {\n\t    this.options.additionalClasses = additionalClasses;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the class name to use when creating the tooltip.\n\t   *\n\t   * @param className {String} The class name.\n\t   * @returns {Tooltip} This.\n\t   */\n\t  withClassName(className) {\n\t    this.options.className = className;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Set data-set name to pull the tooltip text from.\n\t   *\n\t   * @param {string} name The data-set name.\n\t   * @returns {Tooltip} This.\n\t   */\n\t  withDataName(name) {\n\t    this.options.dataName = name;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Set more than one option at a time by providing a map of key value pairs. This is considered an advanced\n\t   * method to set options on the widget. The caller needs to know what properties are valid in the options object.\n\t   *\n\t   * @param {Object} options Key value pair of configuration options.\n\t   * @returns {Tooltip} This.\n\t   */\n\t  withOptions(options) {\n\t    if (!Utils.isDefined(options)) {\n\t      return this;\n\t    }\n\n\t    for (let option in options) {\n\t      if (options.hasOwnProperty(option)) {\n\t        this.options[option] = options[option];\n\t      }\n\t    }\n\t    return this;\n\t  }\n\n\t  /* ===================================================================================================================\n\t   * Private methods\n\t   * ===================================================================================================================*/\n\n\t  /**\n\t   * Handles the mouse enter event to show the tooltip.\n\t   *\n\t   * @private\n\t   */\n\t  _handleMouseEnter() {\n\t    this.show();\n\t  }\n\n\t  /**\n\t   * Handles the mouse exit event to hide the tooltip.\n\t   *\n\t   * @private\n\t   */\n\t  _handleMouseLeave() {\n\t    this.hide();\n\t  }\n\n\t  /**\n\t   * Set the initial options for this widget.\n\t   * @private\n\t   */\n\t  _setInitialOptions() {\n\t    // Defaults\n\t    this.options = {\n\t      additionalClasses: null,\n\t      className: 'prime-tooltip',\n\t      dataName: 'tooltip'\n\t    };\n\n\t    const userOptions = Utils.dataSetToOptions(this.element);\n\t    for (let option in userOptions) {\n\t      if (userOptions.hasOwnProperty(option)) {\n\t        this.options[option] = userOptions[option];\n\t      }\n\t    }\n\t  }\n\t}\n\n\tPrimeDocument.onReady(function() {\n\t  // Fix browser issues with tooltips sticking around on back-button navigation\n\t  PrimeWindow.addEventListener('beforeunload', function() {\n\t    if (Tooltip.open.length > 0) {\n\t      Tooltip.open.forEach(function(t) {\n\t        t.removeFromDOM();\n\t      });\n\t    }\n\t  });\n\t});\n\n\t/*\n\t * Copyright (c) 2016-2017, Inversoft Inc., All Rights Reserved\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n\t * either express or implied. See the License for the specific\n\t * language governing permissions and limitations under the License.\n\t */\n\n\tclass TreeView {\n\t  /**\n\t   * Constructs a new TreeView object for the given element.\n\t   *\n\t   * @param {PrimeElement|Element|EventTarget} element The Prime Element for the TreeView widget.\n\t   * @constructor\n\t   */\n\t  constructor(element) {\n\t    Utils.bindAll(this);\n\t    this.element = PrimeElement.wrap(element);\n\t    this._setInitialOptions();\n\t  }\n\n\t  /**\n\t   * Initializes the element by traverse its children to find all of the anchor tags with the folder-toggle class (or\n\t   * whatever you set the class to).\n\t   *\n\t   * @returns {TreeView} This.\n\t   */\n\t  initialize() {\n\t    this.element.query('a.' + this.options.folderToggleClassName).each(function(e) {\n\t      e.addEventListener('click', this._handleClick);\n\t    }.bind(this));\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the folder toggle class name.\n\t   *\n\t   * @param className {String} The class name.\n\t   * @returns {TreeView} This.\n\t   */\n\t  withFolderToggleClassName(className) {\n\t    this.options.folderToggleClassName = className;\n\t    return this;\n\t  }\n\n\t  /* ===================================================================================================================\n\t   * Private methods\n\t   * ===================================================================================================================*/\n\n\t  // noinspection JSMethodCanBeStatic\n\t  /**\n\t   * Handles the click event.\n\t   * @private\n\t   */\n\t  _handleClick(event) {\n\t    Utils.stopEvent(event);\n\t    const a = PrimeElement.wrap(event.target);\n\t    const li = a.getParent();\n\t    if (a.hasClass('open')) {\n\t      a.removeClass('open');\n\t      li.removeClass('open');\n\t    } else {\n\t      a.addClass('open');\n\t      li.addClass('open');\n\t    }\n\t  }\n\n\t  /**\n\t   * Set the initial options for this widget.\n\t   * @private\n\t   */\n\t  _setInitialOptions() {\n\t    // Defaults\n\t    this.options = {\n\t      folderToggleClassName: 'prime-folder-toggle'\n\t    };\n\n\t    const userOptions = Utils.dataSetToOptions(this.element);\n\t    for (const option in userOptions) {\n\t      if (userOptions.hasOwnProperty(option)) {\n\t        this.options[option] = userOptions[option];\n\t      }\n\t    }\n\t  }\n\t}\n\n\t/*\n\t * Copyright (c) 2017, Inversoft Inc., All Rights Reserved\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n\t * either express or implied. See the License for the specific\n\t * language governing permissions and limitations under the License.\n\t */\n\n\tvar Widgets = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tAJAXDialog: AJAXDialog,\n\t\tDateTimePicker: DateTimePicker,\n\t\tDismissable: Dismissable,\n\t\tDraggable: Draggable,\n\t\tHTMLDialog: HTMLDialog,\n\t\tInProgress: InProgress,\n\t\tMultipleSelect: MultipleSelect,\n\t\tOverlay: Overlay,\n\t\tReorder: Reorder,\n\t\tSearcher: Searcher,\n\t\tSideMenu: SideMenu,\n\t\tSplitButton: SplitButton,\n\t\tTable: Table,\n\t\tTabs: Tabs,\n\t\tTooltip: Tooltip,\n\t\tTouchable: Touchable,\n\t\tTreeView: TreeView\n\t});\n\n\t/*\n\t * Copyright (c) 2012-2018, Inversoft Inc., All Rights Reserved\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n\t * either express or implied. See the License for the specific\n\t * language governing permissions and limitations under the License.\n\t */\n\n\tclass BaseTransition {\n\t  /**\n\t   * Constructs a BaseTransition for the given element.\n\t   *\n\t   * @param {PrimeElement|Element|EventTarget} element The Prime Element the effect will be applied to.\n\t   * @param {number} endValue The end value for the transition.\n\t   * @constructor\n\t   */\n\t  constructor(element, endValue) {\n\t    Utils.bindAll(this);\n\t    this.element = PrimeElement.wrap(element);\n\t    this.duration = 1000;\n\t    this.endFunction = null;\n\t    this.endValue = endValue;\n\t    this.iterations = 20;\n\t  }\n\n\t  /**\n\t   * Sets the function that is called when the effect has completed.\n\t   *\n\t   * @param {Function} endFunction The function that is called when the effect is completed.\n\t   * @returns {BaseTransition} This Effect.\n\t   */\n\t  withEndFunction(endFunction) {\n\t    this.endFunction = endFunction;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Sets the duration of the fade-out effect.\n\t   *\n\t   * @param {number} duration The duration in milliseconds.\n\t   * @returns {BaseTransition} This Effect.\n\t   */\n\t  withDuration(duration) {\n\t    if (duration < 100) {\n\t      throw new TypeError('Duration should be greater than 100 milliseconds or it won\\'t really be noticeable');\n\t    }\n\n\t    this.duration = duration;\n\t    return this;\n\t  }\n\n\t  /*\n\t   * Protected functions\n\t   */\n\n\t  /**\n\t   * Changes an integer style property of the Element iteratively over a given period of time from one value to another\n\t   * value.\n\t   *\n\t   * @protected\n\t   * @param {Function} getFunction The function on the element to call to get the current value for the transition.\n\t   * @param {Function} setFunction The function on the element to call to set the new value for the transition.\n\t   */\n\t  _changeNumberStyleIteratively(getFunction, setFunction) {\n\t    let currentValue = getFunction.call(this.element);\n\t    const step = Math.abs(this.endValue - currentValue) / this.iterations;\n\n\t    // Close around ourselves\n\t    const self = this;\n\t    const stepFunction = function(last) {\n\t      if (last) {\n\t        currentValue = self.endValue;\n\t      } else {\n\t        if (currentValue < self.endValue) {\n\t          currentValue += step;\n\t        } else {\n\t          currentValue -= step;\n\t        }\n\t      }\n\n\t      setFunction.call(self.element, currentValue);\n\t    };\n\n\t    Utils.callIteratively(this.duration, this.iterations, stepFunction, this._internalEndFunction);\n\t  }\n\n\t  /* ===================================================================================================================\n\t   * Private Methods\n\t   * ===================================================================================================================*/\n\n\t  /**\n\t   * Handles the call back at the end.\n\t   *\n\t   * @private\n\t   */\n\t  _internalEndFunction() {\n\t    this._subclassEndFunction(this);\n\n\t    if (this.endFunction) {\n\t      this.endFunction(this);\n\t    }\n\t  }\n\n\t  /**\n\t   * Virtual function stub\n\t   *\n\t   * @private\n\t   */\n\t  _subclassEndFunction() {\n\t  }\n\t}\n\n\tclass Fade extends BaseTransition {\n\t  /**\n\t   * Constructs a new Fade for the given element. The fade effect uses the CSS opacity style and supports the IE alpha\n\t   * style. The duration defaults to 1000 milliseconds (1 second). This changes the opacity over the duration from 1.0 to\n\t   * 0.0. At the end, this hides the element so that it doesn't take up any space.\n\t   *\n\t   * @constructor\n\t   * @param {PrimeElement|Element|EventTarget} element The Prime Element to fade out.\n\t   */\n\t  constructor(element) {\n\t    super(element, 0.0);\n\t  }\n\n\t  /**\n\t   * Internal call back at the end of the transition. This hides the element so it doesn't take up space.\n\t   *\n\t   * @override\n\t   * @private\n\t   */\n\t  _subclassEndFunction() {\n\t    this.element.hide();\n\t  }\n\n\t  /**\n\t   * Executes the fade effect on the element using the opacity style.\n\t   */\n\t  go() {\n\t    this._changeNumberStyleIteratively(this.element.getOpacity, this.element.setOpacity);\n\t  }\n\t}\n\n\tclass Appear extends BaseTransition {\n\t  /**\n\t   * Constructs a new Appear for the given element. The appear effect uses the CSS opacity style and supports the IE\n\t   * alpha style. The duration defaults to 1000 milliseconds (1 second). This first sets the opacity to 0, then it shows\n\t   * the element and finally it raises the opacity.\n\t   *\n\t   * @constructor\n\t   * @param {PrimeElement|Element|EventTarget} element The Prime Element to appear.\n\t   * @param {number} [opacity=1.0] The final opacity to reach when the effect is complete. Defaults to 1.0.\n\t   */\n\t  constructor(element, opacity) {\n\t    if (!Utils.isDefined(opacity)) {\n\t      opacity = 1.0;\n\t    }\n\t    super(element, opacity);\n\t  }\n\n\t  /**\n\t   * Executes the appear effect on the element using the opacity style.\n\t   */\n\t  go() {\n\t    this.element.setOpacity(0.0);\n\t    this.element.show();\n\t    this._changeNumberStyleIteratively(this.element.getOpacity, this.element.setOpacity);\n\t  }\n\t}\n\n\tclass ScrollTo extends BaseTransition {\n\t  /**\n\t   * Constructs a new ScrollTo for the given element. The duration defaults to 1000 milliseconds (1 second).\n\t   *\n\t   * @param {PrimeElement|Element|EventTarget} element The Prime Element to scroll.\n\t   * @param {number} position The position to scroll the element to.\n\t   * @constructor\n\t   */\n\t  constructor(element, position) {\n\t    super(element, position);\n\n\t    this.axis = 'vertical';\n\t  }\n\n\t  /**\n\t   * Set the scroll axis, either 'horizontal' or 'vertical'. Default is 'vertical'.\n\t   *\n\t   * @param {string} axis The axis to scroll.\n\t   * @returns {ScrollTo}\n\t   */\n\t  withAxis(axis) {\n\t    this.axis = axis || 'vertical';\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Executes the scroll effect on the element.\n\t   */\n\t  go() {\n\t    if (this.axis === 'vertical') {\n\t      this._changeNumberStyleIteratively(this.element.getScrollTop, this.element.scrollTo);\n\t    } else {\n\t      this._changeNumberStyleIteratively(this.element.getScrollLeft, this.element.scrollLeftTo);\n\t    }\n\t  }\n\t}\n\n\tclass SlideOpen {\n\t  /**\n\t   * Creates a SlideOpen effect on the given element.\n\t   *\n\t   * @param {PrimeElement} element The element.\n\t   * @constructor\n\t   */\n\t  constructor(element) {\n\t    Utils.bindAll(this);\n\n\t    this.element = element;\n\t    if (this.isOpen()) {\n\t      element.domElement.primeVisibleHeight = element.getHeight();\n\t    } else {\n\t      element.setStyle('height', 'auto');\n\t      element.domElement.primeVisibleHeight = element.getHeight();\n\t      element.setStyle('height', '0');\n\t    }\n\n\t    this.isTransitioning = false;\n\n\t    this._setInitialOptions();\n\t  }\n\n\t  close() {\n\t    if (!this.isOpen()) {\n\t      return;\n\t    }\n\n\t    // Set a fixed height instead of auto so that the transition runs, but only if the element is \"open\"\n\t    this.element.setHeight(this.element.domElement.primeVisibleHeight);\n\t    this.isTransitioning = true;\n\n\t    // This timeout is needed since the height change takes time to run\n\t    setTimeout(function() {\n\t      this.element.setHeight(0);\n\t      this.element.removeClass('open');\n\t      this.isTransitioning = false;\n\n\t      if (this.options.closeCallback !== null) {\n\t        this.options.closeCallback();\n\t      }\n\t    }.bind(this), this.options.timeout);\n\t  }\n\n\t  isOpen() {\n\t    return this.element.getHeight() !== 0 || this.element.hasClass('open');\n\t  }\n\n\t  open() {\n\t    if (this.isOpen()) {\n\t      return;\n\t    }\n\n\t    this.element.setHeight(this.element.domElement.primeVisibleHeight);\n\t    this.isTransitioning = true;\n\n\t    setTimeout(function() {\n\t      this.element.setHeight('auto');\n\t      this.element.addClass('open');\n\t      this.isTransitioning = false;\n\n\t      if (this.options.openCallback !== null) {\n\t        this.options.openCallback();\n\t      }\n\t    }.bind(this), this.options.timeout);\n\t  }\n\n\t  toggle() {\n\t    if (this.isOpen()) {\n\t      this.close();\n\t    } else {\n\t      this.open();\n\t    }\n\t  }\n\n\t  /**\n\t   * Set the close callback function.\n\t   *\n\t   * @param {?Function} callback The close callback\n\t   * @returns {SlideOpen} This.\n\t   */\n\t  withCloseCallback(callback) {\n\t    this.options.closeCallback = callback;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Set the open callback function.\n\t   *\n\t   * @param {?Function} callback The open callback\n\t   * @returns {SlideOpen} This.\n\t   */\n\t  withOpenCallback(callback) {\n\t    this.options.openCallback = callback;\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Set more than one option at a time by providing a map of key value pairs. This is considered an advanced\n\t   * method to set options on the widget. The caller needs to know what properties are valid in the options object.\n\t   *\n\t   * @param {Object} options Key value pair of configuration options.\n\t   * @returns {SlideOpen} This.\n\t   */\n\t  withOptions(options) {\n\t    if (!Utils.isDefined(options)) {\n\t      return this;\n\t    }\n\n\t    for (let option in options) {\n\t      if (options.hasOwnProperty(option)) {\n\t        this.options[option] = options[option];\n\t      }\n\t    }\n\t    return this;\n\t  }\n\n\t  /* ===================================================================================================================\n\t   * Private methods\n\t   * ===================================================================================================================*/\n\n\t  /**\n\t   * Set the initial options of the widget.\n\t   * @private\n\t   */\n\t  _setInitialOptions() {\n\t    // Defaults\n\t    this.options = {\n\t      openCallback: null,\n\t      closeCallback: null,\n\t      timeout: 310\n\t    };\n\n\t    const userOptions = Utils.dataSetToOptions(this.element);\n\t    for (let option in userOptions) {\n\t      if (userOptions.hasOwnProperty(option)) {\n\t        this.options[option] = userOptions[option];\n\t      }\n\t    }\n\t  }\n\t}\n\n\tvar Effects = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tBaseTransition: BaseTransition,\n\t\tFade: Fade,\n\t\tAppear: Appear,\n\t\tScrollTo: ScrollTo,\n\t\tSlideOpen: SlideOpen\n\t});\n\n\t/*\n\t * Copyright (c) 2016-2017, Inversoft Inc., All Rights Reserved\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n\t * either express or implied. See the License for the specific\n\t * language governing permissions and limitations under the License.\n\t */\n\n\tclass DataQueue {\n\t  /**\n\t   * First-In-First-Out Queue implementation modeled after java.util.Deque interface.\n\t   *\n\t   * @constructor\n\t   */\n\t  constructor() {\n\t    Utils.bindAll(this);\n\t    this._elements = {};\n\t    this._head = 0;\n\t    this._tail = 0;\n\t  }\n\n\t  /**\n\t   * Add the element to the head of the queue.\n\t   *\n\t   * @param {Object} element An object to store in the queue.\n\t   * @returns {DataQueue} This Element.\n\t   */\n\t  add(element) {\n\t    this._elements[this._head] = element;\n\t    this._head++;\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Return true if the queue is empty.\n\t   *\n\t   * @returns {boolean} True if the queue is empty, false if not.\n\t   */\n\t  isEmpty() {\n\t    return this._head === this._tail;\n\t  }\n\n\t  /**\n\t   * Return but do not remove the tail of the queue. This is the oldest element in the queue.\n\t   *\n\t   * @returns {Object} The object at the tail of the queue, or null if empty.\n\t   */\n\t  peek() {\n\t    if (this.isEmpty()) {\n\t      return null;\n\t    }\n\n\t    return this._elements[this._tail];\n\t  }\n\n\t  /**\n\t   * Return and remove the tail of the queue. This is the oldest element in the queue.\n\t   *\n\t   * @returns {Object} the object at the tail of the queue, or null if the queue is empty.\n\t   */\n\t  poll() {\n\t    if (this.isEmpty()) {\n\t      return null;\n\t    }\n\n\t    const object = this._elements[this._tail];\n\t    delete this._elements[this._tail];\n\t    this._tail++;\n\n\t    // The cursor should not go off the end of the queue\n\t    if (this._cursor < this._tail) {\n\t      this._cursor = this._tail;\n\t    }\n\n\t    return object;\n\t  }\n\n\t  /**\n\t   * Return the size of the queue.\n\t   *\n\t   * @returns {Number} The size of the queue.\n\t   */\n\t  size() {\n\t    return this._head - this._tail;\n\t  }\n\n\t}\n\n\t/*\n\t * Copyright (c) 2013-2017, Inversoft Inc., All Rights Reserved\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n\t * either express or implied. See the License for the specific\n\t * language governing permissions and limitations under the License.\n\t */\n\n\tclass Template {\n\t  /**\n\t   * A Javascript Object that can serve to generate Prime.Document.Element from a source string and optional parameters.\n\t   *\n\t   * @constructor\n\t   * @param {string} template The String that defines the source of the template.\n\t   */\n\t  constructor(template) {\n\t    Utils.bindAll(this);\n\t    this.init(template);\n\t  }\n\n\t  init(template) {\n\t    this.template = template;\n\t  }\n\n\t  /**\n\t   * Generates a String from the given parameterHash.  Provide a hash of String keys to values.\n\t   * Keys can be regular text strings, in which case it will look for and replace #{key} as with the value.  You can\n\t   * also make the key a String \"/key/\", which will be converted to a Regex and run.\n\t   *\n\t   * For the value you can provide a straight up String, int, etc, or you can provide a function which will be called\n\t   * to provide the value\n\t   *\n\t   * @param {Object} parameters An object that contains the parameters for the template to replace.\n\t   * @returns {string} The result of executing the template.\n\t   */\n\t  generate(parameters) {\n\t    parameters = Utils.isDefined(parameters) ? parameters : {};\n\t    let templateCopy = String(this.template);\n\t    for (let key in parameters) {\n\t      if (parameters.hasOwnProperty(key)) {\n\t        const value = parameters[key];\n\t        let expressedValue;\n\t        if (typeof(value) === 'function') {\n\t          expressedValue = value();\n\t        } else {\n\t          expressedValue = value;\n\t        }\n\n\t        if (key.indexOf('/') === 0 && key.lastIndexOf('/') === key.length - 1) {\n\t          templateCopy = templateCopy.replace(new RegExp(key.substring(1, key.length - 1), \"g\"), expressedValue);\n\t        } else {\n\t          const expressedKey = \"#{\" + key + \"}\";\n\t          while (templateCopy.indexOf(expressedKey) !== -1) {\n\t            templateCopy = templateCopy.replace(expressedKey, expressedValue);\n\t          }\n\t        }\n\t      }\n\t    }\n\n\t    return templateCopy;\n\t  }\n\n\t  /**\n\t   * Calls to generate and then appends the resulting value to the inner HTML of the provided primeElement.\n\t   *\n\t   * @param {PrimeElement} primeElement The prime Element instance to append the result of executing the template to.\n\t   * @param {Object} parameters An object that contains the parameters for the template to replace.\n\t   */\n\t  appendTo(primeElement, parameters) {\n\t    if (Utils.isDefined(primeElement)) {\n\t      primeElement.setHTML(primeElement.getHTML() + this.generate(parameters));\n\t    } else {\n\t      throw new TypeError('Please supply an element to append to');\n\t    }\n\t  }\n\n\t  /**\n\t   * Calls to generate and then inserts the resulting elements into the dom before the primeElement\n\t   *\n\t   * @param {PrimeElement} primeElement The prime Element instance to insert the result of executing the template before.\n\t   * @param {Object} parameters An object that contains the parameters for the template to replace.\n\t   */\n\t  insertBefore(primeElement, parameters) {\n\t    if (Utils.isDefined(primeElement)) {\n\t      const holder = document.createElement('div');\n\t      holder.innerHTML = this.generate(parameters);\n\t      new PrimeElement(holder.children[0]).insertBefore(primeElement);\n\t    } else {\n\t      throw new TypeError('Please supply an element to append to');\n\t    }\n\t  }\n\n\t  /**\n\t   * Calls to generate and then inserts the resulting elements into the dom after the primeElement\n\t   *\n\t   * @param {PrimeElement} primeElement The prime Element instance to insert the result of executing the template after.\n\t   * @param {Object} parameters An object that contains the parameters for the template to replace.\n\t   */\n\t  insertAfter(primeElement, parameters) {\n\t    if (Utils.isDefined(primeElement)) {\n\t      const holder = document.createElement('div');\n\t      holder.innerHTML = this.generate(parameters);\n\t      new PrimeElement(holder.children[0]).insertAfter(primeElement);\n\t    } else {\n\t      throw new TypeError('Please supply an element to append to');\n\t    }\n\t  }\n\t}\n\n\t/*\n\t * Copyright (c) 2017, Inversoft Inc., All Rights Reserved\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *   http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing,\n\t * software distributed under the License is distributed on an\n\t * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n\t * either express or implied. See the License for the specific\n\t * language governing permissions and limitations under the License.\n\t */\n\n\tconst Ajax = {\n\t  Request: PrimeRequest\n\t};\n\n\tconst Data = {\n\t  Queue: DataQueue\n\t};\n\n\texports.Ajax = Ajax;\n\texports.Browser = Browser;\n\texports.Data = Data;\n\texports.Date = PrimeDate;\n\texports.Document = PrimeDocument;\n\texports.Effects = Effects;\n\texports.Events = Events;\n\texports.Storage = PrimeStorage;\n\texports.Template = Template;\n\texports.Utils = Utils;\n\texports.Widgets = Widgets;\n\texports.Window = PrimeWindow;\n\n\treturn exports;\n\n}({}));\n\n","/*\n * Copyright (c) 2012-2017, Inversoft Inc., All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific\n * language governing permissions and limitations under the License.\n */\n'use strict';\n\n/**\n * The Browser namespace. This namespace does not contain any classes, just functions.\n *\n * @namespace Browser\n */\nconst Browser = {\n  /**\n   * Detects the browser name and version.\n   */\n  detect: function() {\n    this.name = this._searchString(this.dataBrowser) || \"An unknown browser\";\n    this.version = this._searchVersion(navigator.userAgent) || this._searchVersion(navigator.appVersion) || \"an unknown version\";\n    this.os = this._searchString(this.dataOS) || \"an unknown OS\";\n  },\n\n\n  /* ===================================================================================================================\n   * Private Methods\n   * ===================================================================================================================*/\n\n  /**\n   *\n   * @param {Object} data The data array.\n   * @returns {?string} The browser identity String.\n   * @private\n   */\n  _searchString: function(data) {\n    for (let i = 0; i < data.length; i++) {\n      const dataString = data[i].string;\n      const dataProp = data[i].prop;\n      this.versionSearchString = data[i].versionSearch || data[i].identity;\n      if (dataString && dataString.indexOf(data[i].subString) !== -1) {\n        return data[i].identity;\n      } else if (dataProp) {\n        return data[i].identity;\n      }\n    }\n\n    return null;\n  },\n\n  /**\n   *\n   * @param {string} dataString The browser data string.\n   * @returns {?number} The version or null.\n   * @private\n   */\n  _searchVersion: function(dataString) {\n    const index = dataString.indexOf(this.versionSearchString);\n    if (index === -1) {\n      return null;\n    }\n\n    return parseFloat(dataString.substring(index + this.versionSearchString.length + 1));\n  },\n\n  dataBrowser: [\n    {\n      string: navigator.userAgent,\n      subString: \"Chrome\",\n      identity: \"Chrome\"\n    },\n    {\n      string: navigator.userAgent,\n      subString: \"OmniWeb\",\n      versionSearch: \"OmniWeb/\",\n      identity: \"OmniWeb\"\n    },\n    {\n      string: navigator.vendor,\n      subString: \"Apple\",\n      identity: \"Safari\",\n      versionSearch: \"Version\"\n    },\n    {\n      prop: window.opera,\n      identity: \"Opera\",\n      versionSearch: \"Version\"\n    },\n    {\n      string: navigator.vendor,\n      subString: \"iCab\",\n      identity: \"iCab\"\n    },\n    {\n      string: navigator.vendor,\n      subString: \"KDE\",\n      identity: \"Konqueror\"\n    },\n    {\n      string: navigator.userAgent,\n      subString: \"Firefox\",\n      identity: \"Firefox\"\n    },\n    {\n      string: navigator.vendor,\n      subString: \"Camino\",\n      identity: \"Camino\"\n    },\n    {    // for newer Netscapes (6+)\n      string: navigator.userAgent,\n      subString: \"Netscape\",\n      identity: \"Netscape\"\n    },\n    {\n      string: navigator.userAgent,\n      subString: \"MSIE\",\n      identity: \"Explorer\",\n      versionSearch: \"MSIE\"\n    },\n    {\n      string: navigator.userAgent,\n      subString: \"Gecko\",\n      identity: \"Mozilla\",\n      versionSearch: \"rv\"\n    },\n    {     // for older Netscapes (4-)\n      string: navigator.userAgent,\n      subString: \"Mozilla\",\n      identity: \"Netscape\",\n      versionSearch: \"Mozilla\"\n    }\n  ],\n  dataOS: [\n    {\n      string: navigator.platform,\n      subString: \"Win\",\n      identity: \"Windows\"\n    },\n    {\n      string: navigator.platform,\n      subString: \"Mac\",\n      identity: \"macOS\"\n    },\n    {\n      string: navigator.userAgent,\n      subString: \"iPhone\",\n      identity: \"iPhone/iPod\"\n    },\n    {\n      string: navigator.userAgent,\n      subString: \"iPad\",\n      identity: \"iPad\"\n    },\n    {\n      string: navigator.platform,\n      subString: \"Linux\",\n      identity: \"Linux\"\n    }\n  ]\n};\nBrowser.detect();\n\nexport {Browser}\n","/*\n * Copyright (c) 2017-2018, Inversoft Inc., All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific\n * language governing permissions and limitations under the License.\n */\n'use strict';\n\nimport {Browser} from \"../Browser.js\";\nimport {PrimeDocument} from \"../PrimeDocument.js\";\nimport {PrimeElementList} from \"./PrimeElementList.js\";\nimport {Utils} from \"../Utils.js\";\n\nconst blockElementRegexp = /^(?:ARTICLE|ASIDE|BLOCKQUOTE|BODY|BR|BUTTON|CANVAS|CAPTION|COL|COLGROUP|DD|DIV|DL|DT|EMBED|FIELDSET|FIGCAPTION|FIGURE|FOOTER|FORM|H1|H2|H3|H4|H5|H6|HEADER|HGROUP|HR|LI|MAP|OBJECT|OL|OUTPUT|P|PRE|PROGRESS|SECTION|TABLE|TBODY|TEXTAREA|TFOOT|TH|THEAD|TR|UL|VIDEO)$/;\nconst mouseEventsRegexp = /^(?:click|dblclick|mousedown|mouseup|mouseover|mousemove|mouseout|mouseenter|mouseleave)$/;\nconst htmlEventsRegexp = /^(?:abort|blur|change|error|focus|load|reset|resize|scroll|select|submit|unload)$/;\nlet anonymousId = 1;\nconst ieAlphaRegexp = /alpha\\(opacity=(.+)\\)/;\n\nclass PrimeElement {\n  /**\n   * Creates an Element class for the given DOM element.\n   *\n   * @constructor\n   * @param {Element|EventTarget} element The element\n   */\n  constructor(element) {\n    if (!Utils.isDefined(element.nodeType) || element.nodeType !== 1) {\n      throw new TypeError('You can only pass in DOM element Node objects to the PrimeDocument.Element constructor');\n    }\n\n    Utils.bindAll(this);\n    this.domElement = element;\n    this.domElement.customEventListeners = [];\n    this.domElement.eventListeners = {};\n  }\n\n  /**\n   * Regular expression that captures the tagnames of all the block elements in HTML5.\n   *\n   * @type {RegExp}\n   */\n  static get blockElementRegexp() {\n    return blockElementRegexp;\n  }\n\n  static get mouseEventsRegexp() {\n    return mouseEventsRegexp;\n  }\n\n  static get htmlEventsRegexp() {\n    return htmlEventsRegexp;\n  }\n\n  static get anonymousId() {\n    return anonymousId;\n  }\n\n  static set anonymousId(value) {\n    anonymousId = value;\n  }\n\n  static get ieAlphaRegexp() {\n    return ieAlphaRegexp;\n  }\n\n  /**\n   * Static method that wraps an element in a PrimeElement unless it is already wrapped. In that case, it simply\n   * returns the element.\n   *\n   * @param {PrimeElement|Element|EventTarget} element The element to wrap.\n   * @static\n   */\n  static wrap(element) {\n    return (element instanceof PrimeElement) ? element : new PrimeElement(element);\n  }\n\n  /**\n   * Static method that unwraps an element to a DOM element. This is the inverse of Element.wrap. If this is passed an\n   * Element, it returns domElement. Otherwise, this just returns the element.\n   *\n   * @returns {PrimeElement} This Element.\n   */\n  static unwrap(element) {\n    return (element instanceof PrimeElement) ? element.domElement : element;\n  }\n\n  /**\n   * Adds the given class (or list of space separated classes) to this Element.\n   *\n   * @param {string} classNames The class name(s) separated by a space.\n   * @returns {PrimeElement} This Element.\n   */\n  addClass(classNames) {\n    let currentClassName = this.domElement.className;\n    if (currentClassName === '') {\n      currentClassName = classNames;\n    } else {\n      const currentClassNameList = this.domElement.className.split(Utils.spaceRegex);\n      const newClassNameList = classNames.split(Utils.spaceRegex);\n      for (let i = 0; i < newClassNameList.length; i++) {\n        if (currentClassNameList.indexOf(newClassNameList[i]) === -1) {\n          currentClassNameList.push(newClassNameList[i]);\n        }\n      }\n\n      currentClassName = currentClassNameList.join(' ');\n    }\n\n    this.domElement.className = currentClassName;\n    return this;\n  }\n\n  /**\n   * @callback PrimeDelegationEventListener\n   *\n   * @param {Event} event the original event\n   * @param {PrimeElement} target the target domElement that matched the registered selector\n   */\n\n  /**\n   * Attaches an event listener to the element and will only invoke the listener when the event target matches\n   * the provided selector.\n   *\n   * The intent of this function is to provide a delegated listener and handle events from nested elements.\n   *\n   * @param {string} event The name of the event\n   * @param  {string} selector The selector to match against the Element\n   * @param {PrimeDelegationEventListener} listener The event listener function\n   */\n  addDelegatedEventListener(event, selector, listener) {\n    this.domElement.delegatedListeners =  this.domElement.delegatedListeners || [];\n    let allDelegatedListeners = this.domElement.delegatedListeners;\n\n    // Store the event listeners in the following format:\n    //   [ event_type -> [ selector -> [ listeners ] ] ]\n    //\n    // Example:\n    //   [ 'click' -> [ 'a.foo' -> [ funcA, funcB ] ] ]\n\n    if (!(event in allDelegatedListeners)) {\n      allDelegatedListeners[event] = [];\n    }\n\n    if (!(selector in allDelegatedListeners[event])) {\n      allDelegatedListeners[event][selector] = [];\n    }\n\n    let delegatedListeners = allDelegatedListeners[event][selector] || [];\n    if (!(listener in delegatedListeners)) {\n      delegatedListeners.push(listener);\n    }\n\n    this.addEventListener(event, this._handleDelegatedEvent);\n  }\n\n  /**\n   * Attaches an event listener to this Element.\n   *\n   * @param {string} event The name of the event.\n   * @param {Function} listener The event listener function.\n   * @returns {PrimeElement} This Element.\n   */\n  addEventListener(event, listener) {\n    if (event.indexOf(':') === -1) {\n      // Traditional event\n      this.domElement.eventListeners = this.domElement.eventListeners || {};\n      this.domElement.eventListeners[event] = this.domElement.eventListeners[event] || [];\n      if (this.domElement.eventListeners[event].indexOf(listener) === -1) {\n        this.domElement.eventListeners[event].push(listener);\n      }\n      this.domElement.addEventListener(event, listener, false);\n    } else {\n      // Custom event\n      this.domElement.customEventListeners = this.domElement.customEventListeners || {};\n      this.domElement.customEventListeners[event] = this.domElement.customEventListeners[event] || [];\n      if (this.domElement.customEventListeners[event].indexOf(listener) === -1) {\n        this.domElement.customEventListeners[event].push(listener);\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Appends the given element to this element. If the given element already exists in the DOM, it is removed from its\n   * current location and placed at the end of this element.\n   *\n   * @param {PrimeElement|Node} element The element to append.\n   * @returns {PrimeElement} This Element.\n   */\n  appendElement(element) {\n    const domElement = (element instanceof PrimeElement) ? element.domElement : element;\n    if (domElement.parentNode) {\n      domElement.parentNode.removeChild(domElement);\n    }\n\n    this.domElement.appendChild(domElement);\n    return this;\n  }\n\n  /**\n   * Appends the given HTML string to this element.\n   *\n   * @param {string} html The HTML to append.\n   * @returns {PrimeElement} This Element.\n   */\n  appendHTML(html) {\n    this.domElement.insertAdjacentHTML('beforeend', html);\n    return this;\n  }\n\n  /**\n   * Inserts this Element (which must be a newly created Element) into the DOM inside at the very end of the given\n   * element.\n   *\n   * @param {PrimeElement|Node} element The element to insert this Element into.\n   * @returns {PrimeElement} This Element.\n   */\n  appendTo(element) {\n    // Error out for now if this element is in the document so we can punt on cloning for now\n    if (this.domElement.parentNode) {\n      throw new TypeError('You can only insert new PrimeElements for now');\n    }\n\n    const domElement = (element instanceof PrimeElement) ? element.domElement : element;\n    if (domElement.parentNode) {\n      domElement.appendChild(this.domElement);\n    } else {\n      throw new TypeError('The element you passed into appendTo is not in the DOM. You can\\'t insert a PrimeElement inside an element that isn\\'t in the DOM yet.');\n    }\n\n    return this;\n  }\n\n  /**\n   * Fires an event on the Element.\n   *\n   * @param {string} event The name of the event.\n   * @param {Object} [memo] Assigned to the memo field of the event.\n   * @param {Object} [target] The target.\n   * @param {boolean} [bubbling] If the event is bubbling, defaults to true.\n   * @param {boolean} [cancelable] If the event is cancellable, defaults to true.\n   * @returns {PrimeElement} This Element.\n   */\n  fireEvent(event, memo, target, bubbling, cancelable) {\n    memo = Utils.isDefined(memo) ? memo : {};\n    target = Utils.isDefined(target) ? target : this;\n    bubbling = Utils.isDefined(bubbling) ? bubbling : true;\n    cancelable = Utils.isDefined(cancelable) ? cancelable : true;\n\n    let evt;\n    if (event.indexOf(':') === -1) {\n      // Traditional event\n      if (document.createEventObject) {\n        // Dispatch for IE\n        evt = document.createEventObject();\n        evt.memo = memo || {};\n        evt.cancelBubble = !bubbling;\n        this.domElement.fireEvent('on' + event, evt);\n      } else if (document.createEvent) {\n        // Dispatch for others\n        if (PrimeElement.mouseEventsRegexp.test(event)) {\n          evt = document.createEvent(\"MouseEvents\");\n          evt.initMouseEvent(event, bubbling, cancelable, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);\n        } else if (PrimeElement.htmlEventsRegexp.test(event)) {\n          evt = document.createEvent(\"HTMLEvents\");\n          evt.initEvent(event, bubbling, cancelable);\n        } else {\n          throw new TypeError('Invalid event [' + event + ']');\n        }\n\n        evt.memo = memo || {};\n        this.domElement.dispatchEvent(evt);\n      } else {\n        throw new TypeError('Unable to fire event. Neither createEventObject nor createEvent methods are available');\n      }\n    } else {\n      // Custom event\n      this.domElement.customEventListeners[event] = this.domElement.customEventListeners[event] || [];\n      evt = {event: event, memo: memo, target: target};\n      for (let index in this.domElement.customEventListeners[event]) {\n        if (this.domElement.customEventListeners[event].hasOwnProperty(index)) {\n          this.domElement.customEventListeners[event][index](evt);\n        }\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Fires a custom event on the Element using the given event object rather than creating a new event object. This is\n   * useful for pass-through event handling.\n   *\n   * @param {string} event The name of the event.\n   * @param {Object} eventObj The event object to pass to the handlers.\n   * @returns {PrimeElement} This Element.\n   */\n  fireCustomEvent(event, eventObj) {\n    eventObj = Utils.isDefined(eventObj) ? eventObj : {};\n    if (event.indexOf(':') === -1) {\n      throw new TypeError('This method can only be used for custom events');\n    }\n\n    // Custom event\n    this.domElement.customEventListeners[event] = this.domElement.customEventListeners[event] || [];\n    for (let index in this.domElement.customEventListeners[event]) {\n      if (this.domElement.customEventListeners[event].hasOwnProperty(index)) {\n        this.domElement.customEventListeners[event][index](eventObj);\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Puts the focus on this element.\n   *\n   * @returns {PrimeElement} This Element.\n   */\n  focus() {\n    this.domElement.focus();\n    return this;\n  }\n\n  /**\n   * Returns the absolute top of this element relative to the document.\n   *\n   * @returns {number} The number of pixels that this element is from the top of the document.\n   */\n  getAbsoluteTop() {\n    let top = 0;\n    let e = this.domElement;\n    while (e) {\n      top += e.offsetTop;\n      e = e.offsetParent;\n    }\n\n    return top;\n  }\n\n  /**\n   * Returns the value of the given attribute.\n   *\n   * @param {string} name The attribute name.\n   * @returns {?string} This attribute value or null.\n   */\n  getAttribute(name) {\n    const attr = this.domElement.attributes.getNamedItem(name);\n    if (attr) {\n      return attr.value;\n    }\n\n    return null;\n  }\n\n  /**\n   * Returns all of the attributes on the element as an object.\n   *\n   * @returns {object} This attributes or an empty object if there are no attributes on this element.\n   */\n  getAttributes() {\n    const attrs = {};\n    if (this.domElement.hasAttributes()) {\n      for (let i = 0; i < this.domElement.attributes.length; i++) {\n        attrs[this.domElement.attributes[i].name] = this.domElement.attributes[i].value;\n      }\n    }\n\n    return attrs;\n  }\n\n  /**\n   * Gets the viewable height of the Element as an integer value in pixels. This height includes border, padding and scroll bar but excludes the margins.\n   *\n   * @returns {number} The height as pixels (number) or a string.\n   */\n  getBorderedHeight() {\n    return this.domElement.offsetHeight;\n  }\n\n  /**\n   * Gets the width of the Element as an integer value. This width includes border, padding and scroll bar but excludes the margins.\n   *\n   * @returns {number} The height in pixels.\n   */\n  getBorderedWidth() {\n    return this.domElement.offsetWidth;\n  }\n\n  /**\n   * @returns {number} The bottom position (in pixels) of the current element.\n   */\n  getBottom() {\n    return this.domElement.getBoundingClientRect().bottom;\n  }\n\n  /**\n   * Gets the children elements of this Element, optionally reduced to those matching the optional selector.\n   *\n   * @param {string} [selector] The selector. Optional, if not provided all children will be returned.\n   * @returns {PrimeElementList} The children.\n   */\n  getChildren(selector) {\n    if (!Utils.isDefined(selector)) {\n      return new PrimeElementList(this.domElement.children);\n    }\n\n    const matched = [];\n    for (let i = 0; i < this.domElement.children.length; i++) {\n      const child = this.domElement.children[i];\n      if (child.matches(selector)) {\n        matched.push(child);\n      }\n    }\n\n    return new PrimeElementList(matched);\n  }\n\n  /**\n   * Gets the class value of the current element. This might be a single class or multiple class names.\n   *\n   * @returns {string} The class.\n   */\n  getClass() {\n    return this.domElement.className;\n  }\n\n  /**\n   * Gets the computed style information for this Element.\n   *\n   * @returns {IEElementStyle|CSSStyleDeclaration} The style information.\n   */\n  getComputedStyle() {\n    return (this.domElement.currentStyle) ? this.domElement.currentStyle : document.defaultView.getComputedStyle(this.domElement, null);\n  }\n\n  /**\n   * Calculates the location of this element with respect to the document rather than the elements parent, offset parent\n   * or scroll position.\n   *\n   * @returns {{top: number, left: number}}\n   */\n  getCoordinates() {\n    const box = this.domElement.getBoundingClientRect();\n\n    const body = document.body;\n    const documentElement = document.documentElement;\n\n    const scrollTop = window.pageYOffset || documentElement.scrollTop || body.scrollTop;\n    const scrollLeft = window.pageXOffset || documentElement.scrollLeft || body.scrollLeft;\n\n    const clientTop = documentElement.clientTop || body.clientTop || 0;\n    const clientLeft = documentElement.clientLeft || body.clientLeft || 0;\n\n    const top = box.top + scrollTop - clientTop;\n    const left = box.left + scrollLeft - clientLeft;\n\n    return {top: Math.round(top), left: Math.round(left)};\n  }\n\n  /**\n   * Returns the dataset if it exists, otherwise, this creates a new dataset object and returns it.\n   *\n   * @returns {object} This dataset object.\n   */\n  getDataSet() {\n    if (this.domElement.dataset) {\n      return this.domElement.dataset;\n    }\n\n    this.domElement.dataset = {};\n    const attrs = this.getAttributes();\n    for (let prop in attrs) {\n      if (attrs.hasOwnProperty(prop) && prop.indexOf('data-') === 0) {\n        const dataName = prop.substring(5).replace(/-([a-z])/g, function(g) {\n          return g[1].toUpperCase();\n        });\n        this.domElement.dataset[dataName] = attrs[prop];\n      }\n    }\n    return this.domElement.dataset;\n  }\n\n  /**\n   * Returns the data value if it exists, otherwise returns null.\n   *\n   * @param {string} name The attribute name.\n   * @returns {?string} This attribute value or null.\n   */\n  getDataAttribute(name) {\n    return this.getDataSet()[name] || null;\n  }\n\n  /**\n   * Get the first child element of this Element, optionally filtered using the optional selector.\n   *\n   * @param {string} [selector] The selector. Optional.\n   * @returns {?PrimeElement} The first child element or null if the element has no children or a selector was provided and nothing matched the selector..\n   */\n  getFirstChild(selector) {\n    const lastChild = this.getChildren(selector)[0];\n    if (!Utils.isDefined(lastChild)) {\n      return null;\n    }\n\n    return lastChild;\n  }\n\n  /**\n   * Gets the viewable height of the Element as an integer value in pixels. This height includes padding and scroll bar\n   * but excludes the margin and borders. This is often called the innerHeight of the element.\n   *\n   * @returns {number} The height as pixels (number) or a string.\n   */\n  getHeight() {\n    const computedStyle = this.getComputedStyle();\n    const offsetHeight = this.domElement.offsetHeight;\n    const borderTop = computedStyle['borderTopWidth'];\n    const borderBottom = computedStyle['borderBottomWidth'];\n    return offsetHeight - Utils.parseCSSMeasure(borderTop) - Utils.parseCSSMeasure(borderBottom);\n  }\n\n  /**\n   * Gets the inner HTML content of the Element.\n   *\n   * @returns {string} The HTML content.\n   */\n  getHTML() {\n    return this.domElement.innerHTML;\n  }\n\n  /**\n   * Gets the ID of this element from the domElement.\n   *\n   * @returns {string} ID The id of the domElement if it exists.\n   */\n  getId() {\n    return this.domElement.id;\n  }\n\n  /**\n   * Get the last child element of this Element, optionally filtered using the optional selector.\n   *\n   * @param {string} [selector] The selector. Optional.\n   * @returns {?PrimeElement} The last child element or null if the element has no children or a selector was provided and nothing matched the selector..\n   */\n  getLastChild(selector) {\n    const elementList = this.getChildren(selector);\n    if (elementList.length > 0) {\n      return elementList[elementList.length - 1];\n    }\n\n    return null;\n  }\n\n  /**\n   * @returns {number} The left position (in pixels) of the current element.\n   */\n  getLeft() {\n    return this.domElement.getBoundingClientRect().left;\n  }\n\n  /**\n   * @returns {?PrimeElement} This elements next sibling or null.\n   */\n  getNextSibling() {\n    let sibling = this.domElement.nextSibling;\n    while (sibling !== null && sibling.nodeType !== 1) {\n      sibling = sibling.nextSibling;\n    }\n\n    if (sibling === null) {\n      return null;\n    }\n\n    return new PrimeElement(sibling);\n  }\n\n  /**\n   * The elements offset left in pixels.\n   *\n   * @returns {number} The offset left.\n   */\n  getOffsetLeft() {\n    return this.domElement.offsetLeft;\n  }\n\n  /**\n   * The elements offset top in pixels.\n   *\n   * @returns {number} The offset top.\n   */\n  getOffsetTop() {\n    return this.domElement.offsetTop;\n  }\n\n  /**\n   * Retrieves the opacity value for the Element. This handles the IE alpha filter.\n   *\n   * @returns {number} The opacity value.\n   */\n  getOpacity() {\n    const computedStyle = this.getComputedStyle();\n    let opacity = 1.0;\n    if (Browser.name === 'Explorer' && Browser.version < 9) {\n      const filter = computedStyle['filter'];\n      if (filter !== undefined && filter !== '') {\n        const matches = PrimeElement.ieAlphaRegexp.match(filter);\n        if (matches.length > 0) {\n          opacity = parseFloat(matches[0]);\n        }\n      }\n    } else {\n      opacity = parseFloat(computedStyle['opacity']);\n    }\n\n    return opacity;\n  }\n\n  /**\n   * @returns {PrimeElementList} If this element is a select box, this returns the options of the select box in\n   *          an ElementList.\n   */\n  getOptions() {\n    if (this.getTagName() !== 'SELECT') {\n      throw new TypeError('You can only get the options for select elements');\n    }\n\n    return new PrimeElementList(this.domElement.options);\n  }\n\n  /**\n   * Gets the outer height of the element, including the margins. This does not include the padding or borders.\n   *\n   * @returns {number} The outer height of the element.\n   */\n  getOuterHeight() {\n    const computedStyle = this.getComputedStyle();\n    const offsetHeight = this.domElement.offsetHeight;\n    const marginTop = computedStyle['marginTop'];\n    const marginBottom = computedStyle['marginBottom'];\n    return offsetHeight + Utils.parseCSSMeasure(marginTop) + Utils.parseCSSMeasure(marginBottom);\n  }\n\n  /**\n   * Gets the outer HTML content of the Element.\n   *\n   * @returns {string} The outer HTML content.\n   */\n  getOuterHTML() {\n    return this.domElement.outerHTML;\n  }\n\n  /**\n   * Gets the outer width of the element, including the margins. This does not include the padding or borders.\n   *\n   * @returns {number} The outer width of the element.\n   */\n  getOuterWidth() {\n    const computedStyle = this.getComputedStyle();\n    const offsetWidth = this.domElement.offsetWidth;\n    const marginLeft = computedStyle['marginLeft'];\n    const marginRight = computedStyle['marginRight'];\n    return offsetWidth + Utils.parseCSSMeasure(marginLeft) + Utils.parseCSSMeasure(marginRight);\n  }\n\n  /**\n   * Returns this element's parent as a PrimeElement.\n   *\n   * @returns {?PrimeElement} This element's parent or null if there is no parent\n   */\n  getParent() {\n    if (Utils.isDefined(this.domElement.parentElement)) {\n      return new PrimeElement(this.domElement.parentElement);\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * @returns {?PrimeElement} This elements previous sibling or null.\n   */\n  getPreviousSibling() {\n    let sibling = this.domElement.previousSibling;\n    while (sibling !== null && sibling.nodeType !== 1) {\n      sibling = sibling.previousSibling;\n    }\n\n    if (sibling === null) {\n      return null;\n    }\n\n    return new PrimeElement(sibling);\n  }\n\n  /**\n   * @returns {number} The zIndex style of this element based on the element or the first positioned parent.\n   */\n  getRelativeZIndex() {\n    let e = this;\n    while (e !== null && e.getComputedStyle()['zIndex'] === 'auto') {\n      e = e.getParent();\n    }\n    return e === null ? 0 : parseInt(e.getComputedStyle()['zIndex']);\n  }\n\n  /**\n   * @returns {number} The right position (in pixels) of the current element.\n   */\n  getRight() {\n    return this.domElement.getBoundingClientRect().right;\n  }\n\n  /**\n   * @returns {number} The scroll height of this element.\n   */\n  getScrollHeight() {\n    return this.domElement.scrollHeight;\n  }\n\n  /**\n   * @returns {number} The scroll left position of this element.\n   */\n  getScrollLeft() {\n    return this.domElement.scrollLeft;\n  }\n\n  /**\n   * @returns {number} The scroll top position of this element.\n   */\n  getScrollTop() {\n    return this.domElement.scrollTop;\n  }\n\n  /**\n   * @returns {number} The scroll width of this element.\n   */\n  getScrollWidth() {\n    return this.domElement.scrollWidth;\n  }\n\n  /**\n   * Retrieves the selected texts of this Element, if the element is a select. If it is anything else this returns\n   * null.\n   *\n   * @returns {Array} The texts of this Element.\n   */\n  getSelectedTexts() {\n    let texts;\n    if (this.domElement.tagName === 'SELECT') {\n      texts = [];\n      for (let i = 0; i < this.domElement.options.length; i++) {\n        if (this.domElement.options[i].selected) {\n          texts.push(this.domElement.options[i].text);\n        }\n      }\n    } else {\n      texts = null;\n    }\n\n    return texts;\n  }\n\n  /**\n   * Retrieves the values of this Element, if the element is a checkbox or select. If it is anything else this returns\n   * null.\n   *\n   * @returns {Array} The values of this Element.\n   */\n  getSelectedValues() {\n    let values;\n    if (this.domElement.tagName === 'INPUT' && (this.domElement.type === 'checkbox' || this.domElement.type === 'radio')) {\n      values = [];\n      const name = this.domElement.name;\n      const form = PrimeDocument.queryUp('form', this.domElement);\n      PrimeDocument.query('input[name=\"' + name + '\"]', form).each(function(element) {\n        if (element.isChecked()) {\n          values.push(element.getValue());\n        }\n      });\n    } else if (this.domElement.tagName === 'SELECT') {\n      values = [];\n      for (let i = 0; i < this.domElement.length; i++) {\n        if (this.domElement.options[i].selected) {\n          values.push(this.domElement.options[i].value);\n        }\n      }\n    } else {\n      values = null;\n    }\n\n    return values;\n  }\n\n  /**\n   * Gets value of a style attribute.\n   *\n   * @returns {string} The style value.\n   */\n  getStyle(name) {\n    name = Utils.convertStyleName(name);\n    return this.domElement.style[name];\n  }\n\n  /**\n   * @returns {string} The tag name of this element as a string. This is always uppercase.\n   */\n  getTagName() {\n    return this.domElement.tagName;\n  }\n\n  /**\n   * Retrieves the text content of this Element.\n   *\n   * @returns {string} The text contents of this Element.\n   */\n  getTextContent() {\n    return this.domElement.innerText ? this.domElement.innerText : this.domElement.textContent;\n  }\n\n  /**\n   * @returns {number} The top position (in pixels) of the current element.\n   */\n  getTop() {\n    return this.domElement.getBoundingClientRect().top;\n  }\n\n  /**\n   * Gets the width of the Element as an integer value. This width includes padding and scroll bar but excludes the margin and borders.\n   * This is often called the innerWidth of the element.\n   *\n   * @returns {number} The height in pixels.\n   */\n  getWidth() {\n    const computedStyle = this.getComputedStyle();\n    const offsetWidth = this.domElement.offsetWidth;\n    const borderLeft = computedStyle['borderLeftWidth'];\n    const borderRight = computedStyle['borderRightWidth'];\n    return offsetWidth - Utils.parseCSSMeasure(borderLeft) - Utils.parseCSSMeasure(borderRight);\n  }\n\n  /**\n   * Retrieves the value attribute of this Element. This works on all checkboxes, radio buttons, text, text areas, and\n   * options. However, this does not retrieve the selected options in a select box, checked checkboxes or checked radio\n   * buttons. Use the getSelectedValues function for that.\n   *\n   * @returns {string} The value of this Element.\n   */\n  getValue() {\n    return this.domElement.value;\n  }\n\n  /**\n   * Returns true if the element has one or all class names\n   *\n   * @param {string} classNames The class name(s) in a string.\n   * @returns {boolean} True if all class names are present.\n   */\n  hasClass(classNames) {\n    const currentClassNames = this.domElement.className;\n    if (currentClassNames === '') {\n      return classNames === '';\n    }\n\n    const currentClassNameList = currentClassNames.split(Utils.spaceRegex);\n    const findClassNameList = classNames.split(Utils.spaceRegex);\n    for (let i = 0; i < findClassNameList.length; i++) {\n      if (currentClassNameList.indexOf(findClassNameList[i]) === -1) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Hides the Element by setting the display style to none.\n   *\n   * @returns {PrimeElement} This Element.\n   */\n  hide() {\n    this.domElement.style.display = 'none';\n    return this;\n  }\n\n  /**\n   * Inserts this Element into the DOM after the given element, removing it from it's parent if it's an existing element.\n   *\n   * @param {PrimeElement|Element} element The element to insert this Element after.\n   * @returns {PrimeElement} This Element.\n   */\n  insertAfter(element) {\n    if (this.domElement.parentNode) {\n      this.domElement.parentNode.removeChild(this.domElement);\n    }\n\n    const domElement = (element instanceof PrimeElement) ? element.domElement : element;\n    const parentElement = domElement.parentNode;\n    if (parentElement) {\n      parentElement.insertBefore(this.domElement, domElement.nextSibling);\n    } else {\n      throw new TypeError('The element you passed into insertAfter is not in the DOM. You can\\'t insert a PrimeElement after an element that isn\\'t in the DOM yet.');\n    }\n\n    return this;\n  }\n\n  /**\n   * Inserts this Element into the DOM before the given element, removing it from it's parent if it's an existing element.\n   *\n   * @param {PrimeElement|Element} element The element to insert this Element before.\n   * @returns {PrimeElement} This Element.\n   */\n  insertBefore(element) {\n    if (this.domElement.parentNode) {\n      this.domElement.parentNode.removeChild(this.domElement);\n    }\n\n    const domElement = (element instanceof PrimeElement) ? element.domElement : element;\n    const parentElement = domElement.parentNode;\n    if (parentElement) {\n      parentElement.insertBefore(this.domElement, domElement);\n    } else {\n      throw new TypeError('The element you passed into insertBefore is not in the DOM. You can\\'t insert a PrimeElement before an element that isn\\'t in the DOM yet.');\n    }\n\n    return this;\n  }\n\n  /**\n   * Inserts the given HTML snippet directly after this element.\n   *\n   * @param {string} html The HTML string.\n   * @returns {PrimeElement} This Element.\n   */\n  insertHTMLAfter(html) {\n    this.domElement.insertAdjacentHTML('afterend', html);\n    return this;\n  }\n\n  /**\n   * Inserts the given HTML snippet inside this element, before its first child.\n   *\n   * @param {string} html The HTML string.\n   * @returns {PrimeElement} This Element.\n   */\n  insertHTMLAfterBegin(html) {\n    this.domElement.insertAdjacentHTML('afterbegin', html);\n    return this;\n  }\n\n  /**\n   * Inserts the given text after this Element.\n   *\n   * @param {string} text The text to insert.\n   * @returns {PrimeElement} This Element.\n   */\n  insertTextAfter(text) {\n    if (!this.domElement.parentNode) {\n      throw new TypeError('This Element is not currently in the DOM');\n    }\n\n    const textNode = document.createTextNode(text);\n    this.domElement.parentNode.insertBefore(textNode, this.domElement.nextSibling);\n\n    return this;\n  }\n\n  /**\n   * Inserts the given text before this Element.\n   *\n   * @param {string} text The text to insert.\n   * @returns {PrimeElement} This Element.\n   */\n  insertTextBefore(text) {\n    if (!this.domElement.parentNode) {\n      throw new TypeError('This Element is not currently in the DOM');\n    }\n\n    const textNode = document.createTextNode(text);\n    this.domElement.parentNode.insertBefore(textNode, this.domElement);\n\n    return this;\n  }\n\n  /**\n   * Returns true if the element matches the provided selector.\n   *\n   * @param {string} selector to match against the Element\n   * @returns {boolean} True if the element matches the selector, false if it does not match the selector.\n   */\n  is(selector) {\n    return this.domElement.matches(selector);\n  }\n\n  /**\n   * Returns whether or not the element is checked. If the element is not a checkbox or a radio this returns false.\n   *\n   * @returns {boolean} True if the element is selected, false if it isn't or is not a checkbox or a radio.\n   */\n  isChecked() {\n    return this.domElement.tagName === 'INPUT' && (this.domElement.type === 'checkbox' || this.domElement.type === 'radio') && this.domElement.checked;\n  }\n\n  /**\n   * Determines if this element is a child of the given element.\n   *\n   * @param {PrimeElement|Node} element The element to check to see if this element is a child of.\n   * @returns {boolean} True if this element is a child of the given element, false otherwise.\n   */\n  isChildOf(element) {\n    const domElement = element instanceof PrimeElement ? element.domElement : element;\n    let parent = this.domElement.parentNode;\n    while (domElement !== parent && parent !== null) {\n      parent = parent.parentNode;\n    }\n\n    return domElement === parent;\n  }\n\n  /**\n   * @returns {boolean} Whether or not this element is disabled according to the disabled property.\n   */\n  isDisabled() {\n    return this.domElement.disabled;\n  }\n\n  /**\n   * @returns {boolean} True if this element has focus.\n   */\n  isFocused() {\n    return document.activeElement === this.domElement;\n  }\n\n  /**\n   * @return {boolean} True if this element is an INPUT, SELECT or TEXTAREA.\n   */\n  isInput() {\n    const tagName = this.getTagName();\n    return tagName === 'SELECT' || tagName === 'INPUT' || tagName === 'TEXTAREA';\n  }\n\n  /**\n   * Determines if the this element is inside the given element\n   *\n   * @param target {PrimeElement} The target element.\n   * @returns {boolean} True if this element is inside the given element.\n   */\n  isInside(target) {\n    if (this.domElement === document.body || this.domElement === document.documentElement || this.domElement === document) {\n      return false;\n    }\n\n    let parent = this.getParent();\n    while (parent.domElement !== document.body) {\n      if (parent.domElement === target.domElement) {\n        return true;\n      }\n      parent = parent.getParent();\n    }\n\n    return false;\n  }\n\n  /**\n   * Returns whether or not the element is selected. If the element is not an option this returns false.\n   *\n   * @returns {boolean} True if the element is selected, false if it isn't or is not an option.\n   */\n  isSelected() {\n    return this.domElement.tagName === 'OPTION' && this.domElement.selected;\n  }\n\n  /**\n   * Determines if the element is visible using its display and visibility styles.\n   *\n   * @returns {boolean} True if the element is visible, false otherwise. This might return an invalid value if the element\n   * is absolutely positioned and off the screen, but is still technically visible.\n   */\n  isVisible() {\n    const computedStyle = this.getComputedStyle();\n    return computedStyle['display'] !== 'none' && computedStyle['visibility'] !== 'hidden';\n  }\n\n  /**\n   * Inserts this Element (which must be a newly created Element) into the DOM inside at the very beginning of the given\n   * element.\n   *\n   * @param {PrimeElement|Element} element The element to insert this Element into.\n   * @returns {PrimeElement} This Element.\n   */\n  prependTo(element) {\n    // Error out for now if this element is in the document so we can punt on cloning for now\n    if (this.domElement.parentNode) {\n      throw new TypeError('You can only insert new PrimeElements for now');\n    }\n\n    const domElement = (element instanceof PrimeElement) ? element.domElement : element;\n    if (domElement.parentNode) {\n      domElement.insertBefore(this.domElement, domElement.firstChild);\n    } else {\n      throw new TypeError('The element you passed into prependTo is not in the DOM. You can\\'t insert a PrimeElement inside an element that isn\\'t in the DOM yet.');\n    }\n\n    return this;\n  }\n\n  /**\n   * Queries the DOM using the given selector starting at this element and returns all the matched elements.\n   *\n   * @param {string} selector The selector.\n   * @returns {PrimeElementList} An element list.\n   */\n  query(selector) {\n    return PrimeDocument.query(selector, this);\n  }\n\n  /**\n   * Queries the DOM using the given selector starting at this element and returns the first matched element\n   * or null if there aren't any matches.\n   *\n   * @param {string} selector The selector.\n   * @returns {PrimeElement} An element or null.\n   */\n  queryFirst(selector) {\n    return PrimeDocument.queryFirst(selector, this);\n  }\n\n  /**\n   * Queries the DOM using the given selector starting at this element and returns the last matched element\n   * or null if there aren't any matches.\n   *\n   * @param {string} selector The selector.\n   * @returns {PrimeElement} An element or null.\n   */\n  queryLast(selector) {\n    return PrimeDocument.queryLast(selector, this);\n  }\n\n  /**\n   * Traverses up the DOM from this element and looks for a match to the selector.\n   *\n   * @param {string} selector The selector.\n   * @returns {PrimeElement} An element or null.\n   */\n  queryUp(selector) {\n    return PrimeDocument.queryUp(selector, this);\n  }\n\n  /**\n   * Removes all of the event listeners for the given element.\n   *\n   * @returns {PrimeElement} This Element.\n   */\n  removeAllEventListeners() {\n    for (let event in this.domElement.eventListeners) {\n      if (this.domElement.eventListeners.hasOwnProperty(event)) {\n        for (let i = 0; i < this.domElement.eventListeners[event].length; i++) {\n          this._internalRemoveEventListener(event, this.domElement.eventListeners[event][i]);\n        }\n      }\n    }\n\n    this.domElement.eventListeners = {};\n    this.domElement.customEventListeners = {};\n\n    return this;\n  }\n\n  /**\n   * Removes an attribute from the Element\n   *\n   * @param {string} name The name of the attribute.\n   * @returns {PrimeElement} This Element.\n   */\n  removeAttribute(name) {\n    this.domElement.removeAttribute(name);\n    return this;\n  }\n\n  /**\n   * Removes the given class (or list of space separated classes) from this Element.\n   *\n   * @param {string} classNames The class name(s).\n   * @returns {PrimeElement} This Element.\n   */\n  removeClass(classNames) {\n    const currentClassName = this.domElement.className;\n    if (currentClassName === '') {\n      return this;\n    }\n\n    const currentClassNameList = currentClassName.split(Utils.spaceRegex);\n    const removeClassNameList = classNames.split(Utils.spaceRegex);\n    for (let i = 0; i < removeClassNameList.length; i++) {\n      Utils.removeFromArray(currentClassNameList, removeClassNameList[i]);\n    }\n\n    this.domElement.className = currentClassNameList.join(' ');\n    return this;\n  }\n\n  /**\n   * Removes an event listener for a specific event from this Element, you must have attached using addEventListener\n   *\n   * @param {string} event The name of the event.\n   * @param {*} listener The event listener that was bound.\n   * @returns {PrimeElement} This Element.\n   */\n  removeEventListener(event, listener) {\n    let listeners;\n    if (event.indexOf(':') === -1) {\n      this._internalRemoveEventListener(event, listener);\n      listeners = this.domElement.eventListeners[event];\n    } else {\n      listeners = this.domElement.customEventListeners[event];\n    }\n\n    if (listeners) {\n      Utils.removeFromArray(listeners, listener);\n    }\n\n    return this;\n  }\n\n  /**\n   * Removes all of the event listeners for the given event from this element.\n   *\n   * @param {string} event The name of the event to remove the listeners for.\n   * @returns {PrimeElement} This Element.\n   */\n  removeEventListeners(event) {\n    if (event.indexOf(':') === -1) {\n      if (this.domElement.eventListeners[event]) {\n        for (let i = 0; i < this.domElement.eventListeners[event].length; i++) {\n          this._internalRemoveEventListener(event, this.domElement.eventListeners[event][i]);\n        }\n\n        delete this.domElement.eventListeners[event];\n      }\n    } else {\n      if (this.domElement.customEventListeners[event]) {\n        delete this.domElement.customEventListeners[event];\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Removes all of the event listeners for the given pattern from this element.\n   *\n   * @param {RegExp} pattern The regular expression that matches the names of the events to remove the listeners for.\n   * @returns {PrimeElement} This Element.\n   */\n  removeEventListenersByPattern(pattern) {\n    for (let event in this.domElement.eventListeners) {\n      if (this.domElement.eventListeners.hasOwnProperty(event) && pattern.test(event)) {\n        for (let i = 0; i < this.domElement.eventListeners[event].length; i++) {\n          this._internalRemoveEventListener(event, this.domElement.eventListeners[event][i]);\n        }\n\n        delete this.domElement.eventListeners[event];\n      }\n    }\n\n    for (let event in this.domElement.customEventListeners) {\n      if (this.domElement.customEventListeners.hasOwnProperty(event) && pattern.test(event)) {\n        delete this.domElement.customEventListeners[event];\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Removes this Element from the DOM. If the Element isn't in the DOM this does nothing.\n   *\n   * @returns {PrimeElement} This Element.\n   */\n  removeFromDOM() {\n    if (this.domElement.parentNode) {\n      this.domElement.parentNode.removeChild(this.domElement);\n    }\n\n    return this;\n  }\n\n  /**\n   * Create a selected range for this element.\n   *\n   * @returns {PrimeElement} This Element.\n   */\n  selectElementContents() {\n    let range;\n    let selection;\n\n    if (document.body.createTextRange) {\n      /* IE */\n      range = document.body.createTextRange();\n      range.moveToElementText(this.domElement);\n      range.select();\n    } else if (window.getSelection) {\n      /* Rest of the world */\n      selection = window.getSelection();\n      range = document.createRange();\n      range.selectNodeContents(this.domElement);\n      selection.removeAllRanges();\n      selection.addRange(range);\n    }\n\n    return this;\n  }\n\n  /**\n   * Scrolls this Element into the visible area of the browser window.\n   *\n   * @returns {PrimeElement} This Element.\n   */\n  scrollIntoView() {\n    this.domElement.scrollIntoView();\n    return this;\n  }\n\n  /**\n   * Scrolls this element to the given horizontal position.\n   *\n   * @param {number} position The position to scroll the element to.\n   * @returns {PrimeElement} This Element.\n   */\n  scrollLeftTo(position) {\n    this.domElement.scrollLeft = position;\n    return this;\n  }\n\n  /**\n   * Scrolls this element to the given vertical position.\n   *\n   * @param {number} position The position to scroll the element to.\n   * @returns {PrimeElement} This Element.\n   */\n  scrollTo(position) {\n    this.domElement.scrollTop = position;\n    return this;\n  }\n\n  /**\n   * Scrolls this element to the bottom.\n   *\n   * @returns {PrimeElement} This Element.\n   */\n  scrollToBottom() {\n    this.domElement.scrollTop = this.domElement.scrollHeight;\n    return this;\n  }\n\n  /**\n   * Scrolls this element to the top.\n   *\n   * @returns {PrimeElement} This Element.\n   */\n  scrollToTop() {\n    this.domElement.scrollTop = 0;\n    return this;\n  }\n\n  /**\n   * Sets an attribute of the Element.\n   *\n   * @param {string} name The attribute name\n   * @param {number|string} value The attribute value\n   * @returns {PrimeElement} This Element.\n   */\n  setAttribute(name, value) {\n    if (typeof value === 'number') {\n      value = value.toString();\n    }\n    if (this.domElement.setAttribute) {\n      this.domElement.setAttribute(name, value);\n    } else {\n      const attribute = document.createAttribute(name);\n      attribute.nodeValue = value;\n      this.domElement.setAttributeNode(attribute);\n    }\n\n    return this;\n  }\n\n  /**\n   * Sets a data- attribute of the Element.\n   *\n   * Example: setDataAttribute('fooBar', 'baz');\n   *  is equivalent to calling setAttribute('data-foo-bar', 'baz');\n   *\n   * @param {string} name The attribute name\n   * @param {number|string} value The attribute value\n   * @returns {PrimeElement} This Element.\n   */\n  setDataAttribute(name, value) {\n    const dataName = 'data-' + name.replace(/([a-z])([A-Z])/g, \"$1-$2\").toLowerCase();\n    return this.setAttribute(dataName, value);\n  }\n\n  /**\n   * Sets multiple attributes of the Element from the hash\n   *\n   * @param {Object} attributes An object of key value style pairs.\n   * @returns {PrimeElement} This Element.\n   */\n  setAttributes(attributes) {\n    for (let key in attributes) {\n      if (attributes.hasOwnProperty(key)) {\n        this.setAttribute(key, attributes[key]);\n      }\n    }\n    return this;\n  }\n\n  /**\n   * If this element is a checkbox or radio button, this sets the checked field on the DOM object equal to the given\n   * value.\n   *\n   * @param {boolean} value The value to set the checked state of this element to.\n   * @returns {PrimeElement} This Element.\n   */\n  setChecked(value) {\n    this.domElement.checked = value;\n    return this;\n  }\n\n  /**\n   * Sets if this element is disabled or not. This works with any element that responds to the disabled property.\n   *\n   * @param {boolean} value The value to set the disabled state of this element to.\n   * @returns {PrimeElement} This Element.\n   */\n  setDisabled(value) {\n    this.domElement.disabled = value;\n    return this;\n  }\n\n  /**\n   * Sets the height of this element using the height style.\n   *\n   * @param {number|string} height The new height as a number (for pixels) or string.\n   * @returns {PrimeElement} This Element.\n   */\n  setHeight(height) {\n    if (typeof(height) === 'number') {\n      height = height + 'px';\n    }\n\n    this.setStyle('height', height);\n    return this;\n  }\n\n  /**\n   * Sets the inner HTML content of the Element.\n   *\n   * @param {string|PrimeElement} newHTML The new HTML content for the Element.\n   * @returns {PrimeElement} This Element.\n   */\n  setHTML(newHTML) {\n    if (newHTML !== null) {\n      if (newHTML instanceof PrimeElement) {\n        this.domElement.innerHTML = newHTML.getHTML();\n      } else {\n        this.domElement.innerHTML = newHTML;\n      }\n    }\n    return this;\n  }\n\n  /**\n   * Sets the ID of the Element.\n   *\n   * @param {string} id The ID.\n   * @returns {PrimeElement} This Element.\n   */\n  setId(id) {\n    this.domElement.id = id;\n    return this;\n  }\n\n  /**\n   * Sets left position of the element.\n   *\n   * @param {number|string} left The left position of the element in pixels or as a string.\n   * @returns {PrimeElement} This Element.\n   */\n  setLeft(left) {\n    let leftString = left;\n    if (typeof(left) === 'number') {\n      leftString = left + 'px';\n    }\n\n    this.setStyle('left', leftString);\n    return this;\n  }\n\n  /**\n   * Sets the opacity of the element. This also sets the IE alpha filter for IE version 9 or younger.\n   *\n   * @param {number} opacity The opacity.\n   * @returns {PrimeElement} This Element.\n   */\n  setOpacity(opacity) {\n    if (Browser.name === 'Explorer' && Browser.version < 9) {\n      this.domElement.style.filter = 'alpha(opacity=' + opacity + ')';\n    } else {\n      this.domElement.style.opacity = opacity;\n    }\n\n    return this;\n  }\n\n  /**\n   * Sets the selected value on the element. If the element is not an option or radio, this does nothing.\n   *\n   * @param {boolean} selected Selected value.\n   */\n  setSelected(selected) {\n    this.domElement.selected = selected;\n  }\n\n  /**\n   * Sets the selected value(s) of this element. This works on selects, checkboxes, and radio buttons.\n   *\n   * @param {string} [arguments] The value(s) to select (var args).\n   * @returns {PrimeElement} This Element.\n   */\n  setSelectedValues() {\n    // Handle the case where they passed in an array\n    let values = null;\n    if (arguments.length === 1 && Utils.isArray(arguments[0])) {\n      values = arguments[0];\n    } else {\n      values = Array.prototype.slice.call(arguments, 0);\n    }\n\n    if (this.domElement.tagName === 'INPUT' && (this.domElement.type === 'checkbox' || this.domElement.type === 'radio')) {\n      const name = this.domElement.name;\n      const form = PrimeDocument.queryUp('form', this.domElement);\n      PrimeDocument.query('input[name=\"' + name + '\"]', form).each(function(element) {\n        element.setChecked(values.indexOf(element.getValue()) !== -1);\n      });\n    } else if (this.domElement.tagName === 'SELECT') {\n      for (let i = 0; i < this.domElement.length; i++) {\n        this.domElement.options[i].selected = values.indexOf(this.domElement.options[i].value) !== -1;\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Sets the style for the name of this Element.\n   *\n   * @param {string} name The style name.\n   * @param {number|string} value The style value.\n   * @returns {PrimeElement} This Element.\n   */\n  setStyle(name, value) {\n    if (typeof value === 'number') {\n      value = value.toString();\n    }\n    this.domElement.style[name] = value;\n    return this;\n  }\n\n  /**\n   * Sets multiple styles of this Element.\n   *\n   * @param {Object} styles An object with key value pairs for the new style names and values.\n   * @returns {PrimeElement} This Element.\n   */\n  setStyles(styles) {\n    for (let key in styles) {\n      if (styles.hasOwnProperty(key)) {\n        this.setStyle(key, styles[key]);\n      }\n    }\n    return this;\n  }\n\n  /**\n   * Sets the textContent of the Element.\n   *\n   * @param {number|string|PrimeElement} newText The new text content for the Element.\n   * @returns {PrimeElement} This Element.\n   */\n  setTextContent(newText) {\n    if (newText !== null) {\n      if (newText instanceof PrimeElement) {\n        this.domElement.textContent = newText.getTextContent();\n      } else {\n        if (typeof newText === 'number') {\n          newText = newText.toString();\n        }\n        this.domElement.textContent = newText;\n      }\n    }\n    return this;\n  }\n\n  /**\n   * Sets top position of the element.\n   *\n   * @param {number|string} top The top position of the element in pixels or as a string.\n   * @returns {PrimeElement} This Element.\n   */\n  setTop(top) {\n    let topString = top;\n    if (typeof(top) === 'number') {\n      topString = top + 'px';\n    }\n\n    this.setStyle('top', topString);\n    return this;\n  }\n\n  /**\n   * Sets the value of this Element. This handles checkboxes, radio buttons, options, text inputs and text areas. This\n   * works on checkboxes and radio buttons, but it change the value attribute on them rather than checking and unchecking\n   * the buttons themselves. To check and uncheck the buttons, use the select method.\n   *\n   * @param {number|string} value The new value.\n   * @returns {PrimeElement} This Element.\n   */\n  setValue(value) {\n    if (typeof value === 'number') {\n      value = value.toString();\n    }\n    this.domElement.value = value;\n    return this;\n  }\n\n  /**\n   * Sets the width of this element using the height style.\n   *\n   * @param {number|string} width The new width as a number (for pixels) or string.\n   * @returns {PrimeElement} This Element.\n   */\n  setWidth(width) {\n    if (typeof(width) === 'number') {\n      width = width + 'px';\n    }\n\n    this.setStyle('width', width);\n    return this;\n  }\n\n  /**\n   * Shows the Element by setting the display style first to empty string. After this, the elements computed style is\n   * checked to see if the element is still not visible. If that is true, the element must have a CSS style defined in\n   * a stylesheet that is setting it to display: none. In this case, we determine if the element is a block level element\n   * and either set the display to 'block' or 'inline'.\n   *\n   * @param {string} [displayValue] The display value to use for the show. This defaults to the W3C standard display\n   * setting depending on the type of element you are showing. For example, INPUT is inline and DIV is block.\n   * @returns {PrimeElement} This Element.\n   */\n  show(displayValue) {\n    if (Utils.isDefined(displayValue)) {\n      this.domElement.style.display = displayValue;\n      return this;\n    }\n\n    this.domElement.style.display = '';\n\n    const computedDisplay = this.getComputedStyle()['display'];\n    if (computedDisplay === 'none') {\n      if (!Utils.isDefined(displayValue)) {\n        displayValue = (PrimeElement.blockElementRegexp.test(this.domElement.tagName)) ? 'block' : 'inline';\n      }\n\n      this.domElement.style.display = displayValue;\n    }\n\n    return this;\n  }\n\n  /**\n   * Toggle the class on this element.\n   *\n   * @param {string} className The class name.\n   * @returns {PrimeElement} This Element.\n   */\n  toggleClass(className) {\n    if (this.hasClass(className)) {\n      this.removeClass(className);\n    } else {\n      this.addClass(className);\n    }\n\n    return this;\n  }\n\n  /**\n   * Removes this element from the DOM while preserving the inner HTML.\n   *\n   * Example, call unwrap on the italic element:\n   *   <strong>Hello</strong><italic> World </italic> --> <strong>Hello</strong> World\n   *\n   * @returns {PrimeElement} This Element.\n   */\n  unwrap() {\n    const parent = this.getParent().domElement;\n    while (this.domElement.firstChild) {\n      parent.insertBefore(this.domElement.firstChild, this.domElement);\n    }\n\n    this.removeFromDOM();\n  }\n\n  /**\n   * Builds a new element using the given HTML snippet (currently this only supports the tag).\n   *\n   * @param {string} elementString The element string.\n   * @param {Object} [properties={}] The properties for the new element.\n   * @returns {PrimeElement} A new PrimeElement.\n   */\n  wrapInnerHTML(elementString, properties) {\n    const element = PrimeDocument.newElement(elementString, properties);\n    element.setHTML(this.getOuterHTML());\n    this.domElement.outerHTML = element.domElement.outerHTML;\n    return this;\n  }\n\n  /* ===================================================================================================================\n   * Private Methods\n   * ===================================================================================================================*/\n\n  /**\n   * Handle delegated events.\n   *\n   * @param {Event} event\n   * @private\n   */\n  _handleDelegatedEvent(event) {\n    this._callMatchedListeners(event, event.target);\n\n    // If the event cannot bubble, we are done.\n    if (!event.bubbles) {\n      return;\n    }\n\n    // While propagation has not been stopped, walk up the tree to simulate the bubble\n    let domElement = event.target;\n    while (true) {\n      if (domElement === this.domElement || domElement === document || event.isPropagationStopped) {\n        break;\n      }\n\n      domElement = domElement.parentNode;\n      this._callMatchedListeners(event, domElement);\n    }\n  }\n\n  _callMatchedListeners(event, target) {\n    // Test each selector we have against this target\n    let delegatedListeners = this.domElement.delegatedListeners[event.type] || [];\n    for (let selector in delegatedListeners) {\n      if (delegatedListeners.hasOwnProperty(selector)) {\n        if (target.matches(selector)) {\n\n          let scopedListeners = delegatedListeners[selector];\n          // Call each listener unless immediate propagation has been stopped\n          for (let i = 0; i < scopedListeners.length; i++) {\n\n            if (event.isImmediatePropagationStopped) {\n              return;\n            }\n\n            scopedListeners[i](event, target);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Removes the event listener proxy from this element.\n   *\n   * @param {string} event The event name.\n   * @param {Function} listener The listener function.\n   * @private\n   */\n  _internalRemoveEventListener(event, listener) {\n    if (event.indexOf(':') === -1) {\n      // Traditional event\n      if (this.domElement.removeEventListener) {\n        this.domElement.removeEventListener(event, listener, false);\n      } else if (this.domElement.detachEvent) {\n        this.domElement.detachEvent('on' + event, listener);\n      } else {\n        throw new TypeError('Unable to remove event from the element. Neither removeEventListener nor detachEvent methods are available');\n      }\n    } else if (this.domElement.customEventListeners && this.domElement.customEventListeners[event]) {\n      // Custom event\n      const customListeners = this.domElement.customEventListeners[event];\n      Utils.removeFromArray(customListeners, listener);\n    }\n  }\n}\n\n\n/* ===================================================================================================================\n * Polyfill\n * ===================================================================================================================*/\n\n(function() {\n  if (!Element.prototype.matches) {\n    Element.prototype.matches = function(selector) {\n      const domElement = this;\n      const matches = (domElement.parentNode || domElement.document).querySelectorAll(selector);\n      let i = 0;\n\n      while (matches[i] && matches[i] !== domElement) {\n        i++;\n      }\n\n      return !!matches[i];\n    };\n  }\n\n  // Add isPropagationStopped, this is part of the DOM Level 3 spec for CustomEvents\n  // - adding it here for all types so it can be used by the delegation event listener\n  // https://www.w3.org/TR/2003/NOTE-DOM-Level-3-Events-20031107/events.html#Events-Event-isPropagationStopped\n  if (!Event.prototype.isPropagationStopped) {\n    let _stopPropagation = Event.prototype.stopPropagation;\n    Event.prototype.stopPropagation = function() {\n      this.isPropagationStopped = true;\n      _stopPropagation.apply(this, arguments);\n    }\n  }\n\n  // Add isImmediatePropagationStopped, this is part of the DOM Level 3 spec for CustomEvents\n  // - adding it here for all types so it can be used by the delegation event listener\n  // https://www.w3.org/TR/2003/NOTE-DOM-Level-3-Events-20031107/events.html#Events-Event-isImmediatePropagationStopped\n  if (!Event.prototype.isImmediatePropagationStopped) {\n    let _stopImmediatePropagation = Event.prototype.stopImmediatePropagation;\n    Event.prototype.stopImmediatePropagation = function() {\n      this.isImmediatePropagationStopped = true;\n      _stopImmediatePropagation.apply(this, arguments);\n    }\n  }\n})();\n\nexport {PrimeElement};\n","/*\n * Copyright (c) 2017, Inversoft Inc., All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific\n * language governing permissions and limitations under the License.\n */\n'use strict';\n\nimport {PrimeElement} from \"./PrimeElement.js\";\nimport {Utils} from \"../Utils.js\";\n\nclass PrimeElementList {\n  /**\n   * Constructs an PrimeElementList object using the given array containing DOMElements or PrimeElement objects, or the NodeList containing Node objects.\n   *\n   * @constructor\n   * @param {Array|NodeList} elements An array containing DOMElement or PrimeElement objects, or a NodeList containing Node objects.\n   */\n  constructor(elements) {\n    Utils.bindAll(this);\n\n    // NodeList does not inherit from Array so do not assume object type.\n    this.length = elements.length;\n    for (let i = 0; i < elements.length; i++) {\n      if (elements[i] instanceof PrimeElement) {\n        this[i] = elements[i];\n      } else {\n        this[i] = new PrimeElement(elements[i]);\n      }\n    }\n  }\n\n  /**\n   * Shorthand for calling {@link PrimeElement.addClass} on each Element in the PrimeElementList.\n   *\n   * Adds the given class (or list of space separated classes) to all Elements in this PrimeElementList.\n   *\n   * @param {string} classNames The class name(s) separated by a space.\n   * @returns {PrimeElementList} This PrimeElementList.\n   */\n  addClass(classNames) {\n    return this._proxyToElement('addClass', classNames);\n  }\n\n  /**\n   * Shorthand for calling {@link PrimeElement.addEventListener} on each Element in the PrimeElementList.\n   *\n   * Attaches an event listener to all Elements in this PrimeElementList.\n   *\n   * @param {string} event The name of the event.\n   * @param {Function} listener The event listener function.\n   * @returns {PrimeElement|PrimeElementList} This Element.\n   */\n  addEventListener(event, listener) {\n    return this._proxyToElement('addEventListener', event, listener);\n  }\n\n  /**\n   * Iterates over each of the PrimeElement objects in this PrimeElementList and calls the given function for each one.\n   * The <code>this</code> variable inside the function will be managed by the caller of this method. You should use the\n   * <code>bind</code> method on the Function object if you want to manage the <code>this</code> reference.\n   *\n   * The function can optionally take two parameters. The first parameter is the current element. The second parameter\n   * is the current index.\n   *\n   * @param {Function} iterationFunction The function to call.\n   * @returns {PrimeElementList} This PrimeElementList.\n   */\n  each(iterationFunction) {\n    for (let i = 0; i < this.length; i++) {\n      iterationFunction(this[i], i);\n    }\n\n    return this;\n  }\n\n  /**\n   * Shorthand for calling {@link PrimeElement.hide} on each Element in the PrimeElementList.\n   *\n   * Hides the Element by setting the display style to none.\n   *\n   * @returns {PrimeElementList} This PrimeElementList.\n   */\n  hide() {\n    return this._proxyToElement('hide');\n  }\n\n  /**\n   * Returns the indexOf the element that matches the parameter, either Prime Element or DOMElement.\n   *\n   * @param {PrimeElement|Element} element The element to look for\n   * @returns {number} The position of the element in the list, or -1 if not present.\n   */\n  indexOf(element) {\n    const domElement = (element instanceof PrimeElement) ? element.domElement : element;\n\n    for (let i = 0; i < this.length; i++) {\n      if (this[i].domElement === domElement) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  /**\n   * Removes all the matched elements in the PrimeElementList from the DOM.\n   *\n   * @returns {PrimeElementList} This PrimeElementList.\n   */\n  removeAllFromDOM() {\n    for (let i = 0; i < this.length; i++) {\n      this[i].removeFromDOM();\n    }\n\n    return this;\n  }\n\n  /**\n   * Shorthand for calling {@link PrimeElement.removeClass} on each Element in the PrimeElementList.\n   *\n   * Removes the given class (or list of space separated classes) from all Elements in this PrimeElementList.\n   *\n   * @param {string} classNames The class name(s) separated by a space.\n   * @returns {PrimeElementList} This PrimeElementList.\n   */\n  removeClass(classNames) {\n    return this._proxyToElement('removeClass', classNames);\n  }\n\n  /**\n   * Shorthand for calling {@link PrimeElement.setChecked} on each Element in the PrimeElementList.\n   *\n   * If this element is a checkbox or radio button, this sets the checked field on the DOM object equal to the given\n   * value.\n   *\n   * @param {boolean} value The value to set the checked state of this element to.\n   * @returns {PrimeElementList} This PrimeElementList.\n   */\n  setChecked(value) {\n    return this._proxyToElement('setChecked', value);\n  }\n\n  /**\n   * Shorthand for calling {@link PrimeElement.setDisabled} on each Element in the PrimeElementList.\n   *\n   * Sets if this element is disabled or not. This works with any element that responds to the disabled property.\n   *\n   * @param {boolean} value The value to set the disabled state of this element to.\n   * @returns {PrimeElementList} This PrimeElementList.\n   */\n  setDisabled(value) {\n    return this._proxyToElement('setDisabled', value);\n  }\n\n  /**\n   * Shorthand for calling {@link PrimeElement.show} on each Element in the PrimeElementList.\n   *\n   * Shows the element.\n   *\n   * @returns {PrimeElementList} This PrimeElementList.\n   */\n  show() {\n    return this._proxyToElement('show');\n  }\n\n  /**\n   * @callback PrimeElementListPredicate\n   *\n   * A function that defines a condition on a PrimeElement\n   *\n   * @param {PrimeElement} element\n   * @returns {boolean} True if the element matches a condition\n   */\n\n  /**\n   * A function that tests for any element that matches a condition.\n   * @param {PrimeElementListPredicate} predicate A function that defines the condition to check\n   * @returns {boolean} True if any element matches the predicate\n   */\n  some(predicate) {\n    for (let i = 0; i < this.length; ++i) {\n      if (predicate(this[i])) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /* ===================================================================================================================\n   * Private methods\n   * ===================================================================================================================*/\n\n  /**\n   * Proxy function calls to each Element in the PrimeElementList.\n   * The first parameter is function name, followed by a variable length of arguments.\n   *\n   * Example usage: this._proxyToElement('addClass', classNames);\n   *\n   * @returns {PrimeElementList}\n   * @private\n   */\n  _proxyToElement() {\n    const args = Array.prototype.slice.apply(arguments);\n    for (let i = 0; i < this.length; i++) {\n      this[i][args[0]].apply(this[i], args.slice(1));\n    }\n    return this;\n  }\n}\n\nexport {PrimeElementList}\n","/*\n * Copyright (c) 2012-2018, Inversoft Inc., All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific\n * language governing permissions and limitations under the License.\n */\n'use strict';\n\nimport {PrimeElementList} from \"./Document/PrimeElementList.js\";\nimport {PrimeElement} from \"./Document/PrimeElement.js\";\nimport {Utils} from \"./Utils.js\";\n\nconst readyFunctions = [];\nconst tagRegexp = /^<(\\w+)\\s*\\/?>.*(?:<\\/\\1>)?$/;\n\n/**\n * The Body element as a PrimeElement object.\n *\n * @type {?PrimeElement}\n */\nlet bodyElement = null;\n\nclass PrimeDocument {\n\n  /**\n   * @returns {PrimeElement}\n   */\n  static get Element() {\n    return PrimeElement;\n  }\n\n  /**\n   * @returns {PrimeElementList}\n   */\n  static get ElementList() {\n    return PrimeElementList;\n  }\n\n  /**\n   * @returns {Array<Function>}\n   */\n  static get readyFunctions() {\n    return readyFunctions;\n  }\n\n  /**\n   * @returns {RegExp}\n   */\n  static get tagRegexp() {\n    return tagRegexp;\n  }\n\n  /**\n   * @returns {?PrimeElement} the Prime body element\n   */\n  static get bodyElement() {\n    if (bodyElement === null) {\n      bodyElement = new PrimeElement(document.body);\n    }\n    return bodyElement;\n  }\n\n  /**\n   * Set the body element\n   * @param {?PrimeElement} body the Prime body element\n   */\n  static set bodyElement(body) {\n    bodyElement = body;\n  }\n\n  /**\n   * Attaches an event listener to the document body and will only invoke the listener when the event target matches\n   * the provided selector.\n   *\n   * The intent of this function is to provide a delegated listener and handle events from nested elements.\n   *\n   * @param {string} event The name of the event\n   * @param  {string} selector The selector to match against the Element\n   * @param {PrimeDelegationEventListener} listener The event listener function\n   */\n  static addDelegatedEventListener(event, selector, listener) {\n    PrimeDocument.bodyElement.addDelegatedEventListener(event, selector, listener);\n  }\n\n  /**\n   * Attaches an event listener to the document, returning the handler proxy.\n   *\n   * @param {string} event The name of the event.\n   * @param {Function} listener The event listener function.\n   * @returns {PrimeDocument} The PrimeDocument object so you can chain method calls together.\n   */\n  static addEventListener(event, listener) {\n    if (event.indexOf(':') === -1) {\n      // Traditional event\n      document.eventListeners = document.eventListeners || {};\n      document.eventListeners[event] = document.eventListeners[event] || [];\n      document.eventListeners[event].push(listener);\n      document.addEventListener(event, listener, false);\n    } else {\n      // Custom event\n      document.customEventListeners = document.customEventListeners || {};\n      document.customEventListeners[event] = document.customEventListeners[event] || [];\n      document.customEventListeners[event].push(listener);\n    }\n\n    return PrimeDocument;\n  }\n\n  /**\n   * Returns the height of the document.\n   *\n   * @returns {number} The height of the document in pixels.\n   */\n  static getHeight() {\n    const body = document.body;\n    const html = document.documentElement;\n\n    return Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight);\n  }\n\n  /**\n   * Returns the width of the document.\n   *\n   * @returns {number} The width of the document in pixels.\n   */\n  static getWidth() {\n    const body = document.body;\n    const html = document.documentElement;\n\n    return Math.max(body.scrollWidth, body.offsetWidth, html.clientWidth, html.scrollWidth, html.offsetWidth);\n  }\n\n  /**\n   * Builds a new document using the given HTML document.\n   *\n   * @param {string} documentString The HTML string to build the document.\n   * @returns {Document} A new document.\n   */\n  static newDocument(documentString) {\n    return new DOMParser().parseFromString(documentString, \"text/html\");\n  }\n\n  /**\n   * Builds a new element using the given HTML snippet (currently this only supports the tag).\n   *\n   * @param {string} elementString The element string.\n   * @param {Object} [properties={}] The properties for the new element.\n   * @returns {PrimeElement} A new PrimeElement.\n   */\n  static newElement(elementString, properties) {\n    properties = Utils.isDefined(properties) ? properties : {};\n    const result = PrimeDocument.tagRegexp.exec(elementString);\n    if (result === null) {\n      throw new TypeError('Invalid string to create a new element [' + elementString + ']. It should look like <a/>');\n    }\n\n    const element = new PrimeElement(document.createElement(result[1]));\n    for (let key in properties) {\n      if (properties.hasOwnProperty(key)) {\n        if (key === 'id') {\n          element.setId(properties[key]);\n        } else {\n          element.setAttribute(key, properties[key]);\n        }\n      }\n    }\n\n    return element;\n  }\n\n  /**\n   * Adds the given callback function to the list of functions to invoke when the document is ready. If the document is\n   * already fully loaded, this simply invokes the callback directly.\n   *\n   * @param {Function} callback The callback function.\n   */\n  static onReady(callback) {\n    if (document.readyState === 'complete') {\n      callback();\n    } else {\n      // If this is the first call, register the event listener on the document\n      if (this.readyFunctions.length === 0) {\n        if (document.addEventListener) {\n          document.addEventListener('DOMContentLoaded', PrimeDocument._callReadyListeners, false);\n        } else if (document.attachEvent) {\n          document.attachEvent('onreadystatechange', PrimeDocument._callReadyListeners);\n        } else {\n          throw new TypeError('No way to attach an event to the document. What browser are you running?');\n        }\n      }\n\n      // Add the callback\n      PrimeDocument.readyFunctions.push(callback);\n    }\n  }\n\n  /**\n   * Take the HTML string and append it to the body.\n   *\n   * @param {string} html The HTML to append\n   */\n  static appendHTML(html) {\n    document.body.insertAdjacentHTML('beforeend', html);\n  }\n\n  /**\n   * Moves the given element by appending it to the element provided by the second argument.\n   *\n   * @param {Element|PrimeElement} element The element to move.\n   * @param {Element|PrimeElement} appendToElement [appendToElement=body] The element to append to, defaults to the body if not provided.\n   * @returns {PrimeElement} The element that has been moved.\n   */\n  static move(element, appendToElement) {\n    element = (element instanceof PrimeElement) ? element : new PrimeElement(element);\n\n    if (!Utils.isDefined(appendToElement)) {\n      appendToElement = new PrimeElement(document.body);\n    } else {\n      appendToElement = (appendToElement instanceof PrimeElement) ? appendToElement : new PrimeElement(appendToElement);\n    }\n\n    appendToElement.appendHTML(element.getOuterHTML());\n    element.removeFromDOM();\n    return appendToElement.getLastChild();\n  }\n\n  /**\n   * Queries the DOM using the given selector starting at the given element and returns all the matched elements.\n   *\n   * @param {string} selector The selector.\n   * @param {Element|Document|PrimeElement} [element=document] The starting point for the search (defaults to document if not provided).\n   * @returns {PrimeElementList} An element list.\n   */\n  static query(selector, element) {\n    let domElement = null;\n    if (!Utils.isDefined(element)) {\n      domElement = document;\n    } else {\n      domElement = (element instanceof PrimeElement) ? element.domElement : element;\n    }\n\n    const elements = domElement.querySelectorAll(selector);\n    return new PrimeElementList(elements);\n  }\n\n  /**\n   * Queries the DOM for an element that has the given ID.\n   *\n   * @param {string} id The ID.\n   * @returns {PrimeElement} The element or null.\n   */\n  static queryById(id) {\n    let element = document.getElementById(id);\n    if (!element) {\n      return null;\n    }\n\n    return new PrimeElement(element);\n  }\n\n  /**\n   * Queries the DOM using the given selector starting at the given element and returns the first matched element\n   * or null if there aren't any matches.\n   *\n   * @param {string} selector The selector.\n   * @param {Element|Document|PrimeElement} [element=document] The starting point for the search (defaults to document if not provided).\n   * @returns {PrimeElement} An element or null.\n   */\n  static queryFirst(selector, element) {\n    let domElement = null;\n    if (!Utils.isDefined(element)) {\n      domElement = document;\n    } else {\n      domElement = (element instanceof PrimeElement) ? element.domElement : element;\n    }\n\n    domElement = domElement.querySelector(selector);\n    if (domElement === null) {\n      return null;\n    }\n\n    return new PrimeElement(domElement);\n  }\n\n  /**\n   * Queries the DOM using the given selector starting at the given element and returns the last matched element\n   * or null if there aren't any matches.\n   *\n   * @param {string} selector The selector.\n   * @param {Element|Document|PrimeElement} [element=document] The starting point for the search (defaults to document if not provided).\n   * @returns {PrimeElement} An element or null.\n   */\n  static queryLast(selector, element) {\n    let domElement = null;\n    if (!Utils.isDefined(element)) {\n      domElement = document;\n    } else {\n      domElement = (element instanceof PrimeElement) ? element.domElement : element;\n    }\n\n    const domElements = domElement.querySelectorAll(selector);\n    if (domElements.length === 0) {\n      return null;\n    }\n\n    return new PrimeElement(domElements[domElements.length - 1]);\n  }\n\n  /**\n   * Traverses up the DOM from the starting element and looks for a match to the selector.\n   *\n   * @param {string} selector The selector.\n   * @param {PrimeElement|Element} element The starting point for the upward traversal.\n   * @returns {PrimeElement} An element or null.\n   */\n  static queryUp(selector, element) {\n    let domElement = null;\n    if (!Utils.isDefined(element)) {\n      throw new SyntaxError('Missing required parameter. The element is required.');\n    } else {\n      domElement = (element instanceof PrimeElement) ? element.domElement : element;\n    }\n\n    domElement = domElement.parentNode;\n    while (domElement !== null && !domElement.matches(selector)) {\n      domElement = domElement.parentNode;\n      if (domElement === document) {\n        domElement = null;\n      }\n    }\n\n    if (domElement !== null) {\n      return new PrimeElement(domElement);\n    }\n\n    return null;\n  }\n\n  /**\n   * Removes an event handler for a specific event from the document that you attached using addEventListener\n   *\n   * @param {string} event The name of the event.\n   * @param {Function} listener The listener function.\n   */\n  static removeEventListener(event, listener) {\n    if (document.removeEventListener) {\n      document.removeEventListener(event, listener, false);\n    } else if (document.detachEvent) {\n      document.detachEvent('on' + event, listener);\n    } else {\n      throw new TypeError('Unable to remove event from the element. Neither removeEventListener nor detachEvent methods are available');\n    }\n  }\n\n  /* ===================================================================================================================\n   * Private Methods\n   * ===================================================================================================================*/\n\n  /**\n   * Calls all the registered document ready listeners.\n   *\n   * @private\n   */\n  static _callReadyListeners() {\n    if (document.addEventListener || document.readyState === 'complete') {\n      let readyFunction;\n      while (readyFunction = PrimeDocument.readyFunctions.shift()) {\n        readyFunction();\n      }\n    }\n\n    if (document.removeEventListener) {\n      document.removeEventListener('DOMContentLoaded', PrimeDocument._callReadyListeners, false);\n    } else {\n      document.detachEvent('onreadystatechange', PrimeDocument._callReadyListeners);\n    }\n  }\n}\n\n/* ===================================================================================================================\n * Polyfill\n * ===================================================================================================================*/\n\n/* https://developer.mozilla.org/en-US/docs/Web/API/DOMParser */\n(function(DOMParser) {\n  const proto = DOMParser.prototype;\n  const nativeParse = proto.parseFromString;\n\n  // Firefox/Opera/IE throw errors on unsupported types\n  try {\n    // WebKit returns null on unsupported types\n    if ((new DOMParser()).parseFromString('', 'text/html')) {\n      // text/html parsing is natively supported\n      return;\n    }\n  } catch (ex) {\n  }\n\n  proto.parseFromString = function(markup, type) {\n    if (/^\\s*text\\/html\\s*(?:;|$)/i.test(type)) {\n      const doc = document.implementation.createHTMLDocument('');\n      if (markup.toLowerCase().indexOf('<!doctype') > -1) {\n        doc.documentElement.innerHTML = markup;\n      } else {\n        doc.body.innerHTML = markup;\n      }\n      return doc;\n    } else {\n      return nativeParse.apply(this, arguments);\n    }\n  };\n}(DOMParser));\n\nexport {PrimeDocument};\n","/*\n * Copyright (c) 2012-2018, Inversoft Inc., All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific\n * language governing permissions and limitations under the License.\n */\n'use strict';\n\nimport {PrimeDocument} from \"./PrimeDocument.js\";\n\n/**\n * The Utils namespace. This contains utility functions.\n *\n * @namespace Utils\n */\nconst Utils = {\n  spaceRegex: /\\s+/,\n  typeRegex: /^\\[object\\s(.*)\\]$/,\n\n  /**\n   * Binds all of the functions inside the object so that <code>this</code> is the object. This is extremely useful for\n   * objects that have functions that will be used as event listeners. Rather than having to manage binding and function\n   * references manually you can instead bind all of the functions in the object and then use them directly for event\n   * listeners.\n   *\n   * Here's an example:\n   *\n   * <pre>\n   *   function Foo() {\n   *     Utils.bindAll(this);\n   *\n   *     // This function is bound to this (i.e. this.handleClick = this.handleClick.bind(this)).\n   *     PrimeDocument.queryFirst('a').addEventListener('click', this.handleClick);\n   *   }\n   *\n   *   Foo.prototype = {\n   *     handleClick: function(event) {\n   *       ...\n   *     }\n   *   };\n   * </pre>\n   *\n   * @param {*} object The object to bind all the functions for.\n   */\n  bindAll: function(object) {\n    Utils.getAllPropertyNames(object).forEach((property) => {\n      if (property !== 'constructor' && typeof object[property] === 'function' &&\n          !(object[property].name && object[property].name.startsWith('bound '))) { // name isn't defined in ie\n        Object.defineProperty(object, property, {value: object[property].bind(object)});\n      }\n    });\n  },\n\n  /**\n   * HTML escape a string.\n   *\n   * @param string The string to escape\n   * @returns {string} the escaped string\n   */\n  escapeHTML: function(string) {\n    let div = document.createElement('div');\n    div.appendChild(document.createTextNode(string));\n    return div.innerHTML;\n  },\n\n  /**\n   * Reverses HTML escaping.\n   * @param string\n   * @returns {string}\n   */\n  unescapeHTML: function(string) {\n    // Neat trick using a textarea\n    let txt = document.createElement('textarea');\n    txt.innerHTML = string;\n    return txt.value;\n  },\n\n  /**\n   * Returns all of the properties for this object and all of its\n   * inherited properties from parent objects.\n   *\n   * @param object\n   * @returns {Array<string>}\n   */\n  getAllPropertyNames: function(object) {\n    let props = {};\n\n    do {\n      Object.getOwnPropertyNames(object).forEach((prop) => {\n        if (!props[prop]) {\n          props[prop]=prop;\n        }\n      })\n    } while (object = Object.getPrototypeOf(object));\n\n    return Object.keys(props);\n  },\n\n  /**\n   * Binds all of the functions inside the object so that <code>this</code> is the object. This is extremely useful for\n   * objects that have functions that will be used as event listeners. Rather than having to manage binding and function\n   * references manually you can instead bind all of the functions in the object and then use them directly for event\n   * listeners.\n   *\n   * Here's an example:\n   *\n   * <pre>\n   *   function Foo() {\n   *     Utils.bindAll(this);\n   *\n   *     // This function is bound to this (i.e. this.handleClick = this.handleClick.bind(this)).\n   *     PrimeDocument.queryFirst('a').addEventListener('click', this.handleClick);\n   *   }\n   *\n   *   Foo.prototype = {\n   *     handleClick: function(event) {\n   *       ...\n   *     }\n   *   };\n   * </pre>\n   *\n   * @param {*} object The object to bind all the functions for.\n   * @param {String} arguments A varargs list of function names to bind.\n   */\n  bindSome: function(object) {\n    if (arguments.length > 1) {\n      for (let i = 1; i < arguments.length; i++) {\n        const func = object[arguments[i]];\n        if (!Utils.isDefined(func) || !(func instanceof Function)) {\n          throw new TypeError('The object does not contain a function named [' + arguments[i] + ']');\n        }\n\n        object[arguments[i]] = func.bind(object);\n      }\n    }\n    for (let property in object) {\n      if (object[property] instanceof Function) {\n        object[property] = object[property].bind(object);\n      }\n    }\n  },\n\n  /**\n   * Safely binds a function to a context.\n   *\n   * @param {Function} func The function to bind.\n   * @param {Object} [context] An optional context to bind the function to.\n   * @returns {Function} Either <code>func</code> or the newly bound function.\n   */\n  bindSafe: function(func, context) {\n    if (!Utils.isDefined(func)) {\n      throw new Error('Invalid arguments');\n    }\n\n    if (!Utils.isDefined(context)) {\n      return func;\n    }\n\n    return func.bind(context);\n  },\n\n  /**\n   * Calculates the length of the given text using the style of the given element.\n   *\n   * @param {PrimeElement} element The element to use the style of.\n   * @param {string} text The text to calculate the length of.\n   * @returns {number} The length of the text.\n   */\n  calculateTextLength: function(element, text) {\n    const computedStyle = element.getComputedStyle();\n    let textCalculator = PrimeDocument.queryById('prime-text-calculator');\n    if (textCalculator === null) {\n      textCalculator = PrimeDocument.newElement('<span/>')\n          .setStyles({\n            position: 'absolute',\n            width: 'auto',\n            fontSize: computedStyle['fontSize'],\n            fontFamily: computedStyle['fontFamily'],\n            fontWeight: computedStyle['fontWeight'],\n            letterSpacing: computedStyle['letterSpacing'],\n            whiteSpace: 'nowrap'\n          })\n          .setId('prime-text-calculator')\n          .setTop(-9999)\n          .setLeft(-9999)\n          .appendTo(document.body);\n    }\n\n    textCalculator.setHTML(text);\n    return textCalculator.getWidth();\n  },\n\n  /**\n   * Attempts to invoke a function iteratively in the background a specific number of times within a specific duration.\n   * This might not complete in the specified duration. The functions passed in should be short functions that return as\n   * quickly as possible. If you are using long functions, use the recursive setTimeout trick by-hand instance.\n   *\n   * @param {number} totalDuration The duration in milliseconds.\n   * @param {number} timesToCall The number of times to call the function.\n   * @param {Function} stepFunction The step function to call each iteration.\n   * @param {Function} [endFunction] The function to invoke at the end.\n   */\n  callIteratively: function(totalDuration, timesToCall, stepFunction, endFunction) {\n    const step = totalDuration / timesToCall;\n    let count = 0;\n    const id = setInterval(function() {\n      count++;\n      const last = (count >= timesToCall);\n      stepFunction(last);\n      if (last) {\n        clearInterval(id);\n\n        if (Utils.isDefined(endFunction)) {\n          endFunction();\n        }\n      }\n    }, step - 1);\n  },\n\n  /**\n   * Capitalizes the given String.\n   *\n   * @param {string} str The String to capitalize.\n   * @returns {string} The capitalized String.\n   */\n  capitalize: function(str) {\n    return str.charAt(0).toUpperCase() + str.substring(1);\n  },\n\n  /**\n   * Converts CSS style names to style JavaScript names.\n   *\n   * @param {string} name The CSS style name to convert\n   * @returns {string} The converted style name.\n   */\n  convertStyleName: function(name) {\n    if (name === 'float') {\n      return 'cssFloat';\n    }\n\n    let dash = name.indexOf('-');\n    if (dash === -1) {\n      return name;\n    }\n\n    let start = 0;\n    let result = '';\n    while (dash !== -1) {\n      const piece = name.substring(start, dash);\n      if (start === 0) {\n        result = result.concat(piece);\n      } else {\n        result = result.concat(Utils.capitalize(piece));\n      }\n\n      start = dash + 1;\n      dash = name.indexOf('-', start);\n    }\n\n    return result + Utils.capitalize(name.substring(start));\n  },\n\n  /**\n   * Return an options map {Object} of the data set values coerced to a typed value of boolean, string or number.\n   *\n   * @param {PrimeElement} element The element.\n   * @returns {Object} The options object.\n   */\n  dataSetToOptions: function(element) {\n    const options = {};\n    const data = element.getDataSet();\n    for (let prop in data) {\n      if (!data.hasOwnProperty(prop)) {\n        continue;\n      }\n      const value = data[prop];\n      if (isNaN(value)) {\n        if (value === 'true') {\n          options[prop] = true;\n        } else if (value === 'false') {\n          options[prop] = false;\n        } else {\n          options[prop] = value;\n        }\n      } else {\n        options[prop] = parseInt(value);\n      }\n    }\n\n    return options;\n  },\n\n  /**\n   * Determines if an object is an array or not.\n   *\n   * @param {*} o The object to check.\n   * @returns {boolean} True if the object is an array, false otherwise.\n   */\n  isArray: function(o) {\n    return Object.prototype.toString.call(o) === '[object Array]';\n  },\n\n  /**\n   * Tests whether or not the value is not null and not 'undefined'.\n   *\n   * @param {*} value The value to test.\n   * @returns {boolean} True if the value is defined (not null or undefined).\n   */\n  isDefined: function(value) {\n    return value !== null && typeof(value) !== 'undefined';\n  },\n\n  /**\n   * Left pad a number.\n   * @param {number} number the number to pad\n   * @param {number} width the width of the final result\n   * @returns {string}\n   */\n  leftPadNumber: function(number, width) {\n    const sign = Math.sign(number) === -1 ? '-' : '';\n    return sign + new Array(width).concat([Math.abs(number)]).join('0').slice(-width);\n  },\n\n  /**\n   * Parses a CSS measure value (12px) as an integer.\n   *\n   * @param {string} measure The CSS measure\n   * @returns {number} The value as an integer.\n   */\n  parseCSSMeasure: function(measure) {\n    const index = measure.indexOf('px');\n    if (index > 0) {\n      return parseInt(measure.substring(0, measure.length - 2));\n    }\n\n    return parseInt(measure) || 0;\n  },\n\n  /**\n   * Parses JSON.\n   *\n   * @param {string} json The JSON.\n   * @returns {Object} The JSON data as an object.\n   */\n  parseJSON: function(json) {\n    return JSON.parse(json);\n  },\n\n  /**\n   * Removes the objects in the toRemove array from the fromArray.\n   *\n   * @param {Array} fromArray The array to remove from.\n   * @param {Array} toRemove The values to remove.\n   */\n  removeAllFromArray: function(fromArray, toRemove) {\n    for (let i = 0; i < toRemove.length; i++) {\n      Utils.removeFromArray(fromArray, toRemove[i]);\n    }\n  },\n\n  /**\n   * Removes the given object from the given array.\n   *\n   * @param {Array} array The array to remove from.\n   * @param {*} obj The object to remove.\n   */\n  removeFromArray: function(array, obj) {\n    const index = array.indexOf(obj);\n    if (index !== -1) {\n      const shift = array.splice(index + 1, array.length);\n      array.length = index;\n      array.push.apply(array, shift);\n    }\n  },\n\n  /**\n   * Helper function to provide a one liner to behave as if you returned 'false' from a legacy version of Prime.js.\n   *\n   * Calling this method is equivalent to calling event.preventDefault and event.stopPropagation.\n   * @param event\n   */\n  stopEvent: function(event) {\n    // Compatibility with older versions of IE\n    event.cancelBubble = true;\n    if (event.stopPropagation) {\n      event.stopPropagation();\n    }\n    if (event.preventDefault) {\n      event.preventDefault();\n    }\n  },\n\n  type: function(object) {\n    return Object.prototype.toString.call(object).match(Utils.typeRegex)[1];\n  }\n};\n\nexport {Utils};\n","/*\n * Copyright (c) 2017-2018, Inversoft Inc., All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific\n * language governing permissions and limitations under the License.\n */\n\nimport {Utils} from \"../Utils.js\";\nimport {PrimeDocument} from \"../PrimeDocument.js\";\n\n/**\n * The singleton instance.\n *\n * @type {Overlay}\n */\nlet instance;\n\nclass Overlay {\n  /**\n   * Constructs a new Overlay instance once per DOM.\n   *\n   * @constructor\n   */\n  constructor() {\n    Utils.bindAll(this);\n\n    // Check if the overlay doesn't exist and add it\n    this.overlay = PrimeDocument.queryById('prime-overlay');\n    if (this.overlay === null) {\n      this.overlay = PrimeDocument.newElement('<div/>').setId('prime-overlay').appendTo(document.body).hide();\n    }\n    this.bodyOverflow = null;\n  }\n\n  /**\n   * Return the instance of the Overlay widget\n   * @returns {Overlay}\n   */\n  static get instance() {\n    return instance;\n  }\n\n  /**\n   * Set the instance value of the Overlay instance\n   * @param  value {Overlay}\n   */\n  static set instance(value) {\n    instance = value;\n  }\n\n  /**\n   * Closes the overlay and the target element.\n   */\n  close() {\n    // using null ensures that if this style is not defined, we'll remove it when we're done\n    let overflowStyle = this.bodyOverflow || '';\n    PrimeDocument.bodyElement.setStyle('overflow', overflowStyle);\n    this.overlay.setStyle('zIndex', '10');\n    this.overlay.hide();\n    return this;\n  }\n\n  /**\n   * Opens the overlay and positions the element over it.\n   * @param zIndex {Number|string}\n   */\n  open(zIndex) {\n    if (this.bodyOverflow === null) {\n      this.bodyOverflow = PrimeDocument.bodyElement.getStyle('overflow');\n    }\n    PrimeDocument.bodyElement.setStyle('overflow', 'hidden');\n    this.overlay.show();\n\n    // Set the z-index of this dialog and the overlay\n    this.overlay.setStyle('zIndex', zIndex.toString());\n    return this;\n  }\n\n  /**\n   * Changes the id of the Overlay element.\n   *\n   * @param id {string} The new id.\n   * @returns {Overlay}\n   */\n  setId(id) {\n    this.overlay.setId(id);\n    return this;\n  }\n\n  /**\n   * Updates the zindex of the overlay.\n   *\n   * @param zIndex {string|number} The new zIndex.\n   */\n  setZIndex(zIndex) {\n    this.overlay.setStyle('zIndex', zIndex.toString());\n    return this;\n  }\n}\n\nPrimeDocument.onReady(function() {\n  Overlay.instance = new Overlay();\n});\n\nexport {Overlay};\n","/*\n * Copyright (c) 2014-2022, Inversoft Inc., All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific\n * language governing permissions and limitations under the License.\n */\n'use strict';\n\nimport {Utils} from \"./Utils.js\";\nimport {PrimeElement} from \"./Document/PrimeElement.js\";\n\nclass PrimeRequest {\n  /**\n   * Makes a new AJAX request.\n   *\n   * @constructor\n   * @param {string} [url] The URL to call. This can be left out for sub-classing but should otherwise be provided.\n   * @param {string} [method=GET] The HTTP method to use. You can specify GET, POST, PUT, DELETE, HEAD, SEARCH, etc.\n   */\n  constructor(url, method) {\n    Utils.bindAll(this);\n    this.xhr = new XMLHttpRequest();\n    this.async = true;\n    this.body = null;\n    this.queryParams = null;\n    this.contentType = null;\n    this.inProgress = null;\n    this.errorHandler = this.onError;\n    this.headers = {};\n    this.loadingHandler = this.onLoading;\n    this.method = method || 'GET';\n    this.openHandler = this.onOpen;\n    this.password = null;\n    this.sendHandler = this.onSend;\n    this.successHandler = this.onSuccess;\n    this.unsetHandler = this.onUnset;\n    this.url = url;\n    this.username = null;\n  }\n\n  /**\n   * Changes the URL to call.\n   *\n   * @param {string} url The new URL to call.\n   * @returns {PrimeRequest} This PrimeRequest.\n   */\n  forURL(url) {\n    this.url = url;\n    return this;\n  }\n\n  /**\n   * Invokes the AJAX request. If the URL is not set, this throws an exception.\n   *\n   * @returns {PrimeRequest} This PrimeRequest.\n   */\n  go() {\n    if (!this.url) {\n      throw new TypeError('No URL set for AJAX request');\n    }\n\n    let requestUrl = this.url;\n    if ((this.method === 'GET' || this.method === 'DELETE') && this.queryParams !== null) {\n      if (requestUrl.indexOf('?') === -1) {\n        requestUrl += '?' + this.queryParams;\n      } else {\n        requestUrl += '&' + this.queryParams;\n      }\n    }\n\n    if (this.async) {\n      if (this.inProgress !== null) {\n        this.inProgress.open();\n      }\n\n      this.xhr.onreadystatechange = this._handler.bind(this);\n    }\n\n    this.xhr.open(this.method, requestUrl, this.async, this.username, this.password);\n\n    if (Object.keys(this.headers).length > 0) {\n      for (let key in this.headers) {\n        if (this.headers.hasOwnProperty(key)) {\n          this.xhr.setRequestHeader(key, this.headers[key]);\n        }\n      }\n    }\n\n    if (this.contentType) {\n      this.xhr.setRequestHeader('Content-Type', this.contentType);\n    }\n\n    this.xhr.send(this.body);\n\n    return this;\n  }\n\n  /**\n   * Default handler for the \"completed\" state and an HTTP response status of anything but 2xx. Sub-classes can override\n   * this handler or you can pass in a handler function to the {@link #withUnsetHandler}.\n   *\n   * @param {XMLHttpRequest} xhr The XMLHttpRequest object.\n   */\n  onError(xhr) {\n  }\n\n  /**\n   * Default handler for the \"loading\" state. Sub-classes can override this handler or you can pass in a handler function\n   * to the {@link #withLoadingHandler}.\n   *\n   * @param {XMLHttpRequest} xhr The XMLHttpRequest object.\n   */\n  onLoading(xhr) {\n  }\n\n  /**\n   * Default handler for the \"open\" state. Sub-classes can override this handler or you can pass in a handler function\n   * to the {@link #withOpenHandler}.\n   *\n   * @param {XMLHttpRequest} xhr The XMLHttpRequest object.\n   */\n  onOpen(xhr) {\n  }\n\n  /**\n   * Default handler for the \"send\" state. Sub-classes can override this handler or you can pass in a handler function\n   * to the {@link #withSendHandler}.\n   *\n   * @param {XMLHttpRequest} xhr The XMLHttpRequest object.\n   */\n  onSend(xhr) {\n  }\n\n  /**\n   * Default handler for the \"complete\" state and an HTTP response status of 2xx. Sub-classes can override this handler\n   * or you can pass in a handler function to the {@link #withUnsetHandler}.\n   *\n   * @param {XMLHttpRequest} xhr The XMLHttpRequest object.\n   */\n  onSuccess(xhr) {\n  }\n\n  /**\n   * Default handler for the \"unset\" state. Sub-classes can override this handler or you can pass in a handler function\n   * to the {@link #withUnsetHandler}.\n   *\n   * @param {XMLHttpRequest} xhr The XMLHttpRequest object.\n   */\n  onUnset(xhr) {\n  }\n\n  /**\n   * Sets the async flag to false.\n   *\n   * @returns {PrimeRequest} This PrimeRequest.\n   */\n  synchronously() {\n    this.async = false;\n    return this;\n  }\n\n  /**\n   * Sets the method used to make the AJAX request.\n   *\n   * @param {string} method The HTTP method.\n   * @returns {PrimeRequest} This PrimeRequest.\n   */\n  usingMethod(method) {\n    this.method = method;\n    return this;\n  }\n\n  /**\n   * Sets the request body for the request.\n   *\n   * @param {string} body The request body.\n   * @returns {PrimeRequest} This PrimeRequest.\n   */\n  withBody(body) {\n    this.body = body;\n    return this;\n  }\n\n  /**\n   * Sets the content type for the request.\n   *\n   * @param {string} contentType The contentType.\n   * @returns {PrimeRequest} This PrimeRequest.\n   */\n  withContentType(contentType) {\n    this.contentType = contentType;\n    return this;\n  }\n\n  /**\n   * Sets the data object for the request. Will store the values for query parameters or post data depending on the\n   * method that is set.  If the method is a post or put, will also set content-type to x-www-form-urlencoded.\n   *\n   * @param {Object} data The data object.\n   * @returns {PrimeRequest} This PrimeRequest.\n   */\n  withData(data) {\n    for (let prop in data) {\n      if (data.hasOwnProperty(prop)) {\n        if (this.method === 'PUT' || this.method === 'POST') {\n          this.body = this._addDataValue(this.body, prop, data[prop]);\n        } else {\n          this.queryParams = this._addDataValue(this.queryParams, prop, data[prop]);\n        }\n      }\n    }\n\n    if (this.method === \"PUT\" || this.method === \"POST\") {\n      this.contentType = 'application/x-www-form-urlencoded';\n    }\n    return this;\n  }\n\n  /**\n   * Sets the data for the request using the form fields in the given form element. Will store the values for query\n   * parameters or post data depending on the method that is set.  If the method is a post or put, will also set\n   * content-type to x-www-form-urlencoded.\n   *\n   * @param {PrimeElement|HTMLFormElement} form The form object.\n   * @returns {PrimeRequest} This PrimeRequest.\n   */\n  withDataFromForm(form) {\n    let domElement = form;\n    if (form instanceof PrimeElement) {\n      domElement = form.domElement;\n    }\n\n    for (let i = 0; i < domElement.elements.length; i++) {\n      const primeElement = new PrimeElement(domElement.elements[i]);\n      if (primeElement.isDisabled() || !primeElement.isInput()) {\n        continue;\n      }\n\n      const name = primeElement.getAttribute('name');\n      if (name === null || name.length === 0) {\n        continue;\n      }\n\n      let type = primeElement.getAttribute('type');\n      if (type !== null) {\n        type = type.toLowerCase();\n      }\n\n      let values;\n      if (primeElement.getTagName() === 'SELECT') {\n        values = primeElement.getSelectedValues();\n      } else if ((type === 'radio' || type === 'checkbox') && !primeElement.isChecked()) {\n        continue;\n      } else {\n        values = primeElement.getValue();\n      }\n\n      if (this.method === 'PUT' || this.method === 'POST') {\n        this.body = this._addDataValue(this.body, name, values)\n      } else {\n        this.queryParams = this._addDataValue(this.queryParams, name, values);\n      }\n    }\n\n    if (this.method === \"PUT\" || this.method === \"POST\") {\n      this.contentType = 'application/x-www-form-urlencoded';\n    }\n\n    return this;\n  }\n\n  /**\n   * Sets the handler to invoke when the state of the AJAX request is \"complete\" and the HTTP status in the response is\n   * not 2xx.\n   *\n   * @param {Function} func The handler function.\n   * @returns {PrimeRequest} This PrimeRequest.\n   */\n  withErrorHandler(func) {\n    this.errorHandler = func;\n    return this;\n  }\n\n  /**\n   * Sets an InProgress object that will be called by this AJAX request.\n   *\n   * @param {InProgress} inProgress The InProgress object.\n   * @return {PrimeRequest} This.\n   */\n  withInProgress(inProgress) {\n    this.inProgress = inProgress;\n    return this;\n  }\n\n  /**\n   * Sets the body of the AJAX request to the string value of the provided JSON object. The content-type of the request\n   * will also be set to 'application/json'. The provided JSON object may be passed as a string or an object.\n   *\n   * @param {Object} json The JSON object.\n   * @returns {PrimeRequest} This PrimeRequest.\n   */\n  withJSON(json) {\n    this.body = typeof(json) === String ? json : JSON.stringify(json);\n    this.contentType = 'application/json';\n    return this;\n  }\n\n  /**\n   * Sets the handler to invoke when the state of the AJAX request is \"loading\".\n   *\n   * @param {Function} func The handler function.\n   * @returns {PrimeRequest} This PrimeRequest.\n   */\n  withLoadingHandler(func) {\n    this.loadingHandler = func;\n    return this;\n  }\n\n  /**\n   * Set the request headers using the key and value.\n   *\n   * @param {String} key The key name.\n   * @param {String} value The value.\n   * @returns {PrimeRequest} This PrimeRequest.\n   */\n  withHeader(key, value) {\n    this.headers[key] = value;\n    return this;\n  }\n\n  /**\n   * Set the key value pairs provided as request headers.\n   *\n   * @param {Object} headers A map of key value pairs.\n   * @returns {PrimeRequest} This PrimeRequest.\n   */\n  withHeaders(headers) {\n    for (let key in headers) {\n      if (headers.hasOwnProperty(key)) {\n        this.headers[key] = headers[key];\n      }\n    }\n    return this;\n  }\n\n  /**\n   * Sets the XMLHTTPRequest's response type field, which will control how the response is parsed.\n   *\n   * @param {string} responseType The response type.\n   * @returns {PrimeRequest} This PrimeRequest.\n   */\n  withResponseType(responseType) {\n    this.xhr.responseType = responseType;\n    return this;\n  }\n\n  /**\n   * Sets the handler to invoke when the state of the AJAX request is \"open\".\n   *\n   * @param {Function} func The handler function.\n   * @returns {PrimeRequest} This PrimeRequest.\n   */\n  withOpenHandler(func) {\n    this.openHandler = func;\n    return this;\n  }\n\n  /**\n   * Sets the handler to invoke when the state of the AJAX request is \"send\".\n   *\n   * @param {Function} func The handler function.\n   * @returns {PrimeRequest} This PrimeRequest.\n   */\n  withSendHandler(func) {\n    this.sendHandler = func;\n    return this;\n  }\n\n  /**\n   * Sets the handler to invoke when the state of the AJAX request is \"complete\" and the HTTP status in the response is\n   * 2xx.\n   *\n   * @param {Function} func The handler function.\n   * @returns {PrimeRequest} This PrimeRequest.\n   */\n  withSuccessHandler(func) {\n    this.successHandler = func;\n    return this;\n  }\n\n  /**\n   * Sets the handler to invoke when the state of the AJAX request is \"unset\".\n   *\n   * @param {Function} func The handler function.\n   * @returns {PrimeRequest} This PrimeRequest.\n   */\n  withUnsetHandler(func) {\n    this.unsetHandler = func;\n    return this;\n  }\n\n  /**\n   * Resets the Request back to a base state (basically just the URL + method).  This can be\n   * useful if a component is going to make many requests to the same endpoint with different parameters.\n   *\n   * @returns {PrimeRequest} This PrimeRequest.\n   */\n  reset() {\n    this.queryParams = null;\n    this.data = null;\n    this.body = null;\n    this.contentType = null;\n    return this;\n  }\n\n  /* ===================================================================================================================\n   * Private Methods\n   * ===================================================================================================================*/\n\n  // noinspection JSMethodCanBeStatic\n  /**\n   * Adds the given name-value pair to the given data String. If the value is an array, it adds multiple values for each\n   * piece. Otherwise, it assumes value is a String or can be converted to a String.\n   *\n   * @param {string} dataString The data String used to determine if an ampersand is necessary.\n   * @param {string} name The name of the name-value pair.\n   * @param {string|Array} value The value of the name-value pair.\n   * @returns {string} The new data string.\n   * @private\n   */\n  _addDataValue(dataString, name, value) {\n    let result = '';\n    if (value instanceof Array) {\n      for (let i = 0; i < value.length; i++) {\n        result += encodeURIComponent(name) + '=' + encodeURIComponent(value[i]);\n        if (i + 1 < value.length) {\n          result += '&';\n        }\n      }\n    } else {\n      result = encodeURIComponent(name) + '=' + encodeURIComponent(value);\n    }\n\n    if (dataString !== null && result !== '') {\n      result = dataString + '&' + result;\n    } else if (dataString !== null && result === '') {\n      result = dataString;\n    }\n\n    return result;\n  }\n\n  /**\n   * @private\n   */\n  _handler() {\n    if (this.xhr.readyState === 0) {\n      this.unsetHandler(this.xhr);\n    } else if (this.xhr.readyState === 1) {\n      this.openHandler(this.xhr);\n    } else if (this.xhr.readyState === 2) {\n      this.sendHandler(this.xhr);\n    } else if (this.xhr.readyState === 3) {\n      this.loadingHandler(this.xhr);\n    } else if (this.xhr.readyState === 4) {\n\n      // Call the InProgress before hand because the success handler might call another AJAX method that might open another InProgress\n      if (this.inProgress !== null) {\n        this.inProgress.close(function() {\n          if (this.xhr.status >= 200 && this.xhr.status <= 299) {\n            this.successHandler(this.xhr);\n          } else {\n            this.errorHandler(this.xhr);\n          }\n        }.bind(this));\n      } else {\n        if (this.xhr.status >= 200 && this.xhr.status <= 299) {\n          this.successHandler(this.xhr);\n        } else {\n          this.errorHandler(this.xhr);\n        }\n      }\n    }\n  }\n}\n\nexport {PrimeRequest};\n","/*\n * Copyright (c) 2012-2017, Inversoft Inc., All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific\n * language governing permissions and limitations under the License.\n */\n'use strict';\n\nclass PrimeWindow {\n  /**\n   * Attaches an event listener to the window, returning the handler proxy.\n   *\n   * @param {string} event The name of the event.\n   * @param {Function} listener The event handler.\n   * @returns {Window} The window object.\n   */\n  static addEventListener(event, listener) {\n    if (event.indexOf(':') === -1) {\n      window.eventListeners = window.eventListeners || {};\n      window.eventListeners[event] = window.eventListeners[event] || [];\n      window.eventListeners[event].push(listener);\n      if (window.addEventListener) {\n        window.addEventListener(event, listener, false);\n      } else if (window.attachEvent) {\n        window.attachEvent('on' + event, listener);\n      } else {\n        throw new TypeError('Unable to set event onto the window. Neither addEventListener nor attachEvent methods are available');\n      }\n    } else {\n      // Custom event\n      window.customEventListeners = window.customEventListeners || {};\n      window.customEventListeners[event] = window.customEventListeners[event] || [];\n      window.customEventListeners[event].push(listener);\n    }\n\n    return window;\n  }\n\n  /**\n   * Returns the inner height of the window. This includes only the rendering area and not the window chrome (toolbars,\n   * status bars, etc). If this method can't figure out the inner height, it throws an exception.\n   *\n   * @returns {number} The inner height of the window.\n   */\n  static getInnerHeight() {\n    if (typeof(window.innerHeight) === 'number') {\n      // Most browsers\n      return window.innerHeight;\n    } else if (document.documentElement && document.documentElement.clientHeight) {\n      // IE 6+ in 'standards compliant mode'\n      return document.documentElement.clientHeight;\n    } else if (document.body && document.body.clientHeight) {\n      // IE 4 compatible\n      return document.body.clientHeight;\n    }\n\n    throw new Error('Unable to determine inner height of the window');\n  }\n\n  /**\n   * Returns the inner width of the window. This includes only the rendering area and not the window chrome (toolbars,\n   * status bars, etc). If this method can't figure out the inner width, it throws an exception.\n   *\n   * @returns {number} The inner width of the window.\n   */\n  static getInnerWidth() {\n    if (typeof(window.innerWidth) === 'number') {\n      // Most browsers\n      return window.innerWidth;\n    } else if (document.documentElement && document.documentElement.clientWidth) {\n      // IE 6+ in 'standards compliant mode'\n      return document.documentElement.clientWidth;\n    } else if (document.body && document.body.clientWidth) {\n      // IE 4 compatible\n      return document.body.clientWidth;\n    }\n\n    throw new Error('Unable to determine inner width of the window');\n  }\n\n  /**\n   * Returns the number of pixels the Window is scrolled by.\n   *\n   * @returns {number} The number of pixels.\n   */\n  static getScrollTop() {\n    if (typeof(window.pageYOffset) === 'number') {\n      return window.pageYOffset;\n    } else if (document.body && document.body.scrollTop) {\n      return document.body.scrollTop;\n    } else if (document.documentElement && document.documentElement.scrollTop) {\n      return document.documentElement.scrollTop;\n    }\n\n    throw new Error('Unable to determine scrollTop of the window');\n  }\n}\n\nexport {PrimeWindow}\n","/*\n * Copyright (c) 2015-2017, Inversoft Inc., All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific\n * language governing permissions and limitations under the License.\n */\n'use strict';\n\nimport {PrimeElement} from \"../Document/PrimeElement.js\";\nimport {Utils} from \"../Utils.js\";\nimport {PrimeDocument} from \"../PrimeDocument.js\";\n\nclass Draggable {\n  /**\n   * Constructs a new Draggable object for the given element.\n   *\n   * @param {PrimeElement|Element|EventTarget} element The Prime Element for the Draggable widget.\n   * @param {string} [gripSelector=] gripSelector The optional selector to identify the 'grippy' part.\n   * @constructor\n   */\n  constructor(element, gripSelector) {\n    Utils.bindAll(this);\n\n    this.element = PrimeElement.wrap(element);\n    this.offset = {};\n\n    if (!Utils.isDefined(gripSelector)) {\n      this.grip = this.element;\n    } else {\n      this.grip = this.element.queryFirst(gripSelector);\n      if (this.grip === null) {\n        throw Error('Unable to find an element using the provided selector [' + gripSelector + ']');\n      }\n    }\n  }\n\n  /**\n   * Destroys the Draggable Widget\n   */\n  destroy() {\n    this.element.removeClass('active');\n    this.element.setStyles(this.originalStyle);\n\n    this.grip.removeEventListener('mousedown', this._handleMouseDown);\n    PrimeDocument.removeEventListener('mousemove', this._handleMouseMove);\n    PrimeDocument.removeEventListener('mouseup', this._handleMouseUp);\n  }\n\n  /**\n   * Initializes the Draggable by attaching the event listeners.\n   *\n   * @returns {Draggable} This.\n   */\n  initialize() {\n    this.originalStyle = {\n      cursor: this.element.getStyle('cursor'),\n      zIndex: this.element.getStyle('zIndex')\n    };\n\n    this.grip.addEventListener('mousedown', this._handleMouseDown).setStyle('cursor', 'move');\n    return this;\n  }\n\n  /* ===================================================================================================================\n   * Private methods\n   * ===================================================================================================================*/\n\n  /**\n   * Handle Mouse Down Event\n   * @param {Event} event The mouse event.\n   * @private\n   */\n  _handleMouseDown(event) {\n    event.preventDefault();\n    this.element.addClass('active');\n\n    this.offset = {\n      zIndex: this.element.getStyle('zIndex'),\n      height: this.element.getOuterHeight(),\n      width: this.element.getOuterWidth(),\n      x: event.screenX,\n      y: event.screenY\n    };\n\n    this.element.setStyle('zIndex', this.offset.zIndex + 10);\n\n    // Remove old listeners\n    PrimeDocument.removeEventListener('mousemove', this._handleMouseMove);\n    PrimeDocument.removeEventListener('mouseup', this._handleMouseUp);\n\n    // Attach all the events\n    PrimeDocument.addEventListener('mousemove', this._handleMouseMove);\n    PrimeDocument.addEventListener('mouseup', this._handleMouseUp);\n  }\n\n  /**\n   * Handle the Mouse Move event for the body element.\n   *\n   * @param {Event} event The mouse event.\n   * @private\n   */\n  _handleMouseMove(event) {\n    const xDiff = event.screenX - this.offset.x;\n    const yDiff = event.screenY - this.offset.y;\n    this.offset.x = event.screenX;\n    this.offset.y = event.screenY;\n    this.element.setLeft(this.element.getLeft() + xDiff);\n    this.element.setTop(this.element.getTop() + yDiff);\n  }\n\n  /**\n   * Handle the Mouse Up event for this draggable widget.\n   * @private\n   */\n  _handleMouseUp() {\n    PrimeDocument.removeEventListener('mousemove', this._handleMouseMove);\n    PrimeDocument.removeEventListener('mouseup', this._handleMouseUp);\n    this.element.setStyle('zIndex', this.offset.zIndex);\n    this.element.removeClass('active');\n  }\n}\n\nexport {Draggable}\n","/*\n * Copyright (c) 2017-2018, Inversoft Inc., All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific\n * language governing permissions and limitations under the License.\n */\n\n'use strict';\n\nimport {Overlay} from \"./Overlay.js\";\nimport {PrimeDocument} from \"../PrimeDocument.js\";\nimport {PrimeRequest} from \"../PrimeRequest.js\";\nimport {Utils} from \"../Utils.js\";\nimport {PrimeWindow} from \"../Window.js\";\nimport {Draggable} from \"./Draggable.js\";\n\nclass AJAXDialog {\n  /**\n   * Constructs a new dialog box, which is dynamically built and then populated with the HTML returned from an AJAX call.\n   *\n   * @constructor\n   */\n  constructor() {\n    Utils.bindAll(this);\n\n    this.draggable = null;\n    this.element = null;\n    this.initialized = false;\n    this._setInitialOptions();\n  }\n\n  /**\n   * Closes the dialog, destroys the HTML and updates or hides the overlay.\n   * @returns {AJAXDialog} This.\n   */\n  close() {\n    this.element.removeClass('open');\n    if (this.draggable !== null) {\n      this.draggable.destroy();\n      this.draggable = null;\n    }\n\n    setTimeout(function() {\n      this.element.removeFromDOM();\n      this.element = null;\n\n      const highestZIndex = this._determineZIndex();\n      if (highestZIndex !== 0) {\n        Overlay.instance.setZIndex(highestZIndex);\n      } else {\n        Overlay.instance.close();\n      }\n    }.bind(this), this.options.closeTimeout);\n\n    return this;\n  }\n\n  /**\n   * Destroys the dialog by calling the close function.\n   * @returns {AJAXDialog} This.\n   */\n  destroy() {\n    this.close();\n    return this;\n  }\n\n  /**\n   * Initializes the dialog.\n   * @returns {AJAXDialog} This.\n   */\n  initialize() {\n    return this;\n  }\n\n  /**\n   * Opens the dialog by making the AJAX GET request to the given URI and the opening then dialog.\n   *\n   * @param uri {string} The URI to make the AJAX GET request to.\n   * @returns {AJAXDialog} This.\n   */\n  open(uri) {\n    const request = this.options.ajaxRequest || new PrimeRequest(uri, 'GET');\n    request.withSuccessHandler(this._handleAJAXDialogResponse)\n        .withErrorHandler(this._handleAJAXDialogResponse)\n        .go();\n    return this;\n  }\n\n  /**\n   * Opens the dialog by making the AJAX POST request to the given URI with the given form and extra data (optional)\n   * and then opening the dialog.\n   *\n   * @param uri {string} The URI to make the AJAX POST request to.\n   * @param form {HTMLFormElement|PrimeElement} The Form element to retrieve the data from.\n   * @param extraData [extraData=] {object} (Optional) Extra data to send with the POST.\n   * @returns {AJAXDialog} This.\n   */\n  openPost(uri, form, extraData) {\n    new PrimeRequest(uri, 'POST')\n        .withDataFromForm(form)\n        .withData(extraData)\n        .withSuccessHandler(this._handleAJAXDialogResponse)\n        .go();\n    return this;\n  }\n\n  /**\n   * Updates the HTML contents of the dialog.\n   *\n   * @param html {String} The HTML.\n   * @returns {AJAXDialog} This.\n   */\n  setHTML(html) {\n    this.element.setHTML(html);\n    this._initializeDialog();\n    return this;\n  }\n\n  /**\n   * Sets any additional classes that should be on the dialog.\n   *\n   * @param classes {string} The list of additional classes.\n   * @returns {AJAXDialog} This.\n   */\n  withAdditionalClasses(classes) {\n    this.options.additionalClasses = classes;\n    return this;\n  }\n\n  /**\n   * Override the default Ajax Request used to open the dialog. This does not override the\n   * success and error handlers.\n   *\n   * @param request {PrimeRequest} The Ajax Request to use to open the dialog.\n   * @returns {AJAXDialog} This.\n   */\n  withAjaxRequest(request) {\n    this.options.ajaxRequest = request;\n    return this;\n  }\n\n  /**\n   * Sets the callback that is called after the dialog has been fetched and rendered.\n   *\n   * @param callback {function} The callback function.\n   * @returns {AJAXDialog} This.\n   */\n  withCallback(callback) {\n    this.options.callback = callback;\n    return this;\n  }\n\n  /**\n   * Sets the class name for the dialog element.\n   *\n   * @param className {string} The class name.\n   * @returns {AJAXDialog} This.\n   */\n  withClassName(className) {\n    if (className.indexOf(' ') !== -1) {\n      throw 'Invalid class name [' + className + ']. You can use the additionalClasses options to add more classes.';\n    }\n\n    this.options.className = className;\n    return this;\n  }\n\n  /**\n   * Sets the close button element selector that is used to setup the close button in the HTML that was returned from\n   * the server.\n   *\n   * @param selector {string} The element selector.\n   * @returns {AJAXDialog} This.\n   */\n  withCloseButtonElementSelector(selector) {\n    this.options.closeButtonElementSelector = selector;\n    return this;\n  }\n\n  /**\n   * Sets the timeout used in the close method to allow for transitions.\n   *\n   * @param timeout {int} The timeout.\n   * @returns {AJAXDialog} This.\n   */\n  withCloseTimeout(timeout) {\n    this.options.closeTimeout = timeout;\n    return this;\n  }\n\n  /**\n   * Sets the draggable element selector that is used for the DraggableWidget.\n   *\n   * @param selector {string} The element selector.\n   * @returns {AJAXDialog} This.\n   */\n  withDraggableButtonElementSelector(selector) {\n    this.options.draggableElementSelector = selector;\n    return this;\n  }\n\n  /**\n   * Sets an error callback for AJAX form handling. This is called after a failed form submission.\n   *\n   * @param callback {Function} The callback function. The callback function will called with two parameters,\n   *        the first is a reference this object, the second is the XMLHttpRequest object.\n   * @returns {AJAXDialog} This.\n   */\n  withFormErrorCallback(callback) {\n    this.options.formErrorCallback = callback;\n    return this;\n  }\n\n  /**\n   * Sets whether or not forms inside the dialog are handled via AJAX or not.\n   *\n   * @param enabled {boolean} The choice.\n   * @returns {AJAXDialog} This.\n   */\n  withFormHandling(enabled) {\n    this.options.formHandling = enabled;\n    return this;\n  }\n\n  /**\n   * Sets a pre-submit callback for AJAX form handling. This is called before the form is submitted.\n   *\n   * @param callback {Function} The callback function.\n   * @returns {AJAXDialog} This.\n   */\n  withFormPreSubmitCallback(callback) {\n    this.options.formPreSubmitCallback = callback;\n    return this;\n  }\n\n  /**\n   * Sets a success callback for AJAX form handling. This is called after a successful form submission.\n   *\n   * @param callback {Function} The callback function. The callback function will called with two parameters,\n   *        the first is a reference this object, the second is the XMLHttpRequest object.\n   * @returns {AJAXDialog} This.\n   */\n  withFormSuccessCallback(callback) {\n    this.options.formSuccessCallback = callback;\n    return this;\n  }\n\n  /**\n   * Set more than one option at a time by providing a map of key value pairs. This is considered an advanced\n   * method to set options on the widget. The caller needs to know what properties are valid in the options object.\n   *\n   * @param {Object} options Key value pair of configuration options.\n   * @returns {AJAXDialog} This.\n   */\n  withOptions(options) {\n    if (!Utils.isDefined(options)) {\n      return this;\n    }\n\n    for (let option in options) {\n      if (options.hasOwnProperty(option)) {\n        this.options[option] = options[option];\n      }\n    }\n    return this;\n  }\n\n  /* ===================================================================================================================\n   * Private methods\n   * ===================================================================================================================*/\n\n  _determineZIndex() {\n    let highestZIndex = 0;\n    PrimeDocument.query('.' + this.options.className).each(function(dialog) {\n      const zIndex = parseInt(dialog.getComputedStyle()['zIndex']);\n      if (dialog.isVisible() && zIndex > highestZIndex) {\n        highestZIndex = zIndex;\n      }\n    });\n    return highestZIndex;\n  }\n\n  _handleCloseClickEvent(event) {\n    Utils.stopEvent(event);\n    this.close();\n  }\n\n  _handleAJAXDialogResponse(xhr) {\n    this.element = PrimeDocument.newElement('<div/>', {class: this.options.className + ' ' + this.options.additionalClasses}).appendTo(document.body);\n    this.setHTML(xhr.responseText);\n  }\n\n  _handleAJAXFormError(xhr) {\n    this.setHTML(xhr.responseText);\n    this.form = this.element.queryFirst('form').addEventListener('submit', this._handleAJAXFormSubmit);\n\n    if (this.options.formErrorCallback !== null) {\n      this.options.formErrorCallback(this, xhr);\n    }\n\n    if (this.draggable !== null) {\n      this.draggable.destroy();\n    }\n\n    if (this.options.draggableElementSelector !== null && this.element.queryFirst(this.options.draggableElementSelector) !== null) {\n      this.draggable = new Draggable(this.element, this.options.draggableElementSelector).initialize();\n    }\n  }\n\n  _handleAJAXFormSuccess(xhr) {\n    if (this.options.formSuccessCallback !== null) {\n      this.options.formSuccessCallback(this, xhr);\n    } else {\n      const successURI = this.form.getDataSet()['ajaxSuccessUri'];\n      if (successURI !== undefined) {\n        window.location = successURI;\n      } else {\n        window.location.reload();\n      }\n    }\n  }\n\n  _handleAJAXFormSubmit(event) {\n    Utils.stopEvent(event);\n\n    if (this.options.formPreSubmitCallback !== null) {\n      this.options.formPreSubmitCallback(this);\n    }\n\n    new PrimeRequest(this.form.getAttribute('action'), this.form.getAttribute('method'))\n        .withDataFromForm(this.form)\n        .withSuccessHandler(this._handleAJAXFormSuccess)\n        .withErrorHandler(this._handleAJAXFormError)\n        .go();\n  }\n\n  _initializeDialog() {\n    this.element.query(this.options.closeButtonElementSelector).each(function(e) {\n      e.addEventListener('click', this._handleCloseClickEvent);\n    }.bind(this));\n\n    // Only set the z-index upon first open\n    if (!this.initialized) {\n      const highestZIndex = this._determineZIndex();\n      Overlay.instance.open(highestZIndex + this.options.zIndexOffset);\n      this.element.setStyle('zIndex', (highestZIndex + this.options.zIndexOffset + 10).toString());\n      this.element.addClass('open');\n    }\n\n    // Call the callback before positioning to ensure all changes to the dialog have been made\n    if (this.options.callback !== null) {\n      this.options.callback(this);\n    }\n\n    // Setup forms if enabled\n    if (this.options.formHandling) {\n      this.form = this.element.queryFirst('form').addEventListener('submit', this._handleAJAXFormSubmit);\n    }\n\n    // Only set the position of the dialog when we first open it, if someone calls setHTML on the dialog we are not resizing it.\n    if (!this.initialized) {\n      // Position the fixed dialog in the center of the screen\n      const windowHeight = PrimeWindow.getInnerHeight();\n      const dialogHeight = this.element.getHeight();\n      this.element.setTop(((windowHeight - dialogHeight) / 2) - 20);\n    }\n\n    if (this.options.draggableElementSelector !== null && this.element.queryFirst(this.options.draggableElementSelector) !== null) {\n      this.draggable = new Draggable(this.element, this.options.draggableElementSelector).initialize();\n    }\n\n    this.initialized = true;\n  }\n\n  /**\n   * Set the initial options for this widget.\n   * @private\n   */\n  _setInitialOptions() {\n    // Defaults\n    this.options = {\n      additionalClasses: '',\n      ajaxRequest: null,\n      callback: null,\n      className: 'prime-dialog',\n      closeButtonElementSelector: '[data-dialog-role=\"close-button\"]',\n      closeTimeout: 200,\n      draggableElementSelector: '[data-dialog-role=\"draggable\"]',\n      formErrorCallback: null,\n      formHandling: false,\n      formPreSubmitCallback: null,\n      formSuccessCallback: null,\n      zIndexOffset: 1000\n    };\n  }\n}\n\nexport {AJAXDialog};\n","/*\n * Copyright (c) 2013-2017, Inversoft Inc., All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific\n * language governing permissions and limitations under the License.\n */\n'use strict';\n\n/**\n * @const {{Keys: {BACKSPACE: number, ENTER: number, ESCAPE: number, SPACE: number, TAB: number, LEFT_ARROW: number, UP_ARROW: number, RIGHT_ARROW: number, DOWN_ARROW: number, DELETE: number}} Events}\n */\nconst Events = {\n  Keys: {\n    BACKSPACE: 8,\n    ENTER: 13,\n    ESCAPE: 27,\n    SPACE: 32,\n    TAB: 9,\n    LEFT_ARROW: 37,\n    UP_ARROW: 38,\n    RIGHT_ARROW: 39,\n    DOWN_ARROW: 40,\n    DELETE: 46\n  }\n};\n\nexport {Events};\n","/*\n * Copyright (c) 2015-2018, Inversoft Inc., All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific\n * language governing permissions and limitations under the License.\n */\n'use strict';\n\nimport {Utils} from \"./Utils.js\"\n\nconst PrimeDate = {\n  DAYS_IN_MONTH: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\n\n  /**\n   * Return the hour in a 12-hour format. AM and PM are not communicated by the returned hour.\n   *\n   * @param date {Date} The date object to retrieve the hour from.\n   * @returns {Number} The hour of the day between 1 and 12.\n   */\n  getHourOfDay: function(date) {\n    return (date.getHours() + 24) % 12 || 12;\n  },\n\n  /**\n   * @param year The year.\n   * @returns {boolean} True if this is a leap year, otherwise false.\n   */\n  isLeapYear: function(year) {\n    return !((year % 4) || (!(year % 100) && (year % 400)));\n  },\n\n  /**\n   * Return the number of days in the month.\n   * @param year The year, the days in the month may change during a leap year.\n   * @param month The month.\n   * @returns {Number} The number of days in the month.\n   */\n  numberOfDaysInMonth: function(year, month) {\n    if (month === 1 && this.isLeapYear(year)) {\n      return 29;\n    } else {\n      return PrimeDate.DAYS_IN_MONTH[month];\n    }\n  },\n\n  /**\n   * Adds the given number of days to the given Date.\n   *\n   * @param date {Date} The date to add the days to.\n   * @param number {Number} The number of days to add.\n   */\n  plusDays: function(date, number) {\n    if (number === 0) {\n      return;\n    }\n\n    let newDate = date.getDate() + number;\n    let numberOfDaysInMonth = PrimeDate.numberOfDaysInMonth(date.getFullYear(), date.getMonth());\n\n    if (newDate > 0) {\n      while (newDate > numberOfDaysInMonth) {\n        PrimeDate.plusMonths(date, 1);\n        newDate = newDate - numberOfDaysInMonth;\n        numberOfDaysInMonth = PrimeDate.numberOfDaysInMonth(date.getFullYear(), date.getMonth());\n      }\n\n      date.setDate(newDate);\n    } else {\n      while (newDate <= 0) {\n        PrimeDate.plusMonths(date, -1);\n        numberOfDaysInMonth = PrimeDate.numberOfDaysInMonth(date.getFullYear(), date.getMonth());\n        newDate = newDate + numberOfDaysInMonth;\n      }\n\n      date.setDate(newDate);\n    }\n  },\n\n  /**\n   * Adds the given number of hours to the given Date. The number can be negative.\n   *\n   * @param date {Date} The date.\n   * @param number {Number} The number of hours to add.\n   */\n  plusHours: function(date, number) {\n    if (number === 0) {\n      return;\n    }\n\n    const deltaDays = parseInt(number / 24);\n    PrimeDate.plusDays(date, deltaDays);\n\n    const deltaHours = number % 24;\n    const newHour = date.getHours() + deltaHours;\n    if (newHour > 23) {\n      PrimeDate.plusDays(date, 1);\n      date.setHours(newHour - 24);\n    } else if (newHour < 0) {\n      PrimeDate.plusDays(date, -1);\n      date.setHours(24 + newHour);\n    } else {\n      date.setHours(newHour);\n    }\n  },\n\n  /**\n   * Adds the given number of minutes to the given Date. The number can be negative.\n   *\n   * @param date {Date} The date.\n   * @param number {Number} The number of minutes to add.\n   */\n  plusMinutes: function(date, number) {\n    if (number === 0) {\n      return;\n    }\n\n    const deltaHours = parseInt(number / 60);\n    PrimeDate.plusHours(date, deltaHours);\n\n    const deltaMinutes = number % 60;\n    const newMinute = date.getMinutes() + deltaMinutes;\n    if (newMinute > 60) {\n      PrimeDate.plusHours(date, 1);\n      date.setMinutes(newMinute - 60);\n    } else if (newMinute < 0) {\n      PrimeDate.plusHours(date, -1);\n      date.setMinutes(60 + newMinute);\n    } else {\n      date.setMinutes(newMinute);\n    }\n  },\n\n  /**\n   * Adds the given number of months to the given Date. The number can be negative.\n   *\n   * @param date {Date} The date.\n   * @param number {Number} The number of months to add.\n   */\n  plusMonths: function(date, number) {\n    if (number === 0) {\n      return;\n    }\n\n    let deltaYears = parseInt(number / 12);\n    let deltaMonths = number % 12;\n    let currentMonth = date.getMonth();\n    const newMonth = currentMonth + deltaMonths;\n    if (newMonth < 0) {\n      deltaYears--;\n      deltaMonths = newMonth;\n      currentMonth = 12;\n    } else if (newMonth >= 12) {\n      deltaYears++;\n      deltaMonths = newMonth - 12;\n      currentMonth = 0;\n    }\n\n    date.setYear(date.getFullYear() + deltaYears);\n    // If the day is 31 and you set month to 1 (February) it will adjust to March 3 (Feb 28 + 3)\n    const adjustedMonth = currentMonth + deltaMonths;\n    if (date.getDate() > this.DAYS_IN_MONTH[adjustedMonth]) {\n      date.setDate(this.DAYS_IN_MONTH[adjustedMonth]);\n    }\n    date.setMonth(adjustedMonth);\n  },\n\n  /**\n   * Adds the given number of seconds to the given Date. The number can be negative.\n   *\n   * @param date {Date} The date.\n   * @param number {Number} The number of seconds to add.\n   */\n  plusSeconds: function(date, number) {\n    if (number === 0) {\n      return;\n    }\n\n    const deltaMinutes = parseInt(number / 60);\n    PrimeDate.plusMinutes(date, deltaMinutes);\n\n    const deltaSeconds = number % 60;\n    const newSecond = date.getSeconds() + deltaSeconds;\n    if (newSecond > 60) {\n      PrimeDate.plusMinutes(date, 1);\n      date.setSeconds(newSecond - 60);\n    } else if (newSecond < 0) {\n      PrimeDate.plusMinutes(date, -1);\n      date.setSeconds(60 + newSecond);\n    } else {\n      date.setSeconds(newSecond);\n    }\n  },\n\n  /**\n   * Adds the given number of years to the given Date. The number can be negative.\n   *\n   * @param date {Date} The date.\n   * @param number {Number} The number of years to add.\n   */\n  plusYears: function(date, number) {\n    if (number === 0) {\n      return;\n    }\n\n    date.setFullYear(date.getFullYear() + number);\n  },\n\n  /**\n   * Return a string in simplified extended ISO format (ISO 8601) truncated to only return YYYY-MM-DD.\n   *\n   * For example: new Date(2015, 6, 4) --> 2015-07-04\n   *\n   * @param date {Date} The date.\n   * @returns {String} A date string in the format YYYY-MM-DD.\n   */\n  toDateOnlyISOString: function(date) {\n    if (date instanceof Date) {\n      return date.getFullYear()\n          + '-' + Utils.leftPadNumber(date.getMonth() + 1, 2)\n          + '-' + Utils.leftPadNumber(date.getDate(), 2);\n    }\n    throw TypeError('date parameter must be a Date object.');\n  }\n};\n\nexport {PrimeDate}\n","/*\n * Copyright (c) 2015-2018, Inversoft Inc., All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific\n * language governing permissions and limitations under the License.\n */\n'use strict';\n\nimport {Events} from \"../Events.js\";\nimport {PrimeDate} from \"../Date.js\";\nimport {PrimeDocument} from \"../PrimeDocument.js\";\nimport {PrimeElement} from \"../Document/PrimeElement.js\";\nimport {Utils} from \"../Utils.js\";\n\nconst SHORT_DAY_NAMES = ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'];\nconst MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\nconst DATE_SEPARATOR = '/';\nconst TIME_SEPARATOR = ':';\nconst AM_PM = ['AM', 'PM'];\n\nclass DateTimePicker {\n  /**\n   * Constructs a new DateTimePicker object for the given input element.\n   *\n   * @param {PrimeElement|Element|EventTarget} element The Prime Element for the DateTimePicker widget.\n   * @constructor\n   */\n  constructor(element) {\n    Utils.bindAll(this);\n\n    this.element = PrimeElement.wrap(element);\n    if (!this.element.is('input')) {\n      throw new TypeError('You can only use DateTimePicker with an input element');\n    }\n\n    this.callback = null;\n    this.customFormatHandler = null;\n    this._setInitialOptions();\n  };\n\n  static get SHORT_DAY_NAMES() {\n    return SHORT_DAY_NAMES;\n  }\n\n  static get MONTHS() {\n    return MONTHS;\n  }\n\n  static get DATE_SEPARATOR() {\n    return DATE_SEPARATOR;\n  }\n\n  static get TIME_SEPARATOR() {\n    return TIME_SEPARATOR;\n  }\n\n  static get AM_PM() {\n    return AM_PM;\n  }\n\n  /**\n   * Closes the Date Picker widget.\n   *\n   * @returns {DateTimePicker} This DateTimePicker.\n   */\n  close() {\n    this.datepicker.removeClass('open');\n\n    // Pause a bit to cancel focus event and allow transition to play\n    setTimeout(function() {\n      this.datepicker.hide();\n    }.bind(this), this.options.closeTimeout);\n    return this;\n  }\n\n  /**\n   * Closes the months select box.\n   *\n   * @returns {DateTimePicker} This DateTimePicker.\n   */\n  closeMonthsSelect() {\n    this.months.removeClass('open');\n    setTimeout(function() {\n      this.months.hide();\n    }.bind(this), this.options.closeTimeout);\n    return this;\n  }\n\n  /**\n   * Closes the years select box.\n   *\n   * @returns {DateTimePicker} This DateTimePicker.\n   */\n  closeYearsSelect() {\n    this.years.removeClass('open');\n    setTimeout(function() {\n      this.years.hide();\n    }.bind(this), this.options.closeTimeout);\n    return this;\n  }\n\n  /**\n   * Destroys the DateTimePicker Widget\n   */\n  destroy() {\n    this.datepicker.removeFromDOM();\n    this.element.removeEventListener('click', this._handleInputClick)\n        .removeEventListener('focus', this._handleInputClick)\n        .removeEventListener('keydown', this._handleInputKey);\n    PrimeDocument.removeEventListener('click', this._handleGlobalClick);\n    PrimeDocument.removeEventListener('keydown', this._handleGlobalKey);\n  }\n\n  /**\n   * Draws the calendar using the month and year from the given Date object.\n   *\n   * @param date {Date} The date to draw the calendar for.\n   * @return {DateTimePicker} This DateTimePicker.\n   */\n  drawCalendar(date) {\n    const month = date.getMonth();\n    const year = date.getFullYear();\n    const firstDay = new Date(year, month, 1);\n    const firstDayOfMonth = firstDay.getDay();\n    const daysInMonth = PrimeDate.numberOfDaysInMonth(year, month);\n    const used = firstDayOfMonth + daysInMonth;\n    const weeksInMonth = Math.ceil(used / 7);\n\n    let rows = '';\n    let startDay = 1;\n    for (let i = 0; i < weeksInMonth; i++) {\n      const startDayOfWeek = i === 0 ? firstDayOfMonth : 0;\n      rows += this._buildCalendarWeek(date, startDayOfWeek, startDay, daysInMonth);\n      startDay += 7 - startDayOfWeek; // increment by 7 adjusted by a week day of week offset\n    }\n\n    this.calendarBody.setHTML(rows);\n\n    // update data- attributes\n    this.monthDisplay.setDataAttribute('month', month);\n    this.yearDisplay.setDataAttribute('year', year);\n\n    // update text\n    this.monthDisplay.setTextContent(DateTimePicker.MONTHS[month]);\n    this.yearDisplay.setTextContent(year);\n\n    return this;\n  }\n\n  /**\n   * Rebuilds the entire widget using the date value. Even if the user has moved to a different month display, this will\n   * rebuild the table completely.\n   *\n   * @returns {DateTimePicker} This DateTimePicker.\n   */\n  initialize() {\n    const value = this.element.getValue();\n    if (value === '' || value === null) {\n      this.date = new Date();\n    } else {\n      this.date = new Date(value);\n    }\n\n    const year = this.date.getUTCFullYear();\n    const timeSeparator = `<span>${DateTimePicker.TIME_SEPARATOR}</span>`;\n    const dateSeparator = `<span>${DateTimePicker.DATE_SEPARATOR}</span>`;\n    let html =\n        `<div class=\"${this.options.className }\">\n  <header>\n    <span class=\"prev\">&#9664;</span>\n    <span class=\"month\"></span>\n    <span class=\"year\"></span>\n    <span class=\"next\">&#9654;</span>\n  </header>\n  <table>\n    <thead>\n      <tr>\n        <th>${DateTimePicker.SHORT_DAY_NAMES[0]}</th>\n        <th>${DateTimePicker.SHORT_DAY_NAMES[1]}</th>\n        <th>${DateTimePicker.SHORT_DAY_NAMES[2]}</th>\n        <th>${DateTimePicker.SHORT_DAY_NAMES[3]}</th>\n        <th>${DateTimePicker.SHORT_DAY_NAMES[4]}</th>\n        <th>${DateTimePicker.SHORT_DAY_NAMES[5]}</th>\n        <th>${DateTimePicker.SHORT_DAY_NAMES[6]}</th>\n      </tr>\n    </thead>\n    <tbody>\n    </tbody>\n  </table>\n  <div class=\"inputs\">\n    <div class=\"date\">\n      <input size=\"2\" maxlength=\"2\" type=\"text\" name=\"month\" autocomplete=\"off\"/>${dateSeparator}\n      <input size=\"2\" maxlength=\"2\" type=\"text\" name=\"day\" autocomplete=\"off\"/>${dateSeparator}\n      <input size=\"4\" maxlength=\"4\" type=\"text\" name=\"year\" autocomplete=\"off\"/>\n    </div>\n    <div class=\"time\">\n      <input size=\"2\" maxlength=\"2\" type=\"text\" name=\"hour\" autocomplete=\"off\"/>${timeSeparator}\n      <input size=\"2\" maxlength=\"2\" type=\"text\" name=\"minute\" autocomplete=\"off\"/>${timeSeparator}\n      <input size=\"2\" maxlength=\"2\" type=\"text\" name=\"second\" autocomplete=\"off\"/>\n      <input size=\"2\" maxlength=\"2\" type=\"text\" name=\"am_pm\" autocomplete=\"off\"/>\n    </div>\n  </div>\n</div>`;\n    PrimeDocument.appendHTML(html);\n    this.datepicker = PrimeDocument.queryLast('.' + this.options.className).hide();\n    this.element.addEventListener('click', this._handleInputClick);\n    this.element.addEventListener('focus', this._handleInputClick);\n    this.element.addEventListener('keydown', this._handleInputKey);\n\n    this.calendarBody = this.datepicker.queryFirst('table tbody').addEventListener('click', this._handleDayClick);\n    this.monthDisplay = this.datepicker.queryFirst('header .month').addEventListener('click', this._handleMonthExpand);\n    this.yearDisplay = this.datepicker.queryFirst('header .year').addEventListener('click', this._handleYearExpand);\n\n    this.time = this.datepicker.queryFirst('.time');\n    this.inputs = this.datepicker.queryFirst('div.inputs');\n    this.hourInput = this.inputs.queryFirst('input[name=hour]').addEventListener('change', this._handleDateTimeChange).addEventListener('keydown', this._handleHourKey);\n    this.minuteInput = this.inputs.queryFirst('input[name=minute]').addEventListener('change', this._handleDateTimeChange).addEventListener('keydown', this._handleMinuteKey);\n    this.secondInput = this.inputs.queryFirst('input[name=second]').addEventListener('change', this._handleDateTimeChange).addEventListener('keydown', this._handleSecondKey);\n    this.ampmInput = this.inputs.queryFirst('input[name=am_pm]').addEventListener('keydown', this._handleAmPmKey);\n    this.monthInput = this.inputs.queryFirst('input[name=month]').setValue(this.date.getMonth() + 1).addEventListener('change', this._handleDateTimeChange).addEventListener('keydown', this._handleMonthKey);\n    this.dayInput = this.inputs.queryFirst('input[name=day]').setValue(this.date.getDate()).addEventListener('change', this._handleDateTimeChange).addEventListener('keydown', this._handleDayKey);\n    this.yearInput = this.inputs.queryFirst('input[name=year]').setValue(this.date.getFullYear()).addEventListener('change', this._handleDateTimeChange).addEventListener('keydown', this._handleYearKey);\n\n    this.datepicker.queryFirst('header .next').addEventListener('click', this._handleNextMonth);\n    this.datepicker.queryFirst('header .prev').addEventListener('click', this._handlePreviousMonth);\n\n    PrimeDocument.addEventListener('click', this._handleGlobalClick);\n    PrimeDocument.addEventListener('keydown', this._handleGlobalKey);\n\n    // Setup months dropdown\n    html = '<div class=\"months\">';\n    for (let i = 0; i < DateTimePicker.MONTHS.length; i++) {\n      html += `<div data-month=\"${i}\">${DateTimePicker.MONTHS[i]}</div>`;\n    }\n    html += '</div>';\n    this.datepicker.appendHTML(html);\n    this.months = this.datepicker.queryFirst('.months');\n    this.months.hide();\n    this.months.getChildren().each(function(month) {\n      month.addEventListener('click', function() {\n        this.setMonth(parseInt(month.getDataAttribute('month')));\n        this.closeMonthsSelect();\n      }.bind(this));\n    }.bind(this));\n\n    // Setup year dropdown\n    html = '<div class=\"years\">';\n    const startYear = this.date.getFullYear() - 10;\n    const endYear = this.date.getFullYear() + 10;\n    for (let i = startYear; i < endYear; i++) {\n      html += `<div data-year=\"${i}\">${i}</div>`;\n    }\n    html += '</div>';\n    this.datepicker.appendHTML(html);\n    this.years = this.datepicker.queryFirst('.years');\n    this.years.hide();\n    this.years.getChildren().each(function(year) {\n      year.addEventListener('click', function() {\n        this.setYear(parseInt(year.getDataAttribute('year')));\n        this.closeYearsSelect();\n      }.bind(this));\n    }.bind(this));\n\n    this._rebuild();\n\n    if (this.customFormatHandler !== null) {\n      this.element.setValue(this.customFormatHandler.call(null, this.date));\n    }\n\n    return this;\n  }\n\n  /**\n   * @returns {Date} Return the current value of the time picker.\n   */\n  getDate() {\n    return new Date(this.date.getTime());\n  }\n\n  /**\n   * Moves the DateTimePicker to the next month and redraws the calendar.\n   *\n   * @returns {DateTimePicker} This DateTimePicker.\n   */\n  nextMonth() {\n    const newDate = new Date(this.date);\n    newDate.setDate(1); // Set the day to 1 to keep us from wrapping months on the 30 and 31st.\n    newDate.setMonth(parseInt(this.monthDisplay.getDataAttribute('month')));\n    newDate.setFullYear(parseInt(this.yearDisplay.getDataAttribute('year')));\n    PrimeDate.plusMonths(newDate, 1);\n    this.drawCalendar(newDate);\n    return this;\n  }\n\n  /**\n   * Opens the Date Picker widget.\n   *\n   * @returns {DateTimePicker} This DateTimePicker.\n   */\n  open() {\n    this.datepicker.setLeft(this.element.getLeft());\n    this.datepicker.setTop(this.element.getAbsoluteTop() + this.element.getHeight() + 8);\n    this.datepicker.show();\n    this.datepicker.addClass('open');\n\n    const zIndex = this.element.getRelativeZIndex();\n    this.datepicker.setStyle('zIndex', zIndex + 10);\n    return this;\n  }\n\n  /**\n   * Opens the month select box.\n   */\n  openMonthSelect() {\n    this.closeYearsSelect();\n\n    this.months.setLeft(this.monthDisplay.getOffsetLeft() - 5);\n    this.months.setTop(this.monthDisplay.getOffsetTop() - 5);\n    this.months.setStyle('zIndex', this.monthDisplay.getRelativeZIndex() + 10);\n    this.months.show();\n    this.months.addClass('open');\n\n    const currentMonth = this.months.queryFirst('[data-month=\"' + this.date.getMonth() + '\"]');\n    this.months.getChildren().each(function(month) {\n      month.removeClass('selected');\n    });\n    currentMonth.addClass('selected');\n  }\n\n  /**\n   * Opens the year select box.\n   */\n  openYearSelect() {\n    this.closeMonthsSelect();\n\n    this.years.setLeft(this.yearDisplay.getOffsetLeft() - 5);\n    this.years.setTop(this.yearDisplay.getOffsetTop() - 5);\n    this.years.setStyle('zIndex', this.yearDisplay.getRelativeZIndex() + 10);\n    this.years.show();\n    this.years.addClass('open');\n\n    const currentYear = this.years.queryFirst('[data-year=\"' + this.date.getFullYear() + '\"]');\n    this.years.getChildren().each(function(year) {\n      year.removeClass('selected');\n    });\n    currentYear.addClass('selected');\n  }\n\n  /**\n   * Moves the DateTimePicker to the previous month and redraws the calendar.\n   *\n   * @returns {DateTimePicker} This DateTimePicker.\n   */\n  previousMonth() {\n    const newDate = new Date(this.date);\n    newDate.setDate(1); // Set to 1 until month has been set\n    newDate.setMonth(parseInt(this.monthDisplay.getDataAttribute('month')));\n    newDate.setFullYear(parseInt(this.yearDisplay.getDataAttribute('year')));\n    PrimeDate.plusMonths(newDate, -1);\n    this.drawCalendar(newDate);\n    return this;\n  }\n\n  /**\n   * Sets the date of the DateTimePicker and redraws the calendar to the month for the date.\n   *\n   * @param {Date} newDate The new date.\n   * @returns {DateTimePicker} This DateTimePicker.\n   */\n  setDate(newDate) {\n    this.date = newDate;\n\n    if (this.customFormatHandler !== null) {\n      this.element.setValue(this.customFormatHandler.call(null, this.date));\n    } else {\n      if (this.options.dateOnly) {\n        this.element.setValue(PrimeDate.toDateOnlyISOString(newDate));\n      } else {\n        this.element.setValue(newDate.toISOString());\n      }\n    }\n\n    this._rebuild();\n\n    if (this.callback !== null) {\n      this.callback(this);\n    }\n\n    return this;\n  }\n\n  /**\n   * @param {number} month The month. A 0 based number between 0 (January) and 11 (December).\n   * @returns {DateTimePicker}\n   */\n  setMonth(month) {\n    let currentYear = parseInt(this.yearDisplay.getDataAttribute('year'));\n    if (month < 0) {\n      month = 11;\n      currentYear--;\n    } else if (month > 11) {\n      currentYear++;\n      month = 0;\n    }\n\n    this.date.setMonth(month);\n    this.date.setYear(currentYear);\n    this.setDate(this.date);\n\n    return this;\n  }\n\n  /**\n   *\n   * @param {number} year The year.\n   * @returns {DateTimePicker}\n   */\n  setYear(year) {\n    this.yearDisplay.setDataAttribute('year', year);\n    this.yearDisplay.setTextContent(year);\n    this.date.setYear(year);\n    this.setDate(this.date);\n    return this;\n  }\n\n  /**\n   * Sets the callback handler that is called with the DateTimePicker's value is changed.\n   *\n   * @param callback {Function} The callback function.\n   * @return {DateTimePicker} This.\n   */\n  withCallback(callback) {\n    this.callback = callback;\n    return this;\n  }\n\n  /**\n   * Sets the class name for the main div of the date time picker.\n   *\n   * @param className {string} The class name.\n   * @returns {DateTimePicker} This.\n   */\n  withClassName(className) {\n    this.options.className = className;\n    return this;\n  }\n\n  /**\n   * Sets the timeout used in the close method to allow for transitions.\n   *\n   * @param timeout {int} The timeout.\n   * @returns {DateTimePicker}\n   */\n  withCloseTimeout(timeout) {\n    this.options.closeTimeout = timeout;\n    return this;\n  }\n\n  /**\n   * Sets a custom format handler responsible for formatting the date string that will be set into the input field.\n   * When not defined the default behavior will be used.\n   *\n   * @param formatHandler {Function} The handler function.\n   * @return {DateTimePicker} This.\n   */\n  withCustomFormatHandler(formatHandler) {\n    this.customFormatHandler = formatHandler;\n    return this;\n  }\n\n  /**\n   * Render the DateTimePicker w/out the time picker. Only the calendar will be displayed and the input field will be updated with date only.\n   *\n   *\n   * @returns {DateTimePicker} This DateTimePicker.\n   */\n  withDateOnly() {\n    this.options.dateOnly = true;\n    return this;\n  }\n\n  /**\n   * Set more than one option at a time by providing a map of key value pairs. This is considered an advanced\n   * method to set options on the widget. The caller needs to know what properties are valid in the options object.\n   *\n   * @param {Object} options Key value pair of configuration options.\n   * @returns {DateTimePicker} This DateTimePicker.\n   */\n  withOptions(options) {\n    if (!Utils.isDefined(options)) {\n      return this;\n    }\n\n    for (let option in options) {\n      if (options.hasOwnProperty(option)) {\n        this.options[option] = options[option];\n      }\n    }\n    return this;\n  }\n\n  /* ===================================================================================================================\n   * Private methods\n   * ===================================================================================================================*/\n\n  /**\n   * Build the HTML for a single calendar week.\n   *\n   * @param date {Date} The date to build the calendar week based on.\n   * @param startDayOfWeek {Number} The day of the week of this week begins. A 0 based number between 0 and 6.\n   * @param startDayOfMonth {Number} The day of the month this week begins. A number between 1 and 31.\n   * @param daysInMonth {Number} The number of days in this calendar month.\n   * @returns {string} The HTML for this week.\n   * @private\n   */\n  _buildCalendarWeek(date, startDayOfWeek, startDayOfMonth, daysInMonth) {\n    const daysInPreviousMonth = new Date(date.getFullYear(), date.getMonth(), 0).getDate();\n    let startDayOfPreviousMonth = daysInPreviousMonth - startDayOfWeek + 1;\n    let startDayOfNextMonth = 1;\n\n    let row = '<tr>';\n    let emptyColumns = 0;\n    const year = date.getFullYear();\n    const month = date.getMonth();\n\n    for (let i = 0; i < 7; i++) {\n      const dayOfWeek = startDayOfMonth + i;\n      // Days of the previous month\n      if (dayOfWeek <= startDayOfWeek) {\n        row += '<td><a class=\"inactive\" href=\"#\" data-year=\"' + year + '\" data-month=\"' + (month - 1) + '\" data-day=\"' + startDayOfPreviousMonth + '\">' + startDayOfPreviousMonth + '</a></td>';\n        startDayOfPreviousMonth++;\n        emptyColumns++;\n      } else if (dayOfWeek > daysInMonth) {\n        // Days of the next month\n        row += '<td><a class=\"inactive\" href=\"#\" data-year=\"' + year + '\" data-month=\"' + month + '\" data-day=\"' + dayOfWeek + '\">' + startDayOfNextMonth + '</a></td>';\n        startDayOfNextMonth++;\n      } else {\n        // Days in the current month\n        const day = dayOfWeek - emptyColumns;\n        const selected = this.date.getDate() === day && this.date.getMonth() === month;\n        row += '<td><a ' + (selected ? 'class=\"selected\"' : '') + 'href=\"#\" data-year=\"' + year + '\" data-month=\"' + month + '\" data-day=\"' + day + '\">' + day + '</a></td>';\n      }\n    }\n\n    row += '</tr>';\n    return row;\n  }\n\n  // noinspection JSMethodCanBeStatic\n  /**\n   * Clamp the value between the minimum and maximum values.\n   *\n   * @param {Number} min the minimum number value.\n   * @param {Number} max The maximum number value.\n   * @param {Number} value The value to clamp.\n   * @returns {Number} The resulting value, either the min, max or actual value if not out of bounds.\n   * @private\n   */\n  _clamp(min, max, value) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Handles when the AM/PM element is selected and the user hits a key. If the user hits A, this changes to AM. If the\n   * user hits P, this changes to PM. If the use hits the up or down arrows, this toggles between AM and PM.\n   *\n   * @param {KeyboardEvent} event The keyboard event.\n   * @private\n   */\n  _handleAmPmKey(event) {\n    if (event.keyCode === Events.Keys.TAB) {\n      Utils.stopEvent(event);\n      if (event.shiftKey) {\n        this.secondInput.domElement.setSelectionRange(0, this.secondInput.getValue().length);\n        this.secondInput.focus();\n      } else {\n        this.monthInput.domElement.setSelectionRange(0, this.monthInput.getValue().length);\n        this.monthInput.focus();\n      }\n      return;\n    }\n\n    // Decode the key event\n    const current = this.ampmInput.getValue();\n    if (event.keyCode === 65) {\n      // User hit A\n      if (current === DateTimePicker.AM_PM[1]) {\n        PrimeDate.plusHours(this.date, -12);\n      }\n    } else if (event.keyCode === 80) {\n      // User hit P\n      if (current === DateTimePicker.AM_PM[0]) {\n        PrimeDate.plusHours(this.date, 12);\n      }\n    } else if (event.keyCode === Events.Keys.UP_ARROW || event.keyCode === Events.Keys.DOWN_ARROW) {\n      // User hit up or down arrow\n      if (current === DateTimePicker.AM_PM[0]) {\n        PrimeDate.plusHours(this.date, 12);\n      } else if (current === DateTimePicker.AM_PM[1]) {\n        PrimeDate.plusHours(this.date, -12);\n      }\n    } else if (event.keyCode === Events.Keys.ENTER || event.keyCode === Events.Keys.ESCAPE) {\n      return;\n    }\n\n    this.setDate(this.date);\n    this.ampmInput.domElement.setSelectionRange(0, this.ampmInput.getValue().length);\n    Utils.stopEvent(event);\n  }\n\n  /**\n   * Handle date/time change events. This pulls the values from the 3 date fields and makes a new Date. Then it calls\n   * {@link #setDate(Date)}.\n   *\n   * @param {KeyboardEvent} event The keyboard event.\n   * @private\n   */\n  _handleDateTimeChange(event) {\n    Utils.stopEvent(event);\n    const newDate = new Date();\n    const hours = this._clamp(1, 12, parseInt(this.hourInput.getValue()));\n    if (this.ampmInput.getValue() === DateTimePicker.AM_PM[0]) {\n      if (hours === 12) {\n        newDate.setHours(0);\n      } else {\n        newDate.setHours(hours);\n      }\n    } else {\n      if (hours === 12) {\n        newDate.setHours(12);\n      } else {\n        newDate.setHours(hours + 12);\n      }\n    }\n\n    const seconds = this._clamp(0, 59, parseInt(this.secondInput.getValue()));\n    const minutes = this._clamp(0, 59, parseInt(this.minuteInput.getValue()));\n\n    newDate.setSeconds(seconds);\n    newDate.setMinutes(minutes);\n    newDate.setDate(1); // Set to 1 until month has been set\n    newDate.setMonth(parseInt(this.monthInput.getValue()) - 1);\n    newDate.setDate(parseInt(this.dayInput.getValue()));\n    newDate.setYear(parseInt(this.yearInput.getValue()));\n\n    this.setDate(newDate);\n  }\n\n  /**\n   * Handle the click on a day.\n   *\n   * @parameter {MouseEvent} event The click event.\n   * @private\n   */\n  _handleDayClick(event) {\n    Utils.stopEvent(event);\n    let dayElement = new PrimeElement(event.target);\n    if (!dayElement.is('a')) {\n      dayElement = dayElement.queryFirst('a');\n    }\n\n    const newDate = new Date(this.date);\n    newDate.setDate(1); // Set to 1 until month has been set\n    newDate.setFullYear(parseInt(dayElement.getDataAttribute('year')));\n    newDate.setMonth(parseInt(dayElement.getDataAttribute('month')));\n    newDate.setDate(parseInt(dayElement.getDataAttribute('day')));\n    this.setDate(newDate);\n  }\n\n  /**\n   * Handles when a key is click in the day input field so that tab and shift tab work properly.\n   * <p>\n   * Also handles up and down arrow to increment and decrement the day.\n   *\n   * @param {KeyboardEvent} event The key event.\n   * @private\n   */\n  _handleDayKey(event) {\n    if (event.keyCode === Events.Keys.UP_ARROW) {\n      PrimeDate.plusDays(this.date, 1);\n      this.setDate(this.date);\n      this.dayInput.domElement.setSelectionRange(0, this.dayInput.getValue().length);\n      Utils.stopEvent(event);\n    } else if (event.keyCode === Events.Keys.DOWN_ARROW) {\n      Utils.stopEvent(event);\n      PrimeDate.plusDays(this.date, -1);\n      this.setDate(this.date);\n      this.dayInput.domElement.setSelectionRange(0, this.dayInput.getValue().length);\n    } else if (event.keyCode === Events.Keys.ENTER) {\n      this.date.setDate(parseInt(this.dayInput.getValue()));\n    }\n  }\n\n  /**\n   * Handles a global click event. This determines if the click was outside of the DateTimePicker and closes it.\n   *\n   * @param {MouseEvent} event The click event.\n   * @private\n   */\n  _handleGlobalClick(event) {\n    // Skip this function completely if they clicked the input field\n    if (event.target === this.element.domElement) {\n      return;\n    }\n\n    const top = this.datepicker.getTop();\n    const bottom = this.datepicker.getBottom();\n    const left = this.datepicker.getLeft();\n    const right = this.datepicker.getRight();\n    if (this.datepicker.isVisible() && (event.x < left || event.x > right || event.y < top || event.y > bottom)) {\n      this.close();\n      this.closeYearsSelect();\n      this.closeMonthsSelect();\n    } else {\n      if (this.years.isVisible()) {\n        this.closeYearsSelect();\n      }\n      if (this.months.isVisible()) {\n        this.closeMonthsSelect();\n      }\n    }\n  }\n\n  /**\n   * Handles a global key event. This determines if the DateTimePicker is open and if enter or escape was hit.\n   *\n   * @param {KeyboardEvent} event The key event.\n   * @private\n   */\n  _handleGlobalKey(event) {\n    // Skip this function completely if the DateTimePicker isn't open\n    if (!this.datepicker.isVisible()) {\n      return;\n    }\n\n    if (event.keyCode === Events.Keys.ENTER) {\n      Utils.stopEvent(event);\n      this.setDate(this.date);\n      this.close();\n      this.element.focus();\n    } else if (event.keyCode === Events.Keys.ESCAPE) {\n      this.close();\n      this.element.focus();\n    }\n  }\n\n  /**\n   * Handles when a key is click in the hours input field so that tab and shift tab work properly.\n   * <p>\n   * Also handles up and down arrow to increment and decrement the hour.\n   *\n   * @param {KeyboardEvent} event The key event.\n   * @private\n   */\n  _handleHourKey(event) {\n    if (event.keyCode === Events.Keys.UP_ARROW) {\n      Utils.stopEvent(event);\n      PrimeDate.plusHours(this.date, 1);\n      this.setDate(this.date);\n      this.hourInput.domElement.setSelectionRange(0, this.hourInput.getValue().length);\n    } else if (event.keyCode === Events.Keys.DOWN_ARROW) {\n      Utils.stopEvent(event);\n      PrimeDate.plusHours(this.date, -1);\n      this.setDate(this.date);\n      this.hourInput.domElement.setSelectionRange(0, this.hourInput.getValue().length);\n    } else if (event.keyCode === Events.Keys.ENTER) {\n      this.date.setHours(parseInt(this.hourInput.getValue()));\n    }\n  }\n\n  /**\n   * Handle the click event for the input date field. If the DateTimePicker is hidden this will call the {@link #show()}\n   * function.\n   *\n   * @returns {boolean} Always true.\n   * @private\n   */\n  _handleInputClick() {\n    if (!this.datepicker.isVisible()) {\n      this.open();\n      this.monthInput.domElement.setSelectionRange(0, this.monthInput.getValue().length);\n      this.monthInput.focus();\n    }\n  }\n\n  /**\n   * Handle the key event for the input date field. If the user hits tab or shift-tab, this moves the focus to the\n   * nested inputs.\n   *\n   * @param {KeyboardEvent} event The keyboard event.\n   * @private\n   */\n  _handleInputKey(event) {\n    if (this.datepicker.isVisible() && event.keyCode === Events.Keys.TAB) {\n      Utils.stopEvent(event);\n      if (event.shiftKey) {\n        this.ampmInput.domElement.setSelectionRange(0, this.ampmInput.getValue().length);\n        this.ampmInput.focus();\n      } else {\n        this.monthInput.domElement.setSelectionRange(0, this.monthInput.getValue().length);\n        this.monthInput.focus();\n      }\n    }\n  }\n\n  /**\n   * Handle the key down event and capture the up and down arrow key to increment and decrement the minute.\n\n   * @param {KeyboardEvent} event The key event.\n   * @private\n   */\n  _handleMinuteKey(event) {\n    if (event.keyCode === Events.Keys.UP_ARROW) {\n      Utils.stopEvent(event);\n      PrimeDate.plusMinutes(this.date, 1);\n      this.setDate(this.date);\n      this.minuteInput.domElement.setSelectionRange(0, this.minuteInput.getValue().length);\n    } else if (event.keyCode === Events.Keys.DOWN_ARROW) {\n      Utils.stopEvent(event);\n      PrimeDate.plusMinutes(this.date, -1);\n      this.setDate(this.date);\n      this.minuteInput.domElement.setSelectionRange(0, this.minuteInput.getValue().length);\n    } else if (event.keyCode === Events.Keys.ENTER) {\n      this.date.setMinutes(parseInt(this.minuteInput.getValue()));\n    }\n  }\n\n  /**\n   * Handles the click on the month to open the month select.\n   *\n   * @private\n   */\n  _handleMonthExpand(event) {\n    Utils.stopEvent(event);\n    this.openMonthSelect();\n  }\n\n  /**\n   * Handles when a key is click in the month input field so that tab and shift tab work properly.\n   * <p>\n   * Also handles up and down arrow to increment and decrement the month.\n   *\n   * @param {KeyboardEvent} event The key event.\n   * @private\n   */\n  _handleMonthKey(event) {\n    if (event.keyCode === Events.Keys.TAB && event.shiftKey) {\n      Utils.stopEvent(event);\n      if (this.options.dateOnly) {\n        this.yearInput.domElement.setSelectionRange(0, this.yearInput.getValue().length);\n        this.yearInput.focus();\n      } else {\n        this.ampmInput.domElement.setSelectionRange(0, this.ampmInput.getValue().length);\n        this.ampmInput.focus();\n      }\n      return;\n    }\n\n    if (event.keyCode === Events.Keys.UP_ARROW) {\n      Utils.stopEvent(event);\n      PrimeDate.plusMonths(this.date, 1);\n      this.setDate(this.date);\n      this.monthInput.domElement.setSelectionRange(0, this.monthInput.getValue().length);\n    } else if (event.keyCode === Events.Keys.DOWN_ARROW) {\n      Utils.stopEvent(event);\n      PrimeDate.plusMonths(this.date, -1);\n      this.setDate(this.date);\n      this.monthInput.domElement.setSelectionRange(0, this.monthInput.getValue().length);\n    } else if (event.keyCode === Events.Keys.ENTER) {\n      this.date.setMonth(parseInt(this.monthInput.getValue()) - 1);\n    }\n  }\n\n  /**\n   * Handle the next month button click.\n   *\n   * @param {MouseEvent} event The mouse event.\n   * @private\n   */\n  _handleNextMonth(event) {\n    Utils.stopEvent(event);\n    this.nextMonth();\n  }\n\n  /**\n   * Handle the previous month button click.\n   *\n   * @param {MouseEvent} event The mouse event.\n   * @private\n   */\n  _handlePreviousMonth(event) {\n    Utils.stopEvent(event);\n    this.previousMonth();\n  }\n\n  /**\n   * Handle the key down event and capture the up and down arrow key to increment and decrement the second.\n\n   * @param {KeyboardEvent} event The key event.\n   * @private\n   */\n  _handleSecondKey(event) {\n    if (event.keyCode === Events.Keys.UP_ARROW) {\n      Utils.stopEvent(event);\n      PrimeDate.plusSeconds(this.date, 1);\n      this.setDate(this.date);\n      this.secondInput.domElement.setSelectionRange(0, this.secondInput.getValue().length);\n    } else if (event.keyCode === Events.Keys.DOWN_ARROW) {\n      Utils.stopEvent(event);\n      PrimeDate.plusSeconds(this.date, -1);\n      this.setDate(this.date);\n      this.secondInput.domElement.setSelectionRange(0, this.secondInput.getValue().length);\n    } else if (event.keyCode === Events.Keys.ENTER) {\n      this.date.setSeconds(parseInt(this.secondInput.getValue()));\n    }\n  }\n\n  /**\n   * Handles the click on the year to open the year select.\n   *\n   * @private\n   */\n  _handleYearExpand(event) {\n    Utils.stopEvent(event);\n    this.openYearSelect();\n  }\n\n  /**\n   * Handles when a key is click in the year input field so that tab and shift tab work properly.\n   * <p>\n   * Also handles up and down arrow to increment and decrement the year.\n   *\n   * @param {KeyboardEvent} event The key event.\n   * @private\n   */\n  _handleYearKey(event) {\n    if (event.keyCode === Events.Keys.UP_ARROW) {\n      Utils.stopEvent(event);\n      PrimeDate.plusYears(this.date, 1);\n      this.setDate(this.date);\n      this.yearInput.domElement.setSelectionRange(0, this.yearInput.getValue().length);\n    } else if (event.keyCode === Events.Keys.DOWN_ARROW) {\n      Utils.stopEvent(event);\n      PrimeDate.plusYears(this.date, -1);\n      this.setDate(this.date);\n      this.yearInput.domElement.setSelectionRange(0, this.yearInput.getValue().length);\n    } else if (event.keyCode === Events.Keys.TAB && this.options.dateOnly) {\n      Utils.stopEvent(event);\n      if (event.shiftKey) {\n        this.dayInput.domElement.setSelectionRange(0, this.dayInput.getValue().length);\n        this.dayInput.focus();\n      } else {\n        this.monthInput.domElement.setSelectionRange(0, this.monthInput.getValue().length);\n        this.monthInput.focus();\n      }\n    } else if (event.keyCode === Events.Keys.ENTER) {\n      this.date.setFullYear(parseInt(this.yearInput.getValue()));\n    }\n  }\n\n  /**\n   * Rebuilds the HTML of the DateTimePicker.\n   * @private\n   */\n  _rebuild() {\n    this.drawCalendar(this.date);\n    this._refreshInputs();\n\n    if (this.options.dateOnly) {\n      this.time.hide();\n    }\n  }\n\n  /**\n   * Refresh the time inputs.\n   *\n   * @private\n   */\n  _refreshInputs() {\n    // Set Time -- assuming 12-hour time for the input fields and ISO 24-hour time for the field\n    const hours = PrimeDate.getHourOfDay(this.date);\n    this.hourInput.setValue(hours);\n\n    const minutes = this.date.getMinutes();\n    this.minuteInput.setValue((\"00\" + minutes).slice(-2));\n\n    const seconds = this.date.getSeconds();\n    this.secondInput.setValue((\"00\" + seconds).slice(-2));\n\n    if (this.date.getHours() >= 12) {\n      this.ampmInput.setValue(DateTimePicker.AM_PM[1]);\n    } else {\n      this.ampmInput.setValue(DateTimePicker.AM_PM[0]);\n    }\n\n    this.monthInput.setValue(this.date.getMonth() + 1);\n    this.dayInput.setValue(this.date.getDate());\n    this.yearInput.setValue(this.date.getFullYear());\n  }\n\n  /**\n   * Set the initial options for this widget.\n   * @private\n   */\n  _setInitialOptions() {\n    // Defaults\n    this.options = {\n      className: 'prime-date-picker',\n      closeTimeout: 200,\n      dateOnly: false\n    };\n\n    const userOptions = Utils.dataSetToOptions(this.element);\n    for (let option in userOptions) {\n      if (userOptions.hasOwnProperty(option)) {\n        this.options[option] = userOptions[option];\n      }\n    }\n  }\n}\n\nexport {DateTimePicker};\n","/*\n * Copyright (c) 2017, Inversoft Inc., All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific\n * language governing permissions and limitations under the License.\n */\n\n'use strict';\n\nimport {PrimeElement} from \"../Document/PrimeElement.js\";\nimport {Utils} from \"../Utils.js\";\n\nclass Dismissable {\n  /**\n   * Constructs a new Dismissable object for the given element.\n   *\n   * @param {PrimeElement|Element|EventTarget} element The Element for the Dismissable widget.\n   * @param {PrimeElement|Element|EventTarget} dismissButton The Element for the Dismissable button.\n   * @constructor\n   */\n  constructor(element, dismissButton) {\n    Utils.bindAll(this);\n\n    this.element = PrimeElement.wrap(element);\n    this.dismissButton = dismissButton;\n    this._setInitialOptions();\n  }\n\n  /**\n   * Closes the Dismissable by removing the open class from the element and setting a timer to remove the element from\n   * the DOM.\n   */\n  close() {\n    this.element.addClass('closed');\n    setTimeout(function() {\n      this.element.removeFromDOM();\n    }.bind(this), this.options.closeTimeout);\n  }\n\n  /**\n   * Destroys the widget.\n   */\n  destroy() {\n    this.dismissButton.removeEventListener('click', this._handleClick);\n  }\n\n  /**\n   * Initializes the Dismissable by binding the events to the dismiss button.\n   *\n   * @returns {Dismissable} This.\n   */\n  initialize() {\n    this.dismissButton.addEventListener('click', this._handleClick);\n    return this;\n  }\n\n  /**\n   * Sets the timeout used in the close method to allow for transitions.\n   *\n   * @param timeout {int} The timeout.\n   * @returns {Dismissable} This.\n   */\n  withCloseTimeout(timeout) {\n    this.options.closeTimeout = timeout;\n    return this;\n  }\n\n  /**\n   * Set more than one option at a time by providing a map of key value pairs. This is considered an advanced\n   * method to set options on the widget. The caller needs to know what properties are valid in the options object.\n   *\n   * @param {Object} options Key value pair of configuration options.\n   * @returns {Dismissable} This.\n   */\n  withOptions(options) {\n    if (!Utils.isDefined(options)) {\n      return this;\n    }\n\n    for (let option in options) {\n      if (options.hasOwnProperty(option)) {\n        this.options[option] = options[option];\n      }\n    }\n    return this;\n  }\n\n  /* ===================================================================================================================\n   * Private methods\n   * ===================================================================================================================*/\n\n  /**\n   * Handles the click event.\n   * @private\n   */\n  _handleClick(event) {\n    Utils.stopEvent(event);\n    this.close();\n  }\n\n  /**\n   * Set the initial options for this widget.\n   * @private\n   */\n  _setInitialOptions() {\n    // Defaults\n    this.options = {\n      closeTimeout: 400\n    };\n  }\n}\n\nexport {Dismissable}\n","/*\n * Copyright (c) 2017, Inversoft Inc., All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific\n * language governing permissions and limitations under the License.\n */\n'use strict';\n\nimport {PrimeElement} from \"../Document/PrimeElement.js\";\nimport {Utils} from \"../Utils.js\";\nimport {PrimeWindow} from \"../Window.js\";\nimport {Overlay} from \"./Overlay.js\";\nimport {Draggable} from \"./Draggable.js\";\nimport {PrimeDocument} from \"../PrimeDocument.js\";\n\nclass HTMLDialog {\n  /**\n   * Constructs a new dialog box from an element.\n   *\n   * @param {PrimeElement|Element|EventTarget} element The Prime Element for the HTMLDialog widget.\n   * @constructor\n   */\n  constructor(element) {\n    Utils.bindAll(this);\n\n    this.element = PrimeElement.wrap(element);\n    this._setInitialOptions();\n    this.draggable = null;\n  }\n\n  /**\n   * Closes the dialog, destroys the HTML and updates or hides the overlay.\n   * @returns {HTMLDialog} This.\n   */\n  close() {\n    this.element.removeClass('open');\n    if (this.draggable !== null) {\n      this.draggable.destroy();\n      this.draggable = null;\n    }\n\n    setTimeout(function() {\n      this.element.hide();\n\n      const highestZIndex = this._determineZIndex();\n      if (highestZIndex !== 0) {\n        Overlay.instance.setZIndex(highestZIndex);\n      } else {\n        Overlay.instance.close();\n      }\n    }.bind(this), this.options.closeTimeout);\n\n    return this;\n  }\n\n  /**\n   * Destroys the dialog by calling the close function.\n   * @returns {HTMLDialog} This.\n   */\n  destroy() {\n    this.close();\n    return this;\n  }\n\n  /**\n   * Initializes the dialog.\n   * @returns {HTMLDialog} This.\n   */\n  initialize() {\n    this.element.hide();\n    return this;\n  }\n\n  /**\n   * Opens the dialog.\n   *\n   * @returns {HTMLDialog} This.\n   */\n  open() {\n    const highestZIndex = this._determineZIndex();\n    Overlay.instance.open(highestZIndex + this.options.zIndexOffset);\n    this.element.setStyle('zIndex', (highestZIndex + this.options.zIndexOffset + 10).toString());\n    this.element.show();\n    this.element.addClass('open');\n\n    // Call the callback before positioning to ensure all changes to the dialog have been made\n    if (this.options.callback !== null) {\n      this.options.callback(this);\n    }\n\n    // Position the fixed dialog in the center of the screen\n    const windowHeight = PrimeWindow.getInnerHeight();\n    const dialogHeight = this.element.getHeight();\n    this.element.setTop(((windowHeight - dialogHeight) / 2) - 20);\n\n    this._setupButtons();\n\n    if (this.draggable === null) {\n      if (this.options.draggableElementSelector !== null && this.element.queryFirst(this.options.draggableElementSelector) !== null) {\n        this.draggable = new Draggable(this.element, this.options.draggableElementSelector).initialize();\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Updates the HTML contents of the dialog.\n   *\n   * @param html {String} The HTML.\n   * @returns {HTMLDialog} This.\n   */\n  setHTML(html) {\n    this.element.setHTML(html);\n    this._setupButtons();\n    return this;\n  }\n\n  /**\n   * Sets the callback that is called after the dialog has been fetched and rendered.\n   *\n   * @param callback {function} The callback function.\n   * @returns {HTMLDialog} This.\n   */\n  withCallback(callback) {\n    this.options.callback = callback;\n    return this;\n  }\n\n  /**\n   * Sets the class name for the dialog element.\n   *\n   * @param className {string} The class name.\n   * @returns {HTMLDialog} This.\n   */\n  withClassName(className) {\n    this.options.className = className;\n    return this;\n  }\n\n  /**\n   * Sets the close button element selector that is used to setup the close button in the HTML that was returned from\n   * the server.\n   *\n   * @param selector {string} The element selector.\n   * @returns {HTMLDialog} This.\n   */\n  withCloseButtonElementSelector(selector) {\n    this.options.closeButtonElementSelector = selector;\n    return this;\n  }\n\n  /**\n   * Sets the timeout used in the close method to allow for transitions.\n   *\n   * @param timeout {int} The timeout.\n   * @returns {HTMLDialog} This.\n   */\n  withCloseTimeout(timeout) {\n    this.options.closeTimeout = timeout;\n    return this;\n  }\n\n  /**\n   * Sets the draggable element selector that is used for the Draggable.\n   *\n   * @param selector {string} The element selector.\n   * @returns {HTMLDialog} This.\n   */\n  withDraggableButtonElementSelector(selector) {\n    this.options.draggableElementSelector = selector;\n    return this;\n  }\n\n  /**\n   * Set more than one option at a time by providing a map of key value pairs. This is considered an advanced\n   * method to set options on the widget. The caller needs to know what properties are valid in the options object.\n   *\n   * @param {Object} options Key value pair of configuration options.\n   * @returns {HTMLDialog} This.\n   */\n  withOptions(options) {\n    if (!Utils.isDefined(options)) {\n      return this;\n    }\n\n    for (let option in options) {\n      if (options.hasOwnProperty(option)) {\n        this.options[option] = options[option];\n      }\n    }\n    return this;\n  }\n\n  /* ===================================================================================================================\n   * Private methods\n   * ===================================================================================================================*/\n\n  _determineZIndex() {\n    let highestZIndex = 0;\n    PrimeDocument.query('.' + this.options.className).each(function(dialog) {\n      const zIndex = parseInt(dialog.getComputedStyle()['zIndex']);\n      if (dialog.isVisible() && zIndex > highestZIndex) {\n        highestZIndex = zIndex;\n      }\n    });\n    return highestZIndex;\n  }\n\n  _handleCloseClickEvent(event) {\n    Utils.stopEvent(event);\n    this.close();\n  }\n\n  _setupButtons() {\n    this.element.query(this.options.closeButtonElementSelector).each(function(e) {\n      e.addEventListener('click', this._handleCloseClickEvent);\n    }.bind(this));\n  }\n\n  /**\n   * Set the initial options for this widget.\n   * @private\n   */\n  _setInitialOptions() {\n    // Defaults\n    this.options = {\n      callback: null,\n      className: 'prime-dialog',\n      closeButtonElementSelector: '[data-dialog-role=\"close-button\"]',\n      closeTimeout: 200,\n      draggableElementSelector: '[data-dialog-role=\"draggable\"]',\n      zIndexOffset: 1000\n    };\n\n    const userOptions = Utils.dataSetToOptions(this.element);\n    for (let option in userOptions) {\n      if (userOptions.hasOwnProperty(option)) {\n        this.options[option] = userOptions[option];\n      }\n    }\n  }\n}\n\nexport {HTMLDialog};\n","/*\n * Copyright (c) 2017, Inversoft Inc., All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific\n * language governing permissions and limitations under the License.\n */\n'use strict';\n\nimport {PrimeDocument} from \"../PrimeDocument.js\";\nimport {PrimeElement} from \"../Document/PrimeElement.js\";\nimport {Utils} from \"../Utils.js\";\n\nclass InProgress {\n  /**\n   * Constructs a In Progress widget that opens an overlay over an element while something is running and closes it when\n   * it finishes.\n   *\n   * @param {PrimeElement|Element|EventTarget} element The Prime Element to overlay.\n   * @constructor\n   */\n  constructor(element) {\n    Utils.bindAll(this);\n\n    this.element = PrimeElement.wrap(element);\n    this._setInitialOptions();\n    this.draggable = null;\n  }\n\n  /**\n   * Closes the InProgress process.\n   *\n   * @param {Function} callback (Optional) A callback function to invoke after the InProgress has been completely closed.\n   */\n  close(callback) {\n    try {\n      this.options.endFunction(this);\n    } finally {\n      const now = new Date().getTime();\n      const duration = now - this.startInstant;\n      if (duration < this.options.minimumTime) {\n        setTimeout(function() {\n          this.overlay.removeFromDOM();\n\n          if (callback) {\n            callback();\n          }\n        }.bind(this), this.options.minimumTime - duration);\n      } else {\n        this.overlay.removeFromDOM();\n\n        if (callback) {\n          callback();\n        }\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Opens the InProgress process.\n   */\n  open() {\n    this.startInstant = new Date().getTime();\n    this.overlay = PrimeDocument.newElement('<div/>').setId('prime-in-progress-overlay').appendTo(document.body);\n    PrimeDocument.newElement('<i/>', {class: 'fa fa-spin fa-' + this.options.iconName}).appendTo(this.overlay);\n\n    const coords = this.element.getCoordinates();\n    const bodyCoords = PrimeDocument.bodyElement.getCoordinates();\n    this.overlay.setTop(coords.top - bodyCoords.top);\n    this.overlay.setLeft(coords.left - bodyCoords.left);\n    this.overlay.setWidth(this.element.getBorderedWidth());\n    this.overlay.setHeight(this.element.getBorderedHeight());\n    this.overlay.setStyle('zIndex', (this.element.getRelativeZIndex() + 1000).toString());\n\n    this.options.startFunction(this);\n\n    return this;\n  }\n\n  /**\n   * Sets the end function that is called when the InProgress process is finished.\n   *\n   * @param f {function} The function.\n   * @returns {InProgress} This.\n   */\n  withEndFunction(f) {\n    this.options.endFunction = f;\n    return this;\n  }\n\n  /**\n   * Sets the FontAwesome icon name to use for the overlay.\n   *\n   * @param iconName {string} The icon name.\n   * @returns {InProgress} This.\n   */\n  withIconName(iconName) {\n    this.options.iconName = iconName;\n    return this;\n  }\n\n  /**\n   * Sets the minimum time that the InProgress process must run.\n   *\n   * @param time {number} The time in milliseconds.\n   * @returns {InProgress} This.\n   */\n  withMinimumTime(time) {\n    this.options.minimumTime = time;\n    return this;\n  }\n\n  /**\n   * Sets the start function that is called when the InProgress process is started.\n   *\n   * @param f {function} The function.\n   * @returns {InProgress} This.\n   */\n  withStartFunction(f) {\n    this.options.startFunction = f;\n    return this;\n  }\n\n  /* ===================================================================================================================\n   * Private methods\n   * ===================================================================================================================*/\n\n  /**\n   * Set the initial options for this widget.\n   * @private\n   */\n  _setInitialOptions() {\n    // Defaults\n    this.options = {\n      endFunction: function() {\n      },\n      iconName: 'refresh',\n      minimumTime: 1000,\n      startFunction: function() {\n      }\n    };\n\n    const userOptions = Utils.dataSetToOptions(this.element);\n    for (let option in userOptions) {\n      if (userOptions.hasOwnProperty(option)) {\n        this.options[option] = userOptions[option];\n      }\n    }\n  }\n}\n\nexport {InProgress};\n","/*\n * Copyright (c) 2014-2018, Inversoft Inc., All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific\n * language governing permissions and limitations under the License.\n */\n'use strict';\n\nimport {Events} from \"../Events.js\";\nimport {PrimeDocument} from \"../PrimeDocument.js\";\nimport {PrimeElement} from \"../Document/PrimeElement.js\";\nimport {Utils} from \"../Utils.js\";\n\nclass Searcher {\n  /**\n   * Constructs a Searcher object for the given text input.\n   *\n   * The Searcher object can be attached and used in conjunction with any other widgets in a generic manner. It\n   * provides search capabilities and manages the search results. This is useful for MultipleSelects, IntelliSense and\n   * other widgets. Here's the HTML for the search results.\n   *\n   * <pre>\n   *   &lt;input type=\"text\" class=\"prime-search-result-input\" value=\"F\"/>\n   *   &lt;ul>\n   *     &lt;li>Four&lt;/li>\n   *     &lt;li>Five&lt;/li>\n   *     &lt;li>Fifteen&lt;/li>\n   *     &lt;li>Add Custom Entry: F/li>\n   *   &lt;/ul>\n   * &lt;/div>\n   * </pre>\n   *\n   * The with* methods can be used to setup the configuration for this SearchResults, but here are some defaults:\n   *\n   * <ul>\n   *   <li>closeTimeout = 200</li>\n   *   <li>customAddEnabled = true</li>\n   *   <li>customAddCallback = function(customValue){return true;}</li>\n   *   <li>customAddLabel = \"Add Custom:\"</li>\n   *   <li>tooManySearchResultsLabel = \"Too Many Matches For:\"</li>\n   *   <li>noSearchResultsLabel = \"No Matches For:\"</li>\n   * </ul>\n   *\n   * The callback object must conform to this interface:\n   *\n   * <pre>\n   *   CallbackObject {\n *     void deletedBeyondSearchInput()\n *     void doesNotContainValue()\n *     object{results:Array, tooManyResults:boolean} search(_searchString:string),\n *     void selectSearchResult(selectedSearchResult:string),\n *   }\n   * </pre>\n   *\n   * @constructor\n   * @param {PrimeElement|Element|EventTarget} inputElement The input element that is used to execute the search.\n   * @param {PrimeElement|Element|EventTarget} searchResultsContainer The element that is used to store the search results.\n   * @param {*} callbackObject The object that is used to callback for searching and numerous other functions to help\n   *            communicate state and determine how to draw the input and search results.\n   */\n  constructor(inputElement, searchResultsContainer, callbackObject) {\n    Utils.bindAll(this);\n\n    this.searchResults = PrimeElement.wrap(searchResultsContainer);\n    this.inputElement = PrimeElement.wrap(inputElement);\n    if (this.inputElement.domElement.tagName !== 'INPUT') {\n      throw new TypeError('You can only use Prime.Widgets.SearchResults with INPUT elements');\n    }\n\n    this._setInitialOptions(callbackObject);\n  }\n\n  /**\n   * A search function that works on a select box.\n   *\n   * @param searchText {String} The search String.\n   * @param select {HTMLSelectElement|PrimeElement} The select box.\n   * @returns {{results: Array, tooManyResults: boolean}}\n   */\n  static selectSearchFunction(searchText, select) {\n    const options = PrimeElement.unwrap(select).options;\n    const selectableOptions = [];\n    for (let i = 0; i < options.length; i++) {\n      const option = new PrimeElement(options[i]);\n      if (option.isSelected()) {\n        continue;\n      }\n\n      const html = option.getHTML();\n      if (searchText === null || searchText === undefined || searchText === '' || html.toLowerCase().indexOf(searchText.toLowerCase()) === 0) {\n        selectableOptions.push(html);\n      }\n    }\n\n    // Alphabetize the options\n    if (selectableOptions.length > 0) {\n      selectableOptions.sort();\n    }\n\n    return {results: selectableOptions, tooManyResults: false};\n  }\n\n  /**\n   * Closes the search results display, unhighlights any options that are highlighted and resets the input's value to\n   * empty string.\n   */\n  closeSearchResults() {\n    this._removeAllSearchResults();\n    this.inputElement.setValue('');\n    this.searchResults.removeClass('open');\n    setTimeout(function() {\n      this.searchResults.hide();\n      this.resizeInput();\n    }.bind(this), this.options.closeTimeout);\n  }\n\n  /**\n   * Removes all of the event listeners from the input element.\n   */\n  destroy() {\n    this.inputElement\n        .removeEventListener('blur', this._handleBlurEvent)\n        .removeEventListener('click', this._handleClickEvent)\n        .removeEventListener('keyup', this._handleKeyUpEvent)\n        .removeEventListener('keydown', this._handleKeyDownEvent)\n        .removeEventListener('focus', this._handleFocusEvent);\n  }\n\n  focus() {\n    this.inputElement.focus();\n  }\n\n  /**\n   * @returns {PrimeElement} The highlighted search result or null.\n   */\n  getHighlightedSearchResult() {\n    return this.searchResults.queryFirst('.selected');\n  }\n\n  /**\n   * Highlights the next search result if one is highlighted. If there isn't a highlighted search result, this\n   * highlights the first one. This method handles wrapping.\n   *\n   * @returns {Searcher} This Searcher.\n   */\n  highlightNextSearchResult() {\n    let searchResult = this.getHighlightedSearchResult();\n    if (searchResult !== null) {\n      searchResult = searchResult.getNextSibling();\n    }\n\n    // Grab the first search result in the list if there isn't a next sibling\n    if (searchResult === null) {\n      searchResult = this.searchResults.queryFirst('.search-result');\n    }\n\n    if (searchResult !== null) {\n      this.highlightSearchResult(searchResult);\n    }\n\n    return this;\n  }\n\n  /**\n   * Highlights the previous search result if one is highlighted. If there isn't a highlighted search result, this\n   * selects the last one. This method handles wrapping.\n   *\n   * @returns {Searcher} This Searcher.\n   */\n  highlightPreviousSearchResult() {\n    let searchResult = this.getHighlightedSearchResult();\n    if (searchResult !== null) {\n      searchResult = searchResult.getPreviousSibling();\n    }\n\n    if (searchResult === null) {\n      searchResult = this.searchResults.queryFirst('.search-result');\n    }\n\n    if (searchResult !== null) {\n      this.highlightSearchResult(searchResult);\n    }\n\n    return this;\n  }\n\n  /**\n   * Highlights the given search result.\n   *\n   * @param {PrimeElement} searchResult The search result to highlight.\n   * @returns {Searcher} This Searcher.\n   */\n  highlightSearchResult(searchResult) {\n    this.searchResults.getChildren().removeClass('selected');\n\n    searchResult.addClass('selected');\n    const scrollTop = this.searchResults.getScrollTop();\n    const height = this.searchResults.getHeight();\n    const searchResultOffset = searchResult.getOffsetTop();\n    if (searchResultOffset + 1 >= scrollTop + height) {\n      this.searchResults.scrollTo(searchResult.getOffsetTop() - this.searchResults.getHeight() + searchResult.getOuterHeight());\n    } else if (searchResultOffset < scrollTop) {\n      this.searchResults.scrollTo(searchResultOffset);\n    }\n\n    return this;\n  }\n\n  /**\n   * Initializes the Searcher by setting up the event listeners and closing the search result element.\n   *\n   * @returns {Searcher} This.\n   */\n  initialize() {\n    this.inputElement\n        .addEventListener('blur', this._handleBlurEvent)\n        .addEventListener('click', this._handleClickEvent)\n        .addEventListener('keyup', this._handleKeyUpEvent)\n        .addEventListener('keydown', this._handleKeyDownEvent)\n        .addEventListener('focus', this._handleFocusEvent);\n\n    this.closeSearchResults();\n    return this;\n  }\n\n  /**\n   * @returns {boolean} True if the search results add custom option is being displayed currently.\n   */\n  isCustomAddVisible() {\n    return this.searchResults.queryFirst('.custom-add') !== null;\n  }\n\n  /**\n   * @returns {boolean} True if any search results are being displayed currently.\n   */\n  isSearchResultsVisible() {\n    return this.searchResults.hasClass('open');\n  }\n\n  /**\n   * Poor mans resizing of the input field as the user types into it.\n   */\n  resizeInput() {\n    const text = this.inputElement.getValue() === '' ? this.inputElement.getAttribute('placeholder') : this.inputElement.getValue();\n    const newLength = Utils.calculateTextLength(this.inputElement, text) + 35;\n    this.inputElement.setWidth(newLength);\n  }\n\n  /**\n   * Executes a search by optionally updating the input to the given value (if specified) and then rebuilding the search\n   * results using the input's value. This method also puts focus on the input and shows the search results (in case\n   * they are hidden for any reason).\n   *\n   * @param {string} [searchText] The text to search for (this value is also set into the input box). If this is not\n   * specified then the search is run using the input's value.\n   * @returns {Searcher} This Searcher.\n   */\n  search(searchText) {\n    // Set the search text into the input box if it is different and then lowercase it\n    if (Utils.isDefined(searchText) && this.inputElement.getValue() !== searchText) {\n      this.inputElement.setValue(searchText);\n    }\n\n    searchText = Utils.isDefined(searchText) ? searchText.toLowerCase() : this.inputElement.getValue();\n    this.resizeInput();\n\n    // Clear the search results (if there are any)\n    this._removeAllSearchResults();\n\n    // Call the callback\n    const searchResults = this.options.callbackObject.search(searchText);\n    if (!searchResults.hasOwnProperty('results') || !searchResults.hasOwnProperty('tooManyResults')) {\n      throw new TypeError('The callback must return an Object that contains the properties results[Array] and tooManyResults[boolean]');\n    }\n\n    let count = 0;\n    let matchingSearchResultElement = null;\n    for (let i = 0; i < searchResults.results.length; i++) {\n      const searchResult = searchResults.results[i];\n      const element = PrimeDocument.newElement('<li/>')\n          .addClass('search-result')\n          .setAttribute('value', searchResult)\n          .setHTML(searchResult)\n          .addEventListener('click', this._handleClickEvent)\n          .addEventListener('mouseover', this._handleMouseOverEvent)\n          .appendTo(this.searchResults);\n      if (searchResult.toLowerCase().trim() === searchText.toLowerCase().trim()) {\n        matchingSearchResultElement = element;\n      }\n\n      count++;\n    }\n\n    // Show the custom add option if necessary\n    const trimmedLength = searchText.trim().length;\n    if (this.options.customAddEnabled && trimmedLength !== 0 && matchingSearchResultElement === null\n        && (!('doesNotContainValue' in this.options.callbackObject) || this.options.callbackObject.doesNotContainValue(searchText))) {\n      matchingSearchResultElement = PrimeDocument.newElement('<li/>')\n          .addClass('custom-add')\n          .addEventListener('click', this._handleClickEvent)\n          .addEventListener('mouseover', this._handleMouseOverEvent)\n          .setHTML(this.options.customAddLabel + Utils.escapeHTML(searchText))\n          .appendTo(this.searchResults);\n      count++;\n    }\n\n    if (count === 0 && trimmedLength !== 0) {\n      PrimeDocument.newElement('<li/>')\n          .addClass('no-search-results')\n          .setHTML(this.options.noSearchResultsLabel + Utils.escapeHTML(searchText))\n          .appendTo(this.searchResults);\n      count++;\n    }\n\n    // Handle too many results\n    if (searchResults.tooManyResults) {\n      PrimeDocument.newElement('<li/>')\n          .addClass('too-many-search-results')\n          .setHTML(this.options.tooManySearchResultsLabel + Utils.escapeHTML(searchText))\n          .appendTo(this.searchResults);\n      count++;\n    }\n\n    if (count !== 0) {\n      this.searchResults.show();\n      this.searchResults.addClass('open');\n\n      if (count >= 10) {\n        this.searchResults.setHeight(this.searchResults.getChildren()[0].getOuterHeight() * 10 + 1);\n      } else {\n        this.searchResults.setHeight(this.searchResults.getChildren()[0].getOuterHeight() * count + 1);\n      }\n    } else {\n      this.closeSearchResults();\n    }\n\n    if (matchingSearchResultElement !== null) {\n      this.highlightSearchResult(matchingSearchResultElement);\n    }\n\n    return this;\n  }\n\n  /**\n   * Selects the highlighted search result unless there isn't one highlighted, in which case, this does nothing.\n   *\n   * @returns {Searcher} This Searcher.\n   */\n  selectHighlightedSearchResult() {\n    const searchResult = this.getHighlightedSearchResult();\n    if (searchResult === null) {\n      return this;\n    }\n\n    const custom = searchResult.hasClass('custom-add');\n    const value = (custom) ? this.inputElement.getValue().trim() : searchResult.getHTML();\n    if (custom) {\n      // The client of this searcher needs to warn the user.\n      if (!this.options.customAddCallback(value)) {\n        return this;\n      }\n    }\n\n    this.options.callbackObject.selectSearchResult(value);\n    this.closeSearchResults();\n\n    return this;\n  }\n\n  /**\n   * Sets the timeout used in the close method to allow for transitions.\n   *\n   * @param timeout {int} The timeout.\n   * @returns {Searcher} This.\n   */\n  withCloseTimeout(timeout) {\n    this.options.closeTimeout = timeout;\n    return this;\n  }\n\n  /**\n   * Sets whether or not this Searcher allows custom options to be added.\n   *\n   * @param {boolean} enabled The flag.\n   * @returns {Searcher} This Searcher.\n   */\n  withCustomAddEnabled(enabled) {\n    this.options.customAddEnabled = enabled;\n    return this;\n  }\n\n  /**\n   * Sets whether or not this Searcher allows custom options to be added.\n   *\n   * @param {Function} callback The function to call that will return true if the custom option can be added.\n   * @returns {Searcher} This Searcher.\n   */\n  withCustomAddCallback(callback) {\n    this.options.customAddCallback = callback;\n    return this;\n  }\n\n  /**\n   * Sets the label used when custom options are added.\n   *\n   * @param {string} customAddLabel The label.\n   * @returns {Searcher} This Searcher.\n   */\n  withCustomAddLabel(customAddLabel) {\n    this.options.customAddLabel = customAddLabel;\n    return this;\n  }\n\n  /**\n   * Set more than one option at a time by providing a map of key value pairs. This is considered an advanced\n   * method to set options on the widget. The caller needs to know what properties are valid in the options object.\n   *\n   * @param {Object} options Key value pair of configuration options.\n   * @returns {Searcher} This.\n   */\n  withOptions(options) {\n    if (!Utils.isDefined(options)) {\n      return this;\n    }\n\n    for (let option in options) {\n      if (options.hasOwnProperty(option)) {\n        this.options[option] = options[option];\n      }\n    }\n    return this;\n  }\n\n  /**\n   * Sets the label that is printed when there are no search results.\n   *\n   * @param {string} noSearchResultsLabel The label text.\n   * @returns {Searcher} This Searcher.\n   */\n  withNoSearchResultsLabel(noSearchResultsLabel) {\n    this.options.noSearchResultsLabel = noSearchResultsLabel;\n    return this;\n  }\n\n  /* ===================================================================================================================\n   * Private methods\n   * ===================================================================================================================*/\n\n  /**\n   * Sets the label that is printed when there are too many search results.\n   *\n   * @param {string} tooManySearchResultsLabel The label text.\n   * @returns {Searcher} This Searcher.\n   */\n  withTooManySearchResultsLabel(tooManySearchResultsLabel) {\n    this.options.tooManySearchResultsLabel = tooManySearchResultsLabel;\n    return this;\n  }\n\n  /**\n   * Handles the blur event when the input goes out of focus.\n   *\n   * @private\n   */\n  _handleBlurEvent() {\n    window.setTimeout((function() {\n      if (document.activeElement !== this.inputElement.domElement) {\n        this.closeSearchResults();\n      }\n    }).bind(this), 300);\n  }\n\n  /**\n   * Handles all click events sent to the Searcher.\n   *\n   * @param {Event} event The mouse event.\n   * @private\n   */\n  _handleClickEvent(event) {\n    const target = new PrimeElement(event.currentTarget);\n    if (target.hasClass('custom-add') || target.hasClass('search-result')) {\n      this.selectHighlightedSearchResult();\n    } else if (target.domElement === this.inputElement.domElement) {\n      this.search();\n    } else {\n      console.log('Clicked something else target=[' + event.target + '] currentTarget=[' + event.currentTarget + ']');\n    }\n  }\n\n  /**\n   * Handles when the input field is focused by opening the search results.\n   *\n   * @private\n   */\n  _handleFocusEvent() {\n    this.search();\n  }\n\n  /**\n   * Handles the key down events that should not be propagated.\n   *\n   * @param {KeyboardEvent} event The keyboard event object.\n   * @private\n   */\n  _handleKeyDownEvent(event) {\n    const key = event.keyCode;\n    if (key === Events.Keys.BACKSPACE) {\n      this.previousSearchString = this.inputElement.getValue();\n    } else if (key === Events.Keys.UP_ARROW) {\n      Utils.stopEvent(event);\n      this.highlightPreviousSearchResult();\n    } else if (key === Events.Keys.DOWN_ARROW) {\n      Utils.stopEvent(event);\n      if (this.isSearchResultsVisible()) {\n        this.highlightNextSearchResult();\n      } else {\n        this.search();\n      }\n    } else if (key === Events.Keys.ENTER) {\n      Utils.stopEvent(event); // Don't bubble enter otherwise the form submits\n    }\n  }\n\n  /**\n   * Handles all key up events sent to the search results container.\n   *\n   * @param {KeyboardEvent} event The keyboard event object.\n   *  @private\n   */\n  _handleKeyUpEvent(event) {\n    const key = event.keyCode;\n    const value = this.inputElement.getValue();\n\n    if (key === Events.Keys.BACKSPACE) {\n      if (value === '' && this.previousSearchString === '') {\n        this.options.callbackObject.deletedBeyondSearchInput();\n      } else {\n        this.search();\n      }\n    } else if (key === Events.Keys.ENTER) {\n      Utils.stopEvent(event);\n      // If a search result is highlighted, add it\n      if (this.getHighlightedSearchResult() !== null) {\n        this.selectHighlightedSearchResult();\n      }\n    } else if (key === Events.Keys.ESCAPE) {\n      this.closeSearchResults();\n    } else if (key === Events.Keys.SPACE || key === Events.Keys.DELETE ||\n        (key >= 48 && key <= 90) || (key >= 96 && key <= 111) || (key >= 186 && key <= 192) || (key >= 219 && key <= 222)) {\n      this.search();\n    }\n  }\n\n  /**\n   * Handles mouseover events for the search results (only) by highlighting the event target.\n   *\n   * @param {Event} event The mouseover event.\n   * @private\n   */\n  _handleMouseOverEvent(event) {\n    const target = new PrimeElement(event.currentTarget);\n    this.highlightSearchResult(target);\n  }\n\n  /**\n   * Removes all of the search results.\n   *\n   * @private\n   */\n  _removeAllSearchResults() {\n    this.searchResults.query('li').removeAllFromDOM();\n  }\n\n  /* ===================================================================================================================\n   * Search function implementations.\n   * ===================================================================================================================*/\n\n  /**\n   * Set the initial options for this widget.\n   * @private\n   */\n  _setInitialOptions(callbackObject) {\n    // Defaults\n    this.options = {\n      callbackObject: callbackObject,\n      closeTimeout: 200,\n      customAddEnabled: true,\n      'customAddCallback'() {\n        return true;\n      },\n      customAddLabel: 'Add Custom: ',\n      noSearchResultsLabel: 'No Matches For: ',\n      tooManySearchResultsLabel: 'Too Many Matches For: ',\n    };\n\n    const userOptions = Utils.dataSetToOptions(this.inputElement);\n    for (let option in userOptions) {\n      if (userOptions.hasOwnProperty(option)) {\n        this.options[option] = userOptions[option];\n      }\n    }\n  }\n}\n\nexport {Searcher};","/*\n * Copyright (c) 2017, Inversoft Inc., All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific\n * language governing permissions and limitations under the License.\n */\n'use strict';\n\nimport {Events} from \"../Events.js\";\nimport {PrimeDocument} from \"../PrimeDocument.js\";\nimport {PrimeElement} from \"../Document/PrimeElement.js\";\nimport {Utils} from \"../Utils.js\";\nimport {Searcher} from \"./Searcher.js\";\n\nlet count = 1;\nlet AddOptionEvent = 'MultipleSelect:addOption';\nlet DeselectOptionEvent = 'MultipleSelect:deselectOption';\nlet SelectOptionEvent = 'MultipleSelect:selectOption';\n\nclass MultipleSelect {\n  /**\n   * Constructs a MultipleSelect object for the given element.\n   *\n   * The MultipleSelect generates a number of different HTML elements directly after the SELECT element you pass to the\n   * constructor. A fully rendered MultipleSelect might look something like this:\n   *\n   * <pre>\n   * &lt;select id=\"foo\">\n   *   &lt;option value=\"one\">One&lt;/option>\n   *   &lt;option value=\"two\">Two&lt;/option>\n   *   &lt;option value=\"three\">Three&lt;/option>\n   * &lt;/select>\n   * &lt;div id=\"foo-display\" class=\"prime-multiple-select\">\n   *   &lt;ul id=\"foo-option-list\" class=\"option-list\">\n   *     &lt;li id=\"foo-option-one\">&lt;span>One&lt;/span>&lt;a href=\"#\">X&lt;/a>&lt;/li>\n   *     &lt;li id=\"foo-option-two\">&lt;span>Two&lt;/span>&lt;a href=\"#\">X&lt;/a>&lt;/li>\n   *     &lt;li id=\"foo-option-three\">&lt;span>Three&lt;/span>&lt;a href=\"#\">X&lt;/a>&lt;/li>\n   *     &lt;li>&lt;input type=\"text\" value=\"aaa\"/>&lt;/li>\n   *   &lt;/ul>\n   *   &lt;ul class=\"search-results\">\n   *     &lt;li>One&lt;/li>\n   *     &lt;li>Two&lt;/li>\n   *     &lt;li>Three&lt;/li>\n   *     &lt;li>Add Custom Entry: aaa/li>\n   *   &lt;/ul>\n   * &lt;/div>\n   * </pore>\n   *\n   * The with* methods can be used to setup the configuration for this MultipleSelect, but here are some defaults:\n   *\n   * <ul>\n   *   <li>placeholder = \"Choose\"</li>\n   *   <li>customAddEnabled = true</li>\n   *   <li>customAddLabel = \"Add Custom Value:\"</li>\n   *   <li>noSearchResultsLabel = \"No Matches For:\"</li>\n   * </ul>\n   *\n   * @constructor\n   * @param {PrimeElement|Element|EventTarget} element The Prime Element for the MultipleSelect.\n   */\n  constructor(element) {\n    Utils.bindAll(this);\n    this.initialized = false;\n\n    this.element = PrimeElement.wrap(element);\n    if (this.element.domElement.tagName !== 'SELECT') {\n      throw new TypeError('You can only use MultipleSelect with select elements');\n    }\n\n    if (this.element.getAttribute('multiple') !== 'multiple') {\n      throw new TypeError('The select box you are attempting to convert to a MultipleSelect must have the multiple=\"multiple\" attribute set');\n    }\n\n    this._setInitialOptions();\n  }\n\n  /*\n   * Statics\n   */\n  /**\n   * @returns {number}\n   */\n  static get count() {\n    return count;\n  }\n\n  /**\n   * @param {number} value\n   */\n  static set count(value) {\n    count = value;\n  }\n\n  /**\n   * @returns {string}\n   */\n  static get AddOptionEvent() {\n    return AddOptionEvent;\n  }\n\n  /**\n   * @param {string} value\n   */\n  static set AddOptionEvent(value) {\n    AddOptionEvent = value;\n  }\n\n  /**\n   * @returns {string}\n   */\n  static get DeselectOptionEvent() {\n    return DeselectOptionEvent;\n  }\n\n  /**\n   * @param {string} value\n   */\n  static set DeselectOptionEvent(value) {\n    DeselectOptionEvent = value;\n  }\n\n  /**\n   * @returns {string}\n   */\n  static get SelectOptionEvent() {\n    return SelectOptionEvent;\n  }\n\n  /**\n   * @param {string} value\n   */\n  static set SelectOptionEvent(value) {\n    SelectOptionEvent = value;\n  }\n\n  /**\n   * Finds the HTMLSelectOption with the given id and returns it wrapped in a PrimeElement.\n   *\n   * @param {String} id\n   * @returns {PrimeElement}\n   */\n  static findOptionWithId(id) {\n    return PrimeDocument.queryFirst('[data-option-id=\"' + id + '\"]');\n  }\n\n  /**\n   * Pass through to add event listeners to This. The custom events that this MultipleSelect fires are:\n   *\n   *  'MultipleSelect:deselectOption'\n   *  'MultipleSelect:selectOption'\n   *  'MultipleSelect:addOption'\n   *\n   * @param {string} event The name of the event.\n   * @param {Function} listener The listener function.\n   * @returns {MultipleSelect} This.\n   */\n  addEventListener(event, listener) {\n    this.element.addEventListener(event, listener);\n    return this;\n  }\n\n  /**\n   * Determines if this MultipleSelect contains an option with the given value.\n   *\n   * @param {String} value The value to look for.\n   */\n  containsOptionWithValue(value) {\n    return this.findOptionWithValue(value) !== null;\n  }\n\n  /**\n   * Adds the given option to this select. The option will not be selected.\n   *\n   * @param {String} value The value for the option.\n   * @param {String} display The display text for the option.\n   * @param {?String} [id] The id of the element. (Defaults to null)\n   * @returns {MultipleSelect} This.\n   */\n  addOption(value, display, id) {\n    if ((id === null || id === undefined) && this.containsOptionWithValue(value)) {\n      return this;\n    }\n\n    let element = PrimeDocument.newElement('<option/>')\n        .setValue(value)\n        .setHTML(display)\n        .appendTo(this.element);\n\n    if (id) {\n      element.setDataAttribute(\"optionId\", id);\n    }\n\n    // Fire the custom event\n    this.element.fireEvent(MultipleSelect.AddOptionEvent, value, this);\n\n    return this;\n  }\n\n  /**\n   * Deselects the option with the given value by removing the selected attribute from the option in the select box and\n   * removing the option from the display container. If the MultipleSelect doesn't contain an option for the given value,\n   * this method throws an exception.\n   *\n   * @param {String} value The value to look for.\n   * @returns {MultipleSelect} This.\n   */\n  deselectOptionWithValue(value) {\n    const option = this.findOptionWithValue(value);\n    if (option === null) {\n      throw new Error('MultipleSelect doesn\\'t contain an option with the value [' + value + ']');\n    }\n\n    this.deselectOption(option);\n\n    return this;\n  }\n\n  /**\n   * Deselects the option with the given value by removing the selected attribute from the option in the select box and\n   * removing the option from the display container.\n   *\n   * @param {PrimeElement} option The option to deselect.\n   * @returns {MultipleSelect} This.\n   */\n  deselectOption(option) {\n    option.setSelected(false);\n\n    const id = option.getDataAttribute('optionId') || this._makeOptionID(option);\n    const displayOption = PrimeDocument.queryById(id);\n    if (displayOption !== null) {\n      displayOption.removeFromDOM();\n    }\n\n    // If there are no selected options left, add back the placeholder attribute to the input and resize it\n    if (this.optionList.query('li').length === 1) {\n      this.input.setAttribute('placeholder', this.options.placeholder);\n      this.searcher.resizeInput();\n    }\n\n    // Fire the custom event\n    this.element.fireEvent(MultipleSelect.DeselectOptionEvent, option.getValue(), this);\n\n    return this;\n  }\n\n  /**\n   * Destroys the widget completely.\n   */\n  destroy() {\n    this.element.show();\n    this.displayContainer.removeFromDOM();\n  }\n\n  /**\n   * Finds the HTMLSelectOption with the given text and returns it wrapped in a PrimeElement.\n   *\n   * @param {String} text The text to look for.\n   * @returns {PrimeElement} The option element or null.\n   */\n  findOptionWithText(text) {\n    const options = this.element.getOptions();\n    for (let i = 0; i < options.length; i++) {\n      if (options[i].getTextContent() === text) {\n        return options[i];\n      }\n    }\n\n    return null;\n  }\n\n  deselectOptionWithId(id) {\n    const option = MultipleSelect.findOptionWithId(id);\n    if (option === null) {\n      throw new Error('MultipleSelect doesn\\'t contain an option with the id [' + id + ']');\n    }\n\n    this.deselectOption(option);\n\n    return this;\n  }\n\n  /**\n   * Finds the HTMLSelectOption with the given value and returns it wrapped in a PrimeElement.\n   *\n   * @param {String} value The value to look for.\n   * @returns {PrimeElement} The option element or null.\n   */\n  findOptionWithValue(value) {\n    for (let i = 0; i < this.element.domElement.length; i++) {\n      const cur = this.element.domElement.options[i];\n      if (cur.value === value) {\n        return new PrimeElement(cur);\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * @returns {string[]} The currently selected options values.\n   */\n  getSelectedValues() {\n    return this.element.getSelectedValues();\n  }\n\n  /**\n   * Determines if the MultipleSelect contains an option with the given value.\n   *\n   * @param {string} value The value.\n   * @returns {boolean} True if the MultipleSelect contains an option with the given value, false otherwise.\n   */\n  hasOptionWithValue(value) {\n    return this.findOptionWithValue(value) !== null;\n  }\n\n  /**\n   * Highlights the final selected option (if there is one) to indicate that it will be unselected if the user clicks\n   * the delete key again.\n   *\n   * @returns {MultipleSelect} This.\n   */\n  highlightOptionForUnselect() {\n    const options = this.optionList.getChildren();\n    if (options.length > 1) {\n      options[options.length - 2].addClass('selected');\n    }\n\n    return this;\n  }\n\n  /**\n   * Initializes the display from the underlying select element. All of the current display options (li elements) are\n   * removed. New display options are added for each selected option in the select box.\n   *\n   * @returns {MultipleSelect} This.\n   */\n  initialize() {\n    this.element.hide();\n\n    let id = this.element.getId();\n    if (id === null || id === '') {\n      id = 'prime-multiple-select' + MultipleSelect.count++;\n      this.element.setId(id);\n    }\n\n    this.displayContainer = PrimeDocument.queryById(id + '-display');\n    this.input = null;\n    if (this.displayContainer === null) {\n      this.displayContainer = PrimeDocument.newElement('<div/>')\n          .setId(id + '-display')\n          .addClass(this.options.className)\n          .addEventListener('click', this._handleClickEvent)\n          .addEventListener('keyup', this._handleKeyUpEvent)\n          .insertAfter(this.element);\n\n      this.optionList = PrimeDocument.newElement('<ul/>')\n          .addClass('option-list')\n          .appendTo(this.displayContainer);\n\n      this.searchResults = PrimeDocument.newElement('<ul/>')\n          .addClass('search-results')\n          .hide()\n          .appendTo(this.displayContainer);\n    } else {\n      this.displayContainer\n          .removeAllEventListeners()\n          .addEventListener('click', this._handleClickEvent)\n          .addEventListener('keyup', this._handleKeyUpEvent);\n      this.optionList = this.displayContainer.queryFirst('.option-list');\n      this.searchResults = this.displayContainer.queryFirst('.search-results');\n    }\n\n    PrimeDocument.queryFirst('html').addEventListener('click', this._handleGlobalClickEvent);\n\n    // Close the search\n    this.searchResults.hide();\n    this._redraw();\n\n    // When the caller specified a selected order, process all selected options to honor the requested order.\n    // - Do this after redraw to ensure that we don't modify the order of the display container.\n    // - Currently we only honor the requested order if the option is already selected.\n    if (this.options.initialSelectedOrder.length > 0) {\n      for (let i = 0; i < this.options.initialSelectedOrder.length; i++) {\n        const actual = this.element.queryFirst('option[value=' + this.options.initialSelectedOrder[i] + ']');\n        if (actual !== null && actual.isSelected()) {\n          this.selectOption(actual);\n        }\n      }\n    }\n\n    this.initialized = true;\n    return this;\n  }\n\n  /**\n   * @returns {boolean} True if the last option is highlighted for unselect.\n   */\n  isLastOptionHighlightedForUnselect() {\n    const options = this.optionList.getChildren();\n    return options.length > 1 && options[options.length - 2].hasClass('selected');\n  }\n\n  /**\n   * Removes all of the options from the MultipleSelect.\n   *\n   * @returns {MultipleSelect} This.\n   */\n  removeAllOptions() {\n    // Remove in reverse order because the options array is dynamically updated when elements are deleted from the DOM\n    const options = this.element.domElement.options;\n    for (let i = options.length - 1; i >= 0; i--) {\n      this.removeOption(new PrimeElement(options[i]));\n    }\n\n    return this;\n  }\n\n  /**\n   * Removes the highlighted option.\n   */\n  removeHighlightedOption() {\n    const options = this.optionList.getChildren();\n    if (this.options.allowDuplicates) {\n      this.deselectOptionWithId(options[options.length - 2].getId());\n    } else {\n      this.deselectOptionWithValue(options[options.length - 2].getAttribute('value'));\n    }\n    this.search();\n  }\n\n  /**\n   * Removes the given option from the MultipleSelect by removing the option in the select box and the option in the\n   * display container.\n   *\n   * @param {PrimeElement} option The option to remove.\n   * @returns {MultipleSelect} This.\n   */\n  removeOption(option) {\n    if (!(option instanceof PrimeElement)) {\n      throw new TypeError('MultipleSelect#removeOption only takes PrimeElement instances');\n    }\n\n    option.removeFromDOM();\n\n    let id, displayOption;\n    if (this.options.allowDuplicates) {\n      // The ids are random so we need to get the data attribute.\n      id = option.getDataAttribute('optionId');\n      displayOption = PrimeDocument.queryById(id);\n    } else {\n      // The ids aren't random and can be reproducably created.\n      id = this._makeOptionID(option);\n      displayOption = PrimeDocument.queryById(id);\n    }\n\n    // Check if the option has already been selected\n    if (displayOption !== null) {\n      displayOption.removeFromDOM();\n    }\n\n    return this;\n  }\n\n  /**\n   * Removes the option with the given value from the MultipleSelect by removing the option in the select box and the\n   * option in the display container. If the MultipleSelect doesn't contain an option with the given value, this throws\n   * an exception.\n   *\n   * @param {string} value The value of the option to remove.\n   * @returns {MultipleSelect} This.\n   */\n  removeOptionWithValue(value) {\n    const option = this.findOptionWithValue(value);\n    if (option === null) {\n      throw new Error('MultipleSelect doesn\\'t contain an option with the value [' + value + ']');\n    }\n\n    this.removeOption(option);\n\n    return this;\n  }\n\n  /**\n   * Selects the given option by setting the selected attribute on the option in the select box (the object passed in is\n   * the option from the select box wrapped in a PrimeElement) and adding it to the display container. If the\n   * option is already in the display container, that step is skipped.\n   *\n   * @param {PrimeElement} option The option object from the select box wrapped in a PrimeElement instance.\n   * @returns {MultipleSelect} This.\n   */\n  selectOption(option) {\n    if (!(option instanceof PrimeElement)) {\n      throw new TypeError('MultipleSelect#selectOption only takes PrimeElement instances');\n    }\n\n    const id = this._makeOptionID(option);\n    let displayOption = PrimeDocument.queryById(id);\n\n    // Move the option if configured, and if already displayed remove it and add it again to get the correct order.\n    const moveDuringInitialization = !this.initialized && this.options.initialSelectedOrder.length > 0;\n    if (this.options.preserveDisplayedSelectionOrder || moveDuringInitialization) {\n      const parent =  option.getParent();\n      const lastOption = parent.getLastChild('option');\n      if (option.getValue() !== lastOption.getValue()) {\n        option.removeFromDOM();\n        option.appendTo(parent);\n        // If we moved the option, and we already have a display option, delete it so that we can rebuild it.\n        if (displayOption !== null) {\n          displayOption.removeFromDOM();\n          displayOption = null;\n        }\n      }\n    }\n\n    // Check if the option has already been selected\n    if (displayOption === null) {\n      /*\n      If we allow dupes, always duplicate the option and append it to the end or the order will be a problem. The default multiselect doesn't support order)\n       */\n      if (this.options.allowDuplicates) {\n        this.addOption(option.getValue(), option.getHTML(), id);\n        option = MultipleSelect.findOptionWithId(id);\n      }\n      option.setSelected(true);\n\n      const li = PrimeDocument.newElement('<li/>')\n          .setAttribute('value', option.getValue())\n          .setId(id)\n          .insertBefore(this.inputOption);\n      PrimeDocument.newElement('<span/>')\n          .setHTML(option.getHTML())\n          .setAttribute('value', option.getValue())\n          .appendTo(li);\n      PrimeDocument.newElement('<a/>')\n          .setAttribute('href', '#')\n          .setAttribute('value', option.getValue())\n          .setHTML(this.options.removeIcon)\n          .addEventListener('click', this._handleClickEvent)\n          .appendTo(li);\n    }\n\n    // Remove the placeholder attribute on the input and resize it\n    this.input.removeAttribute('placeholder');\n\n    // Close the search results and resize the input\n    this.searcher.closeSearchResults();\n\n    // Scroll the display to the bottom\n    this.optionList.scrollToBottom();\n\n    // Fire the custom event\n    this.element.fireEvent(MultipleSelect.SelectOptionEvent, option.getValue(), this);\n\n    return this;\n  }\n\n  /**\n   * Selects the option with the given value by setting the selected attribute on the option in the select box (the\n   * object passed in is the option from the select box wrapped in a PrimeElement) and adding it to the display\n   * container. If the option is already in the display container, that step is skipped.\n   * <p/>\n   * If there isn't an option with the given value, this throws an exception.\n   *\n   * @param {String} value The value of the option to select.\n   * @returns {MultipleSelect} This.\n   */\n  selectOptionWithValue(value) {\n    const option = this.findOptionWithValue(value);\n    if (option === null) {\n      throw new Error('MultipleSelect doesn\\'t contain an option with the value [' + value + ']');\n    }\n\n    this.selectOption(option);\n\n    return this;\n  }\n\n  /**\n   * Sets the selected options. This mimics the function on Element to provide consistency.\n   *\n   * @param {string[]} [arguments] The list of options to select based on their values.\n   * @returns {MultipleSelect} This.\n   */\n  setSelectedValues() {\n    this.element.setSelectedValues.apply(this.element, arguments);\n    this._redraw();\n    return this;\n  }\n\n  /**\n   * Unhighlights the last option if it is highlighted.\n   *\n   * @returns {MultipleSelect} This.\n   */\n  unhighlightOptionForUnselect() {\n    this.optionList.getChildren().each(function(element) {\n      element.removeClass('selected');\n    });\n    return this;\n  }\n\n  withAllowDuplicates(value) {\n    this.options.allowDuplicates = value;\n    return this;\n  }\n\n  /**\n   * Sets the class name for the MultipleSelect element.\n   *\n   * @param className {string} The class name.\n   * @returns {MultipleSelect} This.\n   */\n  withClassName(className) {\n    this.options.className = className;\n    return this;\n  }\n\n  /**\n   * Sets the timeout used in the close method to allow for transitions.\n   *\n   * @param timeout {int} The timeout.\n   * @returns {MultipleSelect} This.\n   */\n  withCloseTimeout(timeout) {\n    this.options.closeTimeout = timeout;\n    return this;\n  }\n\n  /**\n   * Sets whether or not this MultipleSelect allows custom options to be added.\n   *\n   * @param {boolean} enabled The flag.\n   * @returns {MultipleSelect} This.\n   */\n  withCustomAddEnabled(enabled) {\n    this.options.customAddEnabled = enabled;\n    return this;\n  }\n\n  /**\n   * Sets the label used when custom options are added.\n   *\n   * @param {string} customAddLabel The label.\n   * @returns {MultipleSelect} This.\n   */\n  withCustomAddLabel(customAddLabel) {\n    this.options.customAddLabel = customAddLabel;\n    return this;\n  }\n\n  /**\n   * Enable error class handling. When this option is used, if the specified error class is found on any element\n   * in the tab content the same error class will be added to the tab to identify the tab contains errors.\n   *\n   * @returns {MultipleSelect} This.\n   */\n  withErrorClassHandling(errorClass) {\n    this.options.errorClass = errorClass;\n    return this;\n  }\n\n  /**\n   * Sets the label that is printed when there are no search results. This must be called before render is called.\n   *\n   * @param {string} noSearchResultsLabel The label text.\n   * @returns {MultipleSelect} This.\n   */\n  withNoSearchResultsLabel(noSearchResultsLabel) {\n    this.options.noSearchResultsLabel = noSearchResultsLabel;\n    return this;\n  }\n\n  /**\n   * Sets the placeholder text for This. This must be called before render is called.\n   *\n   * @param {string} placeholder The placeholder text.\n   * @returns {MultipleSelect} This.\n   */\n  withPlaceholder(placeholder) {\n    this.options.placeholder = placeholder;\n    return this;\n  }\n\n  /**\n   * When set equal to true, the displayed selection in the widget will be reflected in the serialized form data.\n   *\n   * Default is 'false', and is the legacy behavior.\n   *\n   * @param value {boolean} The boolean value, true or false.\n   * @returns {MultipleSelect} This.\n   */\n  withPreserveDisplayedSelectionOrder(value) {\n    this.options.preserveDisplayedSelectionOrder = value;\n    return this;\n  }\n\n  /**\n   * Sets the remove icon value. This overrides the default value.\n   *\n   * @param {string} removeIcon The remove icon text.\n   * @returns {MultipleSelect} This.\n   */\n  withRemoveIcon(removeIcon) {\n    this.options.removeIcon = removeIcon;\n    return this;\n  }\n\n  /**\n   * Sets the search function that can be used to search other sources besides the select box that backs this widget.\n   *\n   * @param searchFunction {Function} The search function.\n   * @returns {MultipleSelect} This.\n   */\n  withSearchFunction(searchFunction) {\n    this.options.searchFunction = searchFunction;\n    return this;\n  }\n\n  /**\n   * Used during initialization to modify the order of selected options in the DOM.\n   *\n   * This does not affect the selected attribute, only the order in the DOM. It is not necessary to\n   * provide a complete list of selected option values.\n   *\n   * If options 'en', 'fr' and 'du' are selected, and you only provide 'du' as input here, 'du'\n   * will be moved to ensure it is first in the submitted form data, and the order of 'en' and 'fr'\n   * will not be modified, but will come after 'du'.\n   *\n   * Example:\n   *   A user who selected preferred languages in the order German, English, French would initialize the selected\n   *   options as: ['du', 'en', 'fr']\n   *\n   * @param {string[]} selections The selected options values.\n   * @returns {MultipleSelect} This.\n   */\n  withInitialSelectedOrder(selections) {\n    this.options.initialSelectedOrder = selections;\n    return this;\n  }\n\n  /* ===================================================================================================================\n   * Searcher's callback interface methods.\n   * ===================================================================================================================*/\n\n  /**\n   * Called when the Searcher gets a keyboard event that deletes beyond the search input. This highlights the last word\n   * in the phrase for removal.\n   */\n  deletedBeyondSearchInput() {\n    if (this.isLastOptionHighlightedForUnselect()) {\n      this.removeHighlightedOption();\n    }\n\n    this.highlightOptionForUnselect();\n  }\n\n  /**\n   * Called when the search needs to determine if the custom add option should be displayed. As long as this\n   * MultipleSelect does not contain the given value, the custom add option should be displayed.\n   *\n   * @param {string} value The value.\n   * @returns {boolean} True if this MultipleSelect does not contain the value, false otherwise.\n   */\n  doesNotContainValue(value) {\n    return !this.containsOptionWithValue(value);\n  }\n\n  /**\n   * Called when the Searcher is executing a search. This executes a search via the callback and returns the results.\n   *\n   * @param {string} [searchText] The text to search for.\n   * @returns {Object} The SearchResults.\n   */\n  search(searchText) {\n    this.unhighlightOptionForUnselect();\n    return this.options.searchFunction.call(null, searchText, this.element);\n  }\n\n  /**\n   * Called when the Searcher gets an event that causes a search result to be selected. This adds the word.\n   */\n  selectSearchResult(value) {\n\n    value = Utils.unescapeHTML(value); // In case the string has html escapes in it.\n\n    // Add the custom option if there is one\n    let option = this.findOptionWithText(value);\n    if (option === null) {\n      this.addOption(value, Utils.escapeHTML(value));\n      option = this.findOptionWithValue(value); // The value will still be unescaped\n    }\n\n    this.selectOption(option);\n  }\n\n\n  /* ===================================================================================================================\n   * Private Methods\n   * ===================================================================================================================*/\n\n  /**\n   * Handles the blur event when the input goes out of focus.\n   *\n   * @private\n   */\n  _handleBlurEvent() {\n    window.setTimeout((function() {\n      if (document.activeElement !== this.input.domElement) {\n        this.searcher.closeSearchResults();\n      }\n    }).bind(this), 300);\n    this.displayContainer.removeClass('focus');\n  }\n\n  /**\n   * Handles all click events sent to the MultipleSelect.\n   *\n   * @param {Event} event The mouse event.\n   * @private\n   */\n  _handleClickEvent(event) {\n    Utils.stopEvent(event);\n    const target = new PrimeElement(event.target);\n    if (target.is('a')) {\n      if (this.options.allowDuplicates) {\n        const id = target.getParent().getId();\n        this.removeOption(MultipleSelect.findOptionWithId(id));\n      } else {\n        this.removeOptionWithValue(target.getAttribute('value'));\n      }\n    } else if (target.is('span')) {\n      target.selectElementContents();\n    } else {\n      this.input.focus();\n    }\n  }\n\n  /**\n   * Handles the blur event when the input goes out of focus.\n   *\n   * @private\n   */\n  _handleFocusEvent() {\n    this.displayContainer.addClass('focus');\n  }\n\n  /**\n   * Handles mouse clicks outside of This. If they clicked anything that is not within this MultipleSelect,\n   * it closes the search results.\n   *\n   * @param {Event} event The event.\n   * @returns {boolean} Always true so the event is bubbled.\n   * @private\n   */\n  _handleGlobalClickEvent(event) {\n    const target = new PrimeElement(event.target);\n    if (this.displayContainer.domElement !== target.domElement && !target.isChildOf(this.displayContainer)) {\n      this.searcher.closeSearchResults();\n    }\n  }\n\n  /**\n   * Handles all key up events sent to the display container.\n   *\n   * @param {Event} event The browser event object.\n   * @returns {boolean} True if the search display is not open, false otherwise. This will prevent the event from continuing.\n   * @private\n   */\n  _handleKeyUpEvent(event) {\n    const key = event.keyCode;\n    if (key === Events.Keys.ESCAPE) {\n      this.unhighlightOptionForUnselect();\n    }\n  }\n\n  /**\n   * Makes an ID for the option.\n   *\n   * @param {PrimeElement} option The option to make the ID for.\n   * @private\n   */\n  _makeOptionID(option) {\n    if (this.options.allowDuplicates === true) {\n      let d = new Date().getTime();\n      // UUID ish\n      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n        let r = (d + Math.random() * 16) % 16 | 0;\n        d = Math.floor(d / 16);\n        return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);\n      });\n    }\n    return this.element.getId() + '-option-' + option.getValue().replace(' ', '-');\n  }\n\n  /**\n   * Redraws the widget.\n   * @private\n   */\n  _redraw() {\n    // Remove the currently displayed options\n    this.optionList.getChildren().each(function(option) {\n      option.removeFromDOM();\n    });\n\n    // Add the input option since the select options are inserted before it\n    this.inputOption = PrimeDocument.newElement('<li/>')\n        .appendTo(this.optionList);\n    this.input = PrimeDocument.newElement('<input/>')\n        .addEventListener('click', this._handleClickEvent)\n        .addEventListener('blur', this._handleBlurEvent)\n        .addEventListener('focus', this._handleFocusEvent)\n        .setAttribute('type', 'text')\n        .appendTo(this.inputOption);\n    this.searcher = new Searcher(this.input, this.searchResults, this)\n        .withOptions(this.options)\n        .initialize();\n\n    // Add the selected options\n    let hasSelectedOptions = false;\n    const options = this.element.getOptions();\n    for (let i = 0; i < options.length; i++) {\n      const option = options[i];\n      if (option.isSelected()) {\n        this.selectOption(option);\n        hasSelectedOptions = true;\n      }\n    }\n\n    // Put the placeholder attribute in if the MultipleSelect has no selected options\n    if (!hasSelectedOptions) {\n      this.input.setAttribute('placeholder', this.options.placeholder);\n    }\n\n    this.searcher.resizeInput();\n\n    // If error class handling was enabled and the select box has the error class, add it to the display\n    if (this.options.errorClass && this.element.hasClass(this.options.errorClass)) {\n      this.displayContainer.addClass(this.options.errorClass);\n    }\n  }\n\n  /**\n   * Set the initial options for this widget.\n   * @private\n   */\n  _setInitialOptions() {\n    // Defaults\n    this.options = {\n      allowDuplicates: false,\n      className: 'prime-multiple-select',\n      closeTimeout: 200,\n      customAddEnabled: true,\n      customAddLabel: 'Add Custom Value: ',\n      errorClass: null,\n      initialSelectedOrder: [],\n      noSearchResultsLabel: 'No Matches For: ',\n      placeholder: 'Choose',\n      preserveDisplayedSelectionOrder: false,\n      searchFunction: Searcher.selectSearchFunction,\n      removeIcon: 'X'\n    };\n\n    const userOptions = Utils.dataSetToOptions(this.element);\n    for (let option in userOptions) {\n      if (userOptions.hasOwnProperty(option)) {\n        this.options[option] = userOptions[option];\n      }\n    }\n  }\n}\n\nexport {MultipleSelect};\n","/*\n * Copyright (c) 2020, Inversoft Inc., All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific\n * language governing permissions and limitations under the License.\n */\n'use strict';\n\nimport {PrimeElement} from \"../Document/PrimeElement.js\";\nimport {Utils} from \"../Utils.js\";\n\nclass Reorder {\n  /**\n   * Constructs a new Reorder object for the given element.\n   *\n   * @param {PrimeElement|Element|EventTarget} element The Prime Element for containing the re-orderable items.\n   * @constructor\n   */\n  constructor(element) {\n    Utils.bindAll(this);\n\n    this.element = PrimeElement.wrap(element);\n    this._setInitialOptions();\n  }\n\n  /**\n   * Destroy this widget.\n   *\n   * @returns {Reorder} This.\n   */\n  destroy() {\n    this.element.removeEventListener('click', this._handleMoveDownClick);\n    this.element.removeEventListener('click', this._handleMoveUpClick);\n    return this;\n  }\n\n  /**\n   * Initializes the widget by attaching event listeners to the element.\n   *\n   * @returns {Reorder} This.\n   */\n  initialize() {\n    this.element.addDelegatedEventListener('click', this.options.moveDownSelector, this._handleMoveDownClick);\n    this.element.addDelegatedEventListener('click', this.options.moveUpSelector, this._handleMoveUpClick);\n\n    this._refreshButtonStates();\n    return this;\n  }\n\n  /**\n   * Move the item down.\n   *\n   * @param item {PrimeElement|Element} the item to move.\n   * @returns {Reorder} This.\n   */\n  moveDown(item) {\n    if (item !== null) {\n      item.getNextSibling().insertBefore(item);\n    }\n\n    this._refreshButtonStates();\n\n    if (this.options.reorderCallback) {\n      this.options.reorderCallback(this, item);\n    }\n\n    return this;\n  }\n\n  /**\n   * Move the item up.\n   *\n   * @param item {PrimeElement|Element} the item to move.\n   * @returns {Reorder} This.\n   */\n  moveUp(item) {\n    if (item !== null) {\n      item.getPreviousSibling().insertAfter(item);\n    }\n\n    this._refreshButtonStates();\n\n    if (this.options.reorderCallback) {\n      this.options.reorderCallback(this, item);\n    }\n\n    return this;\n  }\n\n  /**\n   * Sets the selector which is used to identify the re-orderable items in the container.\n   *\n   * @param itemSelector {String} The item selector.\n   * @returns {Reorder} This.\n   */\n  withItemSelector(itemSelector) {\n    this.options.itemSelector = itemSelector;\n    return this;\n  }\n\n  /**\n   * Sets the selector which is used to identify the move down button within the re-orderable item.\n   *\n   * @param moveDownSelector {String} The move down button selector.\n   * @returns {Reorder} This.\n   */\n  withDownSelector(moveDownSelector) {\n    this.options.moveDownSelector = moveDownSelector;\n    return this;\n  }\n\n  /**\n   * Sets the selector which is used to identify the move up button within the re-orderable item.\n   *\n   * @param moveUpSelector {String} The move up button selector.\n   * @returns {Reorder} This.\n   */\n  withMoveUpSelector(moveUpSelector) {\n    this.options.moveUpSelector = moveUpSelector;\n    return this;\n  }\n\n  /**\n   * Sets a callback function to be used after an element changes order.\n   *\n   * @param reorderCallback {function} The optional callback function to call after an element changes order. This\n   *        function will be provided with the item that just moved.\n   * @returns {Reorder} This.\n   */\n  withReorderCallback(reorderCallback) {\n    this.options.reorderCallback = reorderCallback;\n    return this;\n  }\n\n  /**\n   * Set more than one option at a time by providing a map of key value pairs. This is considered an advanced\n   * method to set options on the widget. The caller needs to know what properties are valid in the options object.\n   *\n   * @param {Object} options Key value pair of configuration options.\n   * @returns {Reorder} This.\n   */\n  withOptions(options) {\n    if (!Utils.isDefined(options)) {\n      return this;\n    }\n\n    for (let option in options) {\n      if (options.hasOwnProperty(option)) {\n        this.options[option] = options[option];\n      }\n    }\n    return this;\n  }\n\n  /**\n   * Redraw the state of this widget. This may be called if you have added additional items to be re-ordered.\n   *\n   * @returns {Reorder} This.\n   */\n  redraw() {\n    this._refreshButtonStates();\n    return this;\n  }\n\n  /* ===================================================================================================================\n   * Private methods\n   * ===================================================================================================================*/\n\n  /**\n   * Handle the Move Down click event.\n   *\n   * @param {Event} event The event.\n   * @private\n   */\n  _handleMoveDownClick(event) {\n    Utils.stopEvent(event);\n\n    const target = new PrimeElement(event.target);\n    const item = target.queryUp(this.options.itemSelector);\n    this.moveDown(item);\n  }\n\n  /**\n   * Handle the Move Up click event.\n   *\n   * @param {Event} event The event.\n   * @private\n   */\n  _handleMoveUpClick(event) {\n    Utils.stopEvent(event);\n\n    const target = new PrimeElement(event.target);\n    const item = target.queryUp(this.options.itemSelector);\n    this.moveUp(item);\n  }\n\n  /**\n   * Handle a 'refresh' to ensure the buttons are in the correct state.\n   * @private\n   */\n  _refreshButtonStates() {\n    const items = this.element.query(this.options.itemSelector);\n    if (items.length === 0) {\n      return;\n    }\n\n    if (items.length === 1) {\n      // Only one item, all buttons are disabled\n      items[0].queryFirst(this.options.moveDownSelector).addClass('disabled');\n      items[0].queryFirst(this.options.moveUpSelector).addClass('disabled');\n      items[0].setDataAttribute('index', 0);\n      return;\n    }\n\n    // More than one item\n    items.each(function(element, index) {\n      if (index === 0) {\n        // First element\n        element.queryFirst(this.options.moveUpSelector).addClass('disabled');\n        element.queryFirst(this.options.moveDownSelector).removeClass('disabled');\n      } else if (index === (items.length - 1)) {\n        // Last element\n        element.queryFirst(this.options.moveUpSelector).removeClass('disabled');\n        element.queryFirst(this.options.moveDownSelector).addClass('disabled');\n      } else {\n        // Enable these up and down buttons\n        element.queryFirst(this.options.moveDownSelector).removeClass('disabled');\n        element.queryFirst(this.options.moveUpSelector).removeClass('disabled');\n      }\n\n      // Set the index data attribute\n      element.setDataAttribute('index', index);\n    }.bind(this));\n  }\n\n  /**\n   * Set the initial options for this widget.\n   * @private\n   */\n  _setInitialOptions() {\n    // Defaults\n    this.options = {\n      itemSelector: 'data-item',\n      moveDownSelector: 'a.down',\n      moveUpSelector: 'a.up',\n      reorderCallback: null\n    };\n\n    const userOptions = Utils.dataSetToOptions(this.element);\n    for (let option in userOptions) {\n      if (userOptions.hasOwnProperty(option)) {\n        this.options[option] = userOptions[option];\n      }\n    }\n  }\n}\n\nexport {Reorder};\n","/*\n * Copyright (c) 2016-2017, Inversoft Inc., All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific\n * language governing permissions and limitations under the License.\n */\n'use strict';\n\nimport {Utils} from \"../Utils.js\";\nimport {PrimeElement} from \"../Document/PrimeElement.js\";\n\n//Some externs to make intellij linter shutup. :p\n/**\n * @external TouchEvent\n */\n\n/**\n * @property {Array} changedTouches\n * @name TouchEvent#changedTouches\n */\n\n/**\n * @class Touchable\n */\nclass Touchable {\n  /**\n   * Constructs a new Touchable object for the given element.\n   *\n   * @param {PrimeElement|Element|EventTarget} element The Prime Element for the Touchable widget.\n   * @param {Function} [eventPropagationHandler] A Function that handles how the event is handled for the touchstart,\n   * touchend, touchmove, and touchcancel events. This Function takes the event object as its only parameter.\n   * @constructor\n   */\n  constructor(element, eventPropagationHandler) {\n    Utils.bindAll(this);\n\n    this.element = PrimeElement.wrap(element);\n    this.eventPropagationHandler = eventPropagationHandler;\n  }\n\n  /**\n   * Destroys the Touchable Widget\n   */\n  destroy() {\n    this.element\n        .removeEventListener('touchstart', this._handleTouchStart)\n        .removeEventListener('touchmove', this._handleTouchMove)\n        .removeEventListener('touchcancel', this._handleTouchCancel)\n        .removeEventListener('touchend', this._handleTouchEnd)\n        .removeEventListenersByPattern(/Prime\\.Widgets\\.Touchable:.+/)\n  }\n\n  /**\n   * Initializes the widget by attaching all of the event listeners to the element.\n   *\n   * @returns {Touchable} This.\n   */\n  initialize() {\n    this.element\n        .addEventListener('touchstart', this._handleTouchStart)\n        .addEventListener('touchmove', this._handleTouchMove)\n        .addEventListener('touchcancel', this._handleTouchCancel)\n        .addEventListener('touchend', this._handleTouchEnd);\n    return this;\n  }\n\n  /**\n   * Provide a handler that will be called when a long press is detected.\n   *\n   * @param {Function} handler The event handler.\n   * @returns {Touchable} This\n   */\n  withLongPressHandler(handler) {\n    this.element.addEventListener('Touchable:longPress', handler);\n    return this;\n  }\n\n  /**\n   * Provide a handler that will be called when a move event is detected.\n   *\n   * @param {Function} handler The event handler.\n   * @returns {Touchable} This\n   */\n  withMoveHandler(handler) {\n    this.element.addEventListener('Touchable:move', handler);\n    return this;\n  }\n\n  /**\n   * Provide a handler that will be called when a long press is detected.\n   *\n   * @param {Function} handler The event handler.\n   * @returns {Touchable} This\n   */\n  withSwipeDownHandler(handler) {\n    this.element.addEventListener('Touchable:swipeDown', handler);\n    return this;\n  }\n\n  /**\n   * Provide a handler that will be called when a swipe left event is detected.\n   *\n   * @param {Function} handler The event handler.\n   * @returns {Touchable} This\n   */\n  withSwipeLeftHandler(handler) {\n    this.element.addEventListener('Touchable:swipeLeft', handler);\n    return this;\n  }\n\n  /**\n   * Provide a handler that will be called when a swipe right event is detected.\n   *\n   * @param {Function} handler The event handler.\n   * @returns {Touchable} This\n   */\n  withSwipeRightHandler(handler) {\n    this.element.addEventListener('Touchable:swipeRight', handler);\n    return this;\n  }\n\n  /**\n   * Provide a handler that will be called when a swipe up event is detected.\n   *\n   * @param {Function} handler The event handler.\n   * @returns {Touchable} This\n   */\n  withSwipeUpHandler(handler) {\n    this.element.addEventListener('Touchable:swipeUp', handler);\n    return this;\n  }\n\n  /* ===================================================================================================================\n   * Private methods\n   * ===================================================================================================================*/\n\n  /**\n   * Collects all of the touch data at the end of the touch and calculates the distances and times.\n   *\n   * @param {TouchEvent} event The TouchEvent.\n   * @private\n   */\n  _collectTouchData(event) {\n    const touchPoints = event.changedTouches.length;\n    if (touchPoints > 1) {\n      return;\n    }\n\n    const touch = event.changedTouches[0];\n    this.elapsedTime = new Date().getTime() - this.touchStarted;\n    this.touchEndX = touch.pageX;\n    this.touchEndY = touch.pageY;\n    this.touchX = this.touchStartX - this.touchEndX;\n    this.touchY = this.touchStartY - this.touchEndY;\n  }\n\n  /**\n   * Called when all processing is finished and the handlers are called based on direction and time of the touches.\n   *\n   * @private\n   */\n  _finished() {\n    // Make sure this was a swipe\n    const event = {\n      elapsedTime: this.elapsedTime,\n      touchStartX: this.touchStartX,\n      touchStartY: this.touchStartY,\n      touchEndX: this.touchEndX,\n      touchEndY: this.touchEndY,\n      touchX: this.touchX,\n      touchY: this.touchY,\n      element: this.element,\n      target: this.element.domElement\n    };\n    event.swipe = Math.abs(event.touchX) > 50 || Math.abs(event.touchY) > 50;\n    event.swipeX = event.swipe && Math.abs(event.touchX) > Math.abs(event.touchY);\n    event.swipeY = event.swipe && !event.swipeX;\n    event.longPress = !event.swipe && event.elapsedTime > 500;\n\n    if (event.longPress) {\n      this.element.fireCustomEvent('Touchable:longPress', event);\n    } else if (event.swipeX && event.touchX > 0) {\n      this.element.fireCustomEvent('Touchable:swipeLeft', event);\n    } else if (event.swipeX) {\n      this.element.fireCustomEvent('Touchable:swipeRight', event);\n    } else if (event.swipeY && event.touchY > 0) {\n      this.element.fireCustomEvent('Touchable:swipeUp', event);\n    } else if (event.swipeY) {\n      this.element.fireCustomEvent('Touchable:swipeDown', event);\n    }\n  }\n\n  /**\n   * Handle the touch cancel event.\n   *\n   * @param {TouchEvent} event The touch event.\n   * @private\n   */\n  _handleTouchCancel(event) {\n    this._collectTouchData(event);\n    this._finished();\n    if (Utils.isDefined(this.eventPropagationHandler)) {\n      this.eventPropagationHandler(event);\n    }\n  }\n\n  /**\n   * Handle the touch end event.\n   *\n   * @param {TouchEvent} event The touch event.\n   * @private\n   */\n  _handleTouchEnd(event) {\n    this._collectTouchData(event);\n    this._finished();\n    if (Utils.isDefined(this.eventPropagationHandler)) {\n      this.eventPropagationHandler(event);\n    }\n  }\n\n  /**\n   * Handle the touch move event.\n   *\n   * @param {TouchEvent} event The touch event.\n   * @private\n   */\n  _handleTouchMove(event) {\n    this.element.fireEvent('Touchable:move', event);\n    if (Utils.isDefined(this.eventPropagationHandler)) {\n      this.eventPropagationHandler(event);\n    }\n  }\n\n  /**\n   * Handle the touch start event.\n   *\n   * @param {TouchEvent} event The touch event.\n   * @private\n   */\n  _handleTouchStart(event) {\n    const touchPoints = event.changedTouches.length;\n    if (touchPoints > 1) {\n      if (Utils.isDefined(this.eventPropagationHandler)) {\n        this.eventPropagationHandler(event);\n      }\n\n      return;\n    }\n\n    const touch = event.changedTouches[0];\n    this.touchStarted = new Date().getTime();\n    this.touchStartX = touch.pageX;\n    this.touchStartY = touch.pageY;\n    if (Utils.isDefined(this.eventPropagationHandler)) {\n      this.eventPropagationHandler(event);\n    }\n  }\n}\n\nexport {Touchable};\n","/*\n * Copyright (c) 2015-2017, Inversoft Inc., All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific\n * language governing permissions and limitations under the License.\n */\n'use strict';\n\nimport {PrimeDocument} from \"../PrimeDocument.js\";\nimport {PrimeElement} from \"../Document/PrimeElement.js\";\nimport {Touchable} from \"./Touchable.js\";\nimport {Utils} from \"../Utils.js\";\n\nclass SideMenu {\n  /**\n   * Constructs the side menu.\n   *\n   * @param {PrimeElement|Element} button The button element that is used to open the side menu.\n   * @param {PrimeElement|Element} sideMenuElement The side menu element that will be \"hidden\" and \"show\".\n   * @constructor\n   */\n  constructor(button, sideMenuElement) {\n    Utils.bindAll(this);\n    this.sideMenu = PrimeElement.wrap(sideMenuElement);\n    this.button = PrimeElement.wrap(button);\n    this._setInitialOptions();\n  }\n\n  /**\n   * Closes the side menu.\n   *\n   * @returns {SideMenu} This.\n   */\n  close() {\n    if (!PrimeDocument.bodyElement.hasClass(this.options.closedClass)) {\n      PrimeDocument.bodyElement.addClass(this.options.closedClass);\n    }\n\n    if (PrimeDocument.bodyElement.hasClass(this.options.openClass)) {\n      PrimeDocument.bodyElement.removeClass(this.options.openClass);\n    }\n\n    return this;\n  }\n\n  /**\n   * Initializes the widget by attaching the event listener to the menu button.\n   *\n   * @returns {SideMenu}\n   */\n  initialize() {\n    this.button.addEventListener('click', this._handleClickEvent);\n    return this;\n  }\n\n  /**\n   * @returns {boolean} True if the side menu is currently open.\n   */\n  isOpen() {\n    return this.sideMenu.getLeft() >= 0;\n    // return PrimeDocument.bodyElement.hasClass('prime-side-menu-open') || !PrimeDocument.bodyElement.hasClass('prime-side-menu-closed');\n  }\n\n  /**\n   * Opens the mobile nav.\n   * @returns {SideMenu} This.\n   */\n  open() {\n    if (PrimeDocument.bodyElement.hasClass(this.options.closedClass)) {\n      PrimeDocument.bodyElement.removeClass(this.options.closedClass);\n    }\n\n    if (!PrimeDocument.bodyElement.hasClass(this.options.openClass)) {\n      PrimeDocument.bodyElement.addClass(this.options.openClass);\n    }\n\n    this.touchable = new Touchable(PrimeDocument.bodyElement).withSwipeLeftHandler(this._handleSwipeLeft);\n    return this;\n  }\n\n  /**\n   * Set more than one option at a time by providing a map of key value pairs. This is considered an advanced\n   * method to set options on the widget. The caller needs to know what properties are valid in the options object.\n   *\n   * @param {Object} options Key value pair of configuration options.\n   * @returns {SideMenu} This.\n   */\n  withOptions(options) {\n    if (!Utils.isDefined(options)) {\n      return this;\n    }\n\n    for (let option in options) {\n      if (options.hasOwnProperty(option)) {\n        this.options[option] = options[option];\n      }\n    }\n    return this;\n  }\n\n  /* ===================================================================================================================\n   * Private methods\n   * ===================================================================================================================*/\n\n  /**\n   * Handles the click event on the side menu button and calls either the open or close function.\n   *\n   * @private\n   */\n  _handleClickEvent(event) {\n    Utils.stopEvent(event);\n    if (this.isOpen()) {\n      this.close();\n    } else {\n      this.open();\n    }\n  }\n\n  /**\n   * Handles the synthetic swipe left event that Prime.js provides.\n   *\n   * @private\n   */\n  _handleSwipeLeft() {\n    if (this.isOpen()) {\n      this.close();\n    }\n\n    if (Utils.isDefined(this.touchable)) {\n      this.touchable.destroy();\n      this.touchable = null;\n    }\n  }\n\n  /**\n   * Set the initial options for this widget.\n   * @private\n   */\n  _setInitialOptions() {\n    // Defaults\n    this.options = {\n      closedClass: 'prime-side-menu-closed',\n      openClass: 'prime-side-menu-open'\n    };\n\n    const userOptions = Utils.dataSetToOptions(this.sideMenu);\n    for (let option in userOptions) {\n      if (userOptions.hasOwnProperty(option)) {\n        this.options[option] = userOptions[option];\n      }\n    }\n  }\n}\n\nexport {SideMenu}\n","/*\n * Copyright (c) 2017, Inversoft Inc., All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific\n * language governing permissions and limitations under the License.\n */\n'use strict';\n\nconst PrimeStorage = {\n  /**\n   * True if local storage is supported.\n   * @type {boolean} true if local storage is supported. Local in this case being used to indicate either type 'local' or 'session'.\n   */\n  supported: typeof(Storage) !== 'undefined',\n\n  /**\n   * Set an object into session storage.\n   * @param key {string} the key to store the object.\n   * @param object {object} the object to store.\n   */\n  setSessionObject: function(key, object) {\n    PrimeStorage._setObject(sessionStorage, key, object);\n  },\n\n  /**\n   * Retrieve an object from session storage.\n   * @param key {string} the key that was used to store the object.\n   * @return {object} the stored object or null if it does not exist or local storage is not supported.\n   */\n  getSessionObject: function(key) {\n    return PrimeStorage._getObject(sessionStorage, key);\n  },\n\n  /**\n   * Set an object into local storage storage.\n   * @param key {string} the key to store the object.\n   * @param object {object} the object to store.\n   */\n  setLocalObject: function(key, object) {\n    PrimeStorage._setObject(localStorage, key, object);\n  },\n\n  /**\n   * Retrieve an object from local storage.\n   * @param key {string} the key that was used to store the object.\n   * @return {object} the stored object or null if it does not exist or local storage is not supported.\n   */\n  getLocalObject: function(key) {\n    return PrimeStorage._getObject(localStorage, key);\n  },\n\n  /* ===================================================================================================================\n   * Private methods\n   * ===================================================================================================================*/\n\n  _getObject: function(storage, key) {\n    if (PrimeStorage.supported) {\n      const item = storage.getItem(key);\n      if (item !== null) {\n        return JSON.parse(item);\n      }\n    }\n\n    return null;\n  },\n\n  _setObject: function(storage, key, object) {\n    if (PrimeStorage.supported) {\n      storage.setItem(key, JSON.stringify(object));\n    }\n  }\n};\n\nexport {PrimeStorage};\n","/*\n * Copyright (c) 2014-2017, Inversoft Inc., All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific\n * language governing permissions and limitations under the License.\n */\n'use strict';\n\nimport {PrimeElement} from \"../Document/PrimeElement.js\";\nimport {Utils} from \"../Utils.js\";\nimport {PrimeStorage} from \"../Storage.js\";\nimport {PrimeDocument} from \"../PrimeDocument.js\";\n\nclass SplitButton {\n  /**\n   * Constructs a new SplitButton object for the given element.\n   *\n   * The markup must be a specific structure in order for the SplitButton to remember the last action the user took\n   * as well as show and hide the menu of items.\n   *\n   * Here's the format for the elements.\n   *\n   * <pre>\n   *   &lt;div class=\"split-button\"&gt;\n   *     &lt;a href=\"#\"&gt;Loading... &lt;/a&gt;\n   *     &lt;button type=\"button\"&gt;&lt;/button&gt;\n   *     &lt;div type=\"menu\"&gt;\n   *       &lt;a class=\"item\" href=\"/admin/foo/add/\"&gt;Add&lt;/a&gt;\n   *       &lt;a class=\"item\" href=\"/admin/foo/delete/\"&gt;Delete&lt;/a&gt;\n   *     &lt;/div&gt;\n   *   &lt;/ul&gt;\n   * </pre>\n   *\n   * Also, it is important to understand how to attach event listeners to the SplitButton. You cannot attach them to\n   * the individual menu items since those will never be clicked. Instead, you must attach them to the div at the top\n   * and handle all the events from inside. This is due to how the split button changes the main button based on the\n   * action the user took last.\n   *\n   * @param element {PrimeElement|Element|EventTarget} The element to transform into a split button.\n   * @constructor\n   */\n  constructor(element) {\n    Utils.bindAll(this);\n\n    this.element = PrimeElement.wrap(element);\n    this.currentAction = this.element.queryFirst('a');\n    if (this.currentAction === null) {\n      throw new TypeError('The SplitButton element must contain an <a> that is the currently selected action.');\n    }\n    this.loading = this.currentAction;\n\n    this.button = this.element.queryFirst('button');\n    if (this.button === null) {\n      throw new TypeError('The SplitButton element must contain a <button> that is used to open it.');\n    }\n\n    this.menu = this.element.queryFirst('.menu');\n    if (this.menu === null) {\n      throw new TypeError('The SplitButton element must contain a <div class=\"menu\"> that contains the menu items.');\n    }\n\n    this.items = this.menu.query('.item');\n    if (this.items.length === 0) {\n      throw new TypeError('The SplitButton element must contain at least one item.');\n    }\n\n    this.actionIndex = null;\n    this.options = {};\n    this._setInitialOptions();\n  }\n\n  /**\n   * Removes the event listeners.\n   */\n  destroy() {\n    this.button.removeEventListener('click', this._handleButtonClick);\n  }\n\n  /**\n   * Initializes the SplitButton by setting up all the event listeners and managing the default action or the last action\n   * that the user took.\n   */\n  initialize() {\n    this.button.addEventListener('click', this._handleButtonClick);\n    this.items.each(item => item.addEventListener('click', this._handleItemClick));\n    this.redraw();\n    return this;\n  }\n\n  redraw() {\n    // Load the last action (if any)\n    let actionId = null;\n    if (PrimeStorage.supported && this.options.localStorageKey !== null) {\n      actionId = PrimeStorage.getSessionObject(this.options.localStorageKey);\n      if (actionId !== null) {\n        this.selectAction(actionId);\n      }\n    }\n\n    // If no action is selected from local storage, select the default\n    if (actionId === null) {\n      this.selectDefaultAction();\n    }\n\n    return this;\n  }\n\n  selectAction(actionId) {\n    const item = PrimeDocument.queryById(actionId);\n    if (item !== null) {\n      let classes = '';\n      if (this.loading !== null) {\n        classes = this.loading.getAttribute('class');\n        this.loading.removeFromDOM();\n        this.loading = null;\n      } else {\n        classes = this.currentAction.getAttribute('class');\n        this.currentAction.setAttribute('class', this.currentAction.getAttribute('data-original-class'));\n        this.currentAction.removeFromDOM();\n        this.currentAction.prependTo(this.menu);\n      }\n\n      item.setAttribute('data-original-class', item.getAttribute('class'));\n      item.setAttribute('class', classes);\n      item.removeFromDOM();\n      item.prependTo(this.element);\n      this.currentAction = item;\n    } else {\n      // This shouldn't infinitely recurse because that method always finds something\n      this.selectDefaultAction();\n    }\n\n    // this.currentAction.setAttribute('href', item.getAttribute('href'));\n    // this.currentAction.setHTML(item.getHTML());\n    return this;\n  }\n\n  selectDefaultAction() {\n    // Find the default\n    let actionId = null;\n    for (let i = 0; i < this.items.length; i++) {\n      if (this.items[i].hasClass('default')) {\n        actionId = this.items[i].getId();\n        break;\n      }\n    }\n\n    // Fall back if it wasn't found\n    if (actionId === null) {\n      actionId = this.items[0].getId();\n    }\n\n    // Select the default (or first item)\n    if (actionId !== null) {\n      this._saveLastAction(actionId);\n      this.selectAction(actionId);\n    }\n\n    return this;\n  }\n\n  withLocalStorageKey(localStorageKey) {\n    this.options.localStorageKey = localStorageKey;\n    return this;\n  }\n\n  withOptions(options) {\n    if (!Utils.isDefined(options)) {\n      return this;\n    }\n\n    for (let option in options) {\n      if (options.hasOwnProperty(option)) {\n        this.options[option] = options[option];\n      }\n    }\n\n    return this;\n  }\n\n  /* ===================================================================================================================\n   * Private methods\n   * ===================================================================================================================*/\n\n  /**\n   * Handles the button click event.\n   * @private\n   */\n  _handleButtonClick(event) {\n    Utils.stopEvent(event);\n    if (this.menu.isVisible()) {\n      this.menu.hide();\n    } else {\n      this.menu.show();\n    }\n  }\n\n  /**\n   * Handles the item click event to update the last action in local storage (if enabled).\n   * @private\n   */\n  _handleItemClick(event) {\n    for (let i = 0; i < this.items.length; i++) {\n      if (this.items[i].domElement === event.target) {\n        let actionId = this.items[i].getId();\n        this._saveLastAction(actionId);\n        this.selectAction(actionId);\n        this.menu.hide();\n        break;\n      }\n    }\n  }\n\n  _saveLastAction(actionId) {\n    if (PrimeStorage.supported && this.options.localStorageKey !== null) {\n      PrimeStorage.setSessionObject(this.options.localStorageKey, actionId);\n    }\n  }\n\n  /**\n   * Set the initial options for this widget.\n   * @private\n   */\n  _setInitialOptions() {\n    // Defaults\n    this.options = {\n      localStorageKey: null\n    };\n\n    const userOptions = Utils.dataSetToOptions(this.element);\n    for (let option in userOptions) {\n      if (userOptions.hasOwnProperty(option)) {\n        this.options[option] = userOptions[option];\n      }\n    }\n  }\n}\n\nexport {SplitButton};\n","/*\n * Copyright (c) 2017-2018, Inversoft Inc., All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific\n * language governing permissions and limitations under the License.\n */\n'use strict';\n\nimport {Utils} from \"../Utils.js\";\nimport {PrimeElement} from \"../Document/PrimeElement.js\";\nimport {PrimeStorage} from \"../Storage.js\";\n\nclass Table {\n  /**\n   * Constructs a new Table object for the given table element.\n   *\n   * @param {PrimeElement|Element} element The table element.\n   * @constructor\n   */\n  constructor(element) {\n    Utils.bindAll(this);\n\n    this.column = null;\n    this.columnIndex = 0;\n    this.sortAscending = true;\n\n    this.element = PrimeElement.wrap(element);\n    this.thead = this.element.queryFirst('thead');\n    this.tbody = this.element.queryFirst('tbody');\n\n    if (!this.element.is('table')) {\n      throw new TypeError('The element you passed in is not a table element.');\n    }\n\n    this._setInitialOptions();\n  }\n\n  /**\n   * Initializes the table widget.\n   *\n   * @returns {Table} This.\n   */\n  initialize() {\n    // Sortable by default unless it is disabled\n    if (this.element.getDataAttribute('sortable') !== 'false') {\n      this._initializeSort();\n    }\n\n    // Initialize the checkbox handling\n    this.selectAll = this.element.queryFirst('thead > tr > th input[type=\"checkbox\"]');\n    if (this.selectAll !== null) {\n      this.selectAll.addEventListener('change', this._handleSelectAllChange);\n    }\n\n    this.element.query('tbody > tr > td input[type=\"checkbox\"]').addEventListener('click', this._handleCheckboxEvent);\n    this.checkedCount = 0;\n    this.numberofCheckboxes = this.element.query('tbody td input[type=\"checkbox\"]').length;\n\n    return this;\n  }\n\n  /**\n   * Sort the table.\n   */\n  sort() {\n    this._clearSortIndicators();\n\n    if (this.column.hasClass('sort-up')) {\n      this.column.removeClass('sort-up').addClass('sort-down');\n      this.sortAscending = false;\n    } else if (this.column.hasClass('sort-down')) {\n      this.column.removeClass('sort-down').addClass('sort-up');\n      this.sortAscending = true;\n    } else {\n      this.column.addClass('sort-up');\n      this.sortAscending = true;\n    }\n\n    // Collect the values to sort\n    const rows = [];\n    this.tbody.query('tr').each(function(element) {\n      rows.push(element);\n    });\n\n    rows.sort(this._comparator);\n    let i = 0;\n    const length = rows.length;\n    if (this.sortAscending) {\n      for (i = 0; i <  length; i++) {\n        this.tbody.appendElement(rows[i]);\n      }\n    } else {\n      for (i = length; i > 0; i--) {\n        this.tbody.appendElement(rows[i - 1]);\n      }\n    }\n\n    // Save current sorted column state in local storage.\n    if (PrimeStorage.supported && this.options.localStorageKey !== null) {\n      const data = {\n        columnIndex: this.columnIndex,\n        sortAscending: this.sortAscending\n      };\n      PrimeStorage.setSessionObject(this.options.localStorageKey, data);\n    }\n  }\n\n  /**\n   * Sets a callback on a checkbox event.\n   *\n   * @param {function} callback The callback function\n   * @returns {Table} This.\n   */\n  withCheckEventCallback(callback) {\n    this.options.checkEventCallback = callback;\n    return this;\n  }\n\n  /**\n   * Enables local storage of the sorted column. This key is required to enable local storage of the sorted column.\n   *\n   * @param {String} key The local storage key.\n   * @returns {Table} This.\n   */\n  withLocalStorageKey(key) {\n    this.options.localStorageKey = key;\n    return this;\n  }\n\n  /**\n   * Set more than one option at a time by providing a map of key value pairs. This is considered an advanced\n   * method to set options on the widget. The caller needs to know what properties are valid in the options object.\n   *\n   * @param {Object} options Key value pair of configuration options.\n   * @returns {Table} This.\n   */\n  withOptions(options) {\n    if (!Utils.isDefined(options)) {\n      return this;\n    }\n\n    for (let option in options) {\n      if (options.hasOwnProperty(option)) {\n        this.options[option] = options[option];\n      }\n    }\n    return this;\n  }\n\n  /* ===================================================================================================================\n   * Private methods\n   * ===================================================================================================================*/\n\n  /**\n   * Remove the ascending and descending sort classes on every column except the current column being sorted.\n   * @private\n   */\n  _clearSortIndicators() {\n    this.thead.query('th').each((function(element) {\n      if (element.domElement !== this.column.domElement) {\n        element.removeClass('sort-up sort-down');\n      }\n    }).bind(this));\n  }\n\n  /**\n   * Sort function to be used by the .sort() method.\n   * @param a The first row to compare\n   * @param b The second row to compare\n   * @returns {number}\n   * @private\n   */\n  _comparator(a, b) {\n    const sortType = this.thead.query('th')[this.columnIndex].getDataAttribute('sortType') || 'string';\n    if (sortType !== 'string' && sortType !== 'number') {\n      throw new Error('Unsupported sort type. [string] or [number] are the two supported sort types.');\n    }\n\n    const cell1 = a.query('td')[this.columnIndex];\n    const cell2 = b.query('td')[this.columnIndex];\n\n    const sortValue1 = cell1.getDataAttribute('sortValue');\n    const sortValue2 = cell2.getDataAttribute('sortValue');\n\n    // Prefer the data-sort-value if provided\n    let value1 = sortValue1 || cell1.getTextContent().toLowerCase();\n    let value2 = sortValue2 || cell2.getTextContent().toLowerCase();\n\n    if (sortType === 'string') {\n      return value1.localeCompare(value2);\n    } else {\n      value1 = this._toNumber(value1);\n      value2 = this._toNumber(value2);\n\n      if (value1 < value2) {\n        return -1;\n      }\n\n      if (value1 > value2) {\n        return 1;\n      }\n\n      return 0;\n    }\n  }\n\n  // noinspection JSMethodCanBeStatic\n  /**\n   * Return the column index where 0 is the first column in the table.\n   * @param column {PrimeElement} the column to determine the index of\n   * @returns {number} a positive integer representing the index of the column in the table.\n   * @private\n   */\n  _getColumnIndex(column) {\n    let columnIndex = 0;\n    let current = column;\n    let previous = column;\n    while (previous !== null) {\n      previous = current.getPreviousSibling();\n      current = previous;\n      columnIndex++;\n    }\n\n    return columnIndex - 1;\n  }\n\n  _handleCheckboxEvent(event) {\n    const target = new PrimeElement(event.currentTarget);\n    const currentCheckedCount = this.checkedCount;\n    this.checkedCount = this.checkedCount + (target.isChecked() ? 1 : -1);\n\n    if (this.selectAll !== null) {\n      if (currentCheckedCount === this.numberofCheckboxes && this.numberofCheckboxes !== this.checkedCount) {\n        this.selectAll.setChecked(false);\n      } else if (currentCheckedCount !== this.numberofCheckboxes && this.numberofCheckboxes === this.checkedCount) {\n        this.selectAll.setChecked(true);\n      }\n    }\n\n    if (this.options.checkEventCallback !== null) {\n      this.options.checkEventCallback({\n        checkedCount: this.checkedCount\n      });\n    }\n  }\n\n  _handleSelectAllChange() {\n    if (this.selectAll.isChecked()) {\n      this.element.query('tbody tr > td input[type=\"checkbox\"]').each(function(e) {\n        if (!e.isChecked()) {\n          e.setChecked(true);\n          this.checkedCount++;\n        }\n      }.bind(this));\n    } else {\n      this.element.query('tbody tr > td input[type=\"checkbox\"]').each(function(e) {\n        if (e.isChecked()) {\n          e.setChecked(false);\n          this.checkedCount--;\n        }\n      }.bind(this));\n    }\n\n    if (this.options.checkEventCallback !== null) {\n      this.options.checkEventCallback({\n        checkedCount: this.checkedCount\n      });\n    }\n  }\n\n  /**\n   * Handle the click event on the sortable column.\n   * @param event {MouseEvent} the click event\n   * @private\n   */\n  _handleSortableColumnClick(event) {\n    Utils.stopEvent(event);\n    const target = new PrimeElement(event.currentTarget);\n    this.column = target;\n    this.columnIndex = this._getColumnIndex(target);\n\n    this.sort();\n  }\n\n  /**\n   * Add the click event listener to the column unless it matches the ignore selector.\n   * @param column {PrimeElement} the column element to initialize.\n   * @private\n   */\n  _initializeColumn(column) {\n    if (!column.is('[data-sortable=\"false\"]') && column.queryFirst('input[type=\"checkbox\"]') === null) {\n      column.addClass('sortable').addEventListener('click', this._handleSortableColumnClick);\n    }\n  }\n\n  _initializeSort() {\n    this.thead.query('th').each(this._initializeColumn);\n\n    if (PrimeStorage.supported && this.options.localStorageKey !== null) {\n      const state = PrimeStorage.getSessionObject(this.options.localStorageKey);\n      if (state !== null) {\n        this.columnIndex = state.columnIndex;\n        this.sortAscending = state.sortAscending;\n\n        this.column = this.thead.query('th')[this.columnIndex];\n        if (this.sortAscending) {\n          this.column.addClass('sort-down');\n        } else {\n          this.column.addClass('sort-up');\n        }\n\n        this.sort();\n      }\n    }\n  }\n\n  /**\n   * Set the initial options for this widget.\n   * @private\n   */\n  _setInitialOptions() {\n    // Defaults\n    this.options = {\n      localStorageKey: null,\n      checkEventCallback: null\n    };\n\n    const userOptions = Utils.dataSetToOptions(this.element);\n    for (let option in userOptions) {\n      if (userOptions.hasOwnProperty(option)) {\n        this.options[option] = userOptions[option];\n      }\n    }\n  }\n\n  // noinspection JSMethodCanBeStatic\n  _toNumber(value) {\n    const number = Number(value);\n    if (isNaN(value)) {\n      console.error(new Error('Expected value [' + value + '] to be a number.'));\n      return value;\n    }\n    return number;\n  }\n}\n\nexport {Table};\n","/*\n * Copyright (c) 2015-2018, Inversoft Inc., All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific\n * language governing permissions and limitations under the License.\n */\n'use strict';\n\nimport {Utils} from \"../Utils.js\";\nimport {PrimeElement} from \"../Document/PrimeElement.js\";\nimport {PrimeDocument} from \"../PrimeDocument.js\";\nimport {PrimeStorage} from \"../Storage.js\";\nimport {PrimeRequest} from \"../PrimeRequest.js\";\n\nclass Tabs {\n  /**\n   * Constructs a new Tabs object for the given ul element.\n   *\n   * @param {PrimeElement|Element|EventTarget} element The ul element to build the tab widget from\n   * @constructor\n   */\n  constructor(element) {\n    Utils.bindAll(this);\n\n    this.element = PrimeElement.wrap(element);\n    if (this.element.getTagName().toLowerCase() === 'ul') {\n      this.tabsContainer = this.element;\n    } else {\n      this.tabsContainer = this.element.queryFirst('ul');\n    }\n\n    if (this.tabsContainer === null) {\n      throw new TypeError('Tabs requires a ul element. The passed element does not contain a ul element');\n    }\n\n    this._setInitialOptions();\n    this.tabContents = {};\n    this.tabs = {};\n    this.tabArray = [];\n    this.selectedTab = null;\n  }\n\n  /**\n   * Destroys the Tabs widget\n   */\n  destroy() {\n    this.tabsContainer.query('a').each(function(a) {\n      a.removeEventListener('click', this._handleClick);\n    }.bind(this));\n\n    for (let i = 0; i < this.tabs.length; i++) {\n      this.tabs[i].removeClass(this.options.tabContentClass);\n    }\n  }\n\n  /**\n   * Hides the tab for the given Id.\n   *\n   * @param id The Id of the tab to hide.\n   */\n  hideTab(id) {\n    const tab = this.tabs[id];\n    tab.hide();\n    this.redraw();\n  }\n\n  /**\n   * Initializes the Tabs widget. Call this after you have set all the initial options.\n   *\n   * @returns {Tabs} This.\n   */\n  initialize() {\n    this.tabsContainer.query('li:not(.disabled)').each(function(tab) {\n      const a = tab.queryFirst('a').addEventListener('click', this._handleClick);\n      const dataSet = tab.getDataSet();\n\n      const href = a.getAttribute('href');\n      const isAnchor = href.charAt(0) === '#';\n      if (isAnchor) {\n        dataSet.tabId = href.substring(1);\n        dataSet.tabUrl = '';\n      } else {\n        dataSet.tabId = href;\n        dataSet.tabUrl = href;\n      }\n\n      this.tabs[dataSet.tabId] = tab;\n      this.tabArray.push(tab);\n\n      let content = PrimeDocument.queryById(dataSet.tabId);\n      if (content === null && isAnchor) {\n        throw new Error('A div is required with the following ID [' + dataSet.tabId + ']');\n      } else if (content === null) {\n        content = PrimeDocument.newElement('<div>').insertAfter(this.element).setAttribute('id', href);\n      }\n\n      content.hide();\n\n      content.addClass(this.options.tabContentClass);\n      this.tabContents[dataSet.tabId] = content;\n    }.bind(this));\n\n    if (this.options.deepLinkingEnabled) {\n      const tabId = window.location.hash.replace(/^#/, '');\n      if (Utils.isDefined(tabId) && Utils.isDefined(this.tabs[tabId])) {\n        this.selectTab(tabId);\n      }\n    }\n\n    this.redraw();\n    return this;\n  }\n\n  /**\n   * Re-applies the first-child, last-child, and active classes based on the current state of the tabs. If there\n   * is no tab that is active, this also selects the first tab that is visible.\n   */\n  redraw() {\n    let firstVisible = null;\n    let lastVisible = null;\n    let selectNew = false;\n    let noneActive = true;\n    for (let i = 0; i < this.tabArray.length; i++) {\n      if (this.tabArray[i].isVisible()) {\n        if (firstVisible === null) {\n          firstVisible = this.tabArray[i];\n        }\n\n        lastVisible = this.tabArray[i];\n\n        if (this.tabArray[i].hasClass('selected')) {\n          noneActive = false;\n        }\n      } else if (this.tabArray[i].hasClass('selected')) {\n        selectNew = true;\n      }\n\n      this.tabArray[i].removeClass('first-visible-tab');\n      this.tabArray[i].removeClass('last-visible-tab');\n    }\n\n    firstVisible.addClass('first-visible-tab');\n    lastVisible.addClass('last-visible-tab');\n\n    let tabId = null;\n    if (selectNew || noneActive) {\n      if (PrimeStorage.supported && this.options.localStorageKey !== null) {\n        const state = PrimeStorage.getSessionObject(this.options.localStorageKey);\n        if (state !== null) {\n          tabId = state.tabId;\n        }\n      }\n\n      // If no tabId was found or the tab is not currently visible, select the first visible\n      if (tabId === null || !this.tabs[tabId] || !this.tabs[tabId].isVisible()) {\n        tabId = firstVisible.getDataSet().tabId;\n      }\n\n      this.selectTab(tabId);\n    }\n\n    // If error class handling was enabled, add the error class to the tab and set focus\n    if (this.options.errorClass) {\n      for (tabId in this.tabContents) {\n        if (this.tabContents.hasOwnProperty(tabId)) {\n          const errorElement = this.tabContents[tabId].queryFirst('.' + this.options.errorClass);\n          if (errorElement !== null) {\n            this.tabs[tabId].queryFirst('a').addClass(this.options.errorClass);\n            this.selectTab(tabId);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Select the active tab. Sets the active class on the li and shows only the corresponding tab content.\n   *\n   * @param id The Id of the tab to select.\n   */\n  selectTab(id) {\n    if (this.selectedTab !== null && this.selectedTab.getDataSet().tabId === id) {\n      return;\n    }\n\n    for (const tabId in this.tabs) {\n      if (this.tabs.hasOwnProperty(tabId)) {\n        this.tabs[tabId].removeClass('selected');\n      }\n    }\n\n    this.tabs[id].addClass('selected');\n    this.selectedTab = this.tabs[id];\n    for (const tabId in this.tabContents) {\n      if (this.tabContents.hasOwnProperty(tabId) && tabId === id) {\n        this.tabContents[tabId].show('block');\n        if (this.options.selectCallback) {\n          this.options.selectCallback(this.tabs[tabId], this.tabContents[tabId]);\n        }\n      } else {\n        this.tabContents[tabId].hide();\n      }\n    }\n\n    // Save current selected tab state in local storage. The JSON object isn't necessary at the moment,\n    // but we can tack on other properties as needed for additional state in the future.\n    if (PrimeStorage.supported && this.options.localStorageKey !== null) {\n      const data = {\n        tabId: id\n      };\n      PrimeStorage.setSessionObject(this.options.localStorageKey, data);\n    }\n\n    const ajaxURL = this.selectedTab.getDataSet().tabUrl;\n    if (ajaxURL !== '') {\n      this.selectedTab.addClass('loading');\n      this.tabContents[id].setHTML('');\n      this.tabContents[id].addClass('loading');\n      new PrimeRequest(ajaxURL, 'GET')\n          .withSuccessHandler(this._handleAJAXResponse)\n          .withErrorHandler(this._handleAJAXResponse)\n          .go();\n    }\n  }\n\n  /**\n   * Shows the tab for the given Id.\n   *\n   * @param {String} id The Id of the tab to hide.\n   */\n  showTab(id) {\n    this.tabs[id].show();\n    this.redraw();\n  }\n\n  /**\n   * Adds a callback for AJAX calls. This is invoked after the AJAX load completes and the HTML is inserted into the\n   * DOM. The function is passed the container for the tab that was selected.\n   *\n   * @param {Function} callback The callback function.\n   * @returns {Tabs} This Tabs.\n   */\n  withAJAXCallback(callback) {\n    this.options.ajaxCallback = callback;\n    return this;\n  }\n\n  /**\n   * Disable the default behavior of allowing a deep link provided on the URL to set the default tab during render.\n   *\n   * @returns {Tabs} This Tabs.\n   */\n  withDeepLinkingDisabled() {\n    this.options.deepLinkingEnabled = false;\n    return this;\n  }\n\n  /**\n   * Enable error class handling. When this option is used, if the specified error class is found on any element\n   * in the tab content the same error class will be added to the tab to identify the tab contains errors.\n   *\n   * @returns {Tabs} This Tabs.\n   */\n  withErrorClassHandling(errorClass) {\n    this.options.errorClass = errorClass;\n    return this;\n  }\n\n  /**\n   * Enables local storage of the currently selected tab. If the user navigates away from the page and back, the same\n   * tab will be selected. This key is how the selected tab is stored in local storage and by setting a key you also\n   * enable this feature.\n   *\n   * @param {?String} key The local storage key.\n   * @returns {Tabs} This Tabs.\n   */\n  withLocalStorageKey(key) {\n    this.options.localStorageKey = key;\n    return this;\n  }\n\n  /**\n   * Set more than one option at a time by providing a map of key value pairs. This is considered an advanced\n   * method to set options on the widget. The caller needs to know what properties are valid in the options object.\n   *\n   * @param {Object} options Key value pair of configuration options.\n   * @returns {Tabs} This Tabs.\n   */\n  withOptions(options) {\n    if (!Utils.isDefined(options)) {\n      return this;\n    }\n\n    for (let option in options) {\n      if (options.hasOwnProperty(option)) {\n        this.options[option] = options[option];\n      }\n    }\n    return this;\n  }\n\n  /**\n   * Specifies a callback function that is called whenever tabs are changed.\n   *\n   * @param {?Function} callback The callback function.\n   * @returns {Tabs} This Tabs.\n   */\n  withSelectCallback(callback) {\n    this.options.selectCallback = callback;\n    return this;\n  }\n\n  /**\n   * Sets the class name for the tab content elements.\n   *\n   * @param className {String} The class name.\n   * @returns {Tabs}\n   */\n  withTabContentClass(className) {\n    this.options.tabContentClass = className;\n    return this;\n  }\n\n  /* ===================================================================================================================\n   * Private methods\n   * ===================================================================================================================*/\n\n  /**\n   * Handles the AJAX response.\n   *\n   * @param {XMLHttpRequest} xhr The AJAX response.\n   * @private\n   */\n  _handleAJAXResponse(xhr) {\n    this.selectedTab.removeClass('loading');\n    const container = this.tabContents[this.selectedTab.getDataSet().tabId];\n    container.removeClass('loading');\n    container.setHTML(xhr.responseText);\n\n    if (this.options.ajaxCallback !== null) {\n      this.options.ajaxCallback(container);\n    }\n  }\n\n  /**\n   * Handle the tab click by showing the corresponding panel and hiding the others.\n   *\n   * @param {MouseEvent} event The click event on the anchor tag.\n   * @private\n   */\n  _handleClick(event) {\n    Utils.stopEvent(event);\n    const a = new PrimeElement(event.currentTarget);\n    if (!a.hasClass('disabled')) {\n      const href = a.getAttribute('href');\n      if (href.charAt(0) === '#') {\n        this.selectTab(href.substring(1));\n      } else {\n        this.selectTab(href);\n      }\n    }\n  }\n\n  /**\n   * Set the initial options for this widget.\n   * @private\n   */\n  _setInitialOptions() {\n    // Defaults\n    this.options = {\n      ajaxCallback: null,\n      errorClass: null,\n      deepLinkingEnabled: true,\n      localStorageKey: null,\n      selectCallback: null,\n      tabContentClass: 'prime-tab-content'\n    };\n\n    const userOptions = Utils.dataSetToOptions(this.element);\n    for (let option in userOptions) {\n      if (userOptions.hasOwnProperty(option)) {\n        this.options[option] = userOptions[option];\n      }\n    }\n  }\n}\n\nexport {Tabs};\n","/*\n * Copyright (c) 2017-2018, Inversoft Inc., All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific\n * language governing permissions and limitations under the License.\n */\n'use strict';\n\nimport {PrimeDocument} from \"../PrimeDocument.js\";\nimport {PrimeElement} from \"../Document/PrimeElement.js\";\nimport {PrimeWindow} from \"../Window.js\";\nimport {Utils} from \"../Utils.js\";\n\nconst open = [];\n\nclass Tooltip {\n  /**\n   * Constructs a new Tooltip object for the given element.\n   *\n   * @param {PrimeElement|Element|EventTarget} element The Prime Element for the Tooltip widget.\n   * @constructor\n   */\n  constructor(element) {\n    Utils.bindAll(this);\n\n    this.element = PrimeElement.wrap(element);\n    this._setInitialOptions();\n  }\n\n  static get open() {\n    return open;\n  }\n\n  /**\n   * Hides the tooltip.\n   *\n   * @returns {Tooltip} This.\n   */\n  hide() {\n    if (Tooltip.open.length > 0) {\n      Tooltip.open.forEach(function(t) {\n        t.removeFromDOM();\n      });\n    }\n    return this;\n  }\n\n  /**\n   * Initializes the widget by attaching event listeners to the element.\n   *\n   * @returns {Tooltip} This.\n   */\n  initialize() {\n    this.element.addEventListener('mouseenter', this._handleMouseEnter).addEventListener('mouseleave', this._handleMouseLeave);\n    PrimeDocument.addEventListener('scroll', this._handleMouseLeave);\n    return this;\n  }\n\n  /**\n   * Shows the tooltip.\n   *\n   * @returns {Tooltip} This.\n   */\n  show() {\n    const text = this.element.getDataSet()[this.options.dataName] || this.element.getAttribute('title');\n    const zIndex = this.element.getRelativeZIndex();\n    let classNames = this.options.className + ' ' + this.element.getTagName().toLocaleLowerCase();\n    if (this.options.additionalClasses !== null) {\n      classNames = classNames + ' ' + this.options.additionalClasses\n    }\n    const tooltip = PrimeDocument.newElement('<span>')\n        .appendTo(PrimeDocument.bodyElement)\n        .addClass(classNames)\n        .setHTML(text)\n        .setStyle('zIndex', zIndex + 100);\n\n    const left = this.element.getLeft();\n    const top = this.element.getTop();\n    const width = this.element.getWidth();\n    const tooltipWidth = tooltip.getWidth();\n    const tooltipHeight = tooltip.getHeight();\n\n    tooltip.setLeft(left - (tooltipWidth / 2) + (width / 2));\n    tooltip.setTop(top - tooltipHeight - 8);\n\n    // If the tooltip is too close to the top of the screen invert it and move it under the element\n    if ((top - tooltipHeight - 8) < 0) {\n      tooltip.setTop(top + this.element.getHeight() + 8).addClass('inverted');\n    }\n\n    Tooltip.open.push(tooltip);\n    return this;\n  }\n\n  /**\n   * Sets the class name to use when creating the tooltip.\n   *\n   * @param additionalClasses {?String} The class name or spaces separated names.\n   * @returns {Tooltip} This.\n   */\n  withAdditionalClassNames(additionalClasses) {\n    this.options.additionalClasses = additionalClasses;\n    return this;\n  }\n\n  /**\n   * Sets the class name to use when creating the tooltip.\n   *\n   * @param className {String} The class name.\n   * @returns {Tooltip} This.\n   */\n  withClassName(className) {\n    this.options.className = className;\n    return this;\n  }\n\n  /**\n   * Set data-set name to pull the tooltip text from.\n   *\n   * @param {string} name The data-set name.\n   * @returns {Tooltip} This.\n   */\n  withDataName(name) {\n    this.options.dataName = name;\n    return this;\n  }\n\n  /**\n   * Set more than one option at a time by providing a map of key value pairs. This is considered an advanced\n   * method to set options on the widget. The caller needs to know what properties are valid in the options object.\n   *\n   * @param {Object} options Key value pair of configuration options.\n   * @returns {Tooltip} This.\n   */\n  withOptions(options) {\n    if (!Utils.isDefined(options)) {\n      return this;\n    }\n\n    for (let option in options) {\n      if (options.hasOwnProperty(option)) {\n        this.options[option] = options[option];\n      }\n    }\n    return this;\n  }\n\n  /* ===================================================================================================================\n   * Private methods\n   * ===================================================================================================================*/\n\n  /**\n   * Handles the mouse enter event to show the tooltip.\n   *\n   * @private\n   */\n  _handleMouseEnter() {\n    this.show();\n  }\n\n  /**\n   * Handles the mouse exit event to hide the tooltip.\n   *\n   * @private\n   */\n  _handleMouseLeave() {\n    this.hide();\n  }\n\n  /**\n   * Set the initial options for this widget.\n   * @private\n   */\n  _setInitialOptions() {\n    // Defaults\n    this.options = {\n      additionalClasses: null,\n      className: 'prime-tooltip',\n      dataName: 'tooltip'\n    };\n\n    const userOptions = Utils.dataSetToOptions(this.element);\n    for (let option in userOptions) {\n      if (userOptions.hasOwnProperty(option)) {\n        this.options[option] = userOptions[option];\n      }\n    }\n  }\n}\n\nPrimeDocument.onReady(function() {\n  // Fix browser issues with tooltips sticking around on back-button navigation\n  PrimeWindow.addEventListener('beforeunload', function() {\n    if (Tooltip.open.length > 0) {\n      Tooltip.open.forEach(function(t) {\n        t.removeFromDOM();\n      });\n    }\n  });\n});\n\nexport {Tooltip};\n","/*\n * Copyright (c) 2016-2017, Inversoft Inc., All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific\n * language governing permissions and limitations under the License.\n */\n'use strict';\n\nimport {PrimeElement} from \"../Document/PrimeElement.js\";\nimport {Utils} from \"../Utils.js\";\n\nclass TreeView {\n  /**\n   * Constructs a new TreeView object for the given element.\n   *\n   * @param {PrimeElement|Element|EventTarget} element The Prime Element for the TreeView widget.\n   * @constructor\n   */\n  constructor(element) {\n    Utils.bindAll(this);\n    this.element = PrimeElement.wrap(element);\n    this._setInitialOptions();\n  }\n\n  /**\n   * Initializes the element by traverse its children to find all of the anchor tags with the folder-toggle class (or\n   * whatever you set the class to).\n   *\n   * @returns {TreeView} This.\n   */\n  initialize() {\n    this.element.query('a.' + this.options.folderToggleClassName).each(function(e) {\n      e.addEventListener('click', this._handleClick);\n    }.bind(this));\n    return this;\n  }\n\n  /**\n   * Sets the folder toggle class name.\n   *\n   * @param className {String} The class name.\n   * @returns {TreeView} This.\n   */\n  withFolderToggleClassName(className) {\n    this.options.folderToggleClassName = className;\n    return this;\n  }\n\n  /* ===================================================================================================================\n   * Private methods\n   * ===================================================================================================================*/\n\n  // noinspection JSMethodCanBeStatic\n  /**\n   * Handles the click event.\n   * @private\n   */\n  _handleClick(event) {\n    Utils.stopEvent(event);\n    const a = PrimeElement.wrap(event.target);\n    const li = a.getParent();\n    if (a.hasClass('open')) {\n      a.removeClass('open');\n      li.removeClass('open');\n    } else {\n      a.addClass('open');\n      li.addClass('open');\n    }\n  }\n\n  /**\n   * Set the initial options for this widget.\n   * @private\n   */\n  _setInitialOptions() {\n    // Defaults\n    this.options = {\n      folderToggleClassName: 'prime-folder-toggle'\n    };\n\n    const userOptions = Utils.dataSetToOptions(this.element);\n    for (const option in userOptions) {\n      if (userOptions.hasOwnProperty(option)) {\n        this.options[option] = userOptions[option];\n      }\n    }\n  }\n}\n\nexport {TreeView};\n","/*\n * Copyright (c) 2012-2018, Inversoft Inc., All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific\n * language governing permissions and limitations under the License.\n */\n'use strict';\n\nimport {Utils} from \"./Utils.js\";\nimport {PrimeElement} from \"./Document/PrimeElement.js\";\n\nclass BaseTransition {\n  /**\n   * Constructs a BaseTransition for the given element.\n   *\n   * @param {PrimeElement|Element|EventTarget} element The Prime Element the effect will be applied to.\n   * @param {number} endValue The end value for the transition.\n   * @constructor\n   */\n  constructor(element, endValue) {\n    Utils.bindAll(this);\n    this.element = PrimeElement.wrap(element);\n    this.duration = 1000;\n    this.endFunction = null;\n    this.endValue = endValue;\n    this.iterations = 20;\n  }\n\n  /**\n   * Sets the function that is called when the effect has completed.\n   *\n   * @param {Function} endFunction The function that is called when the effect is completed.\n   * @returns {BaseTransition} This Effect.\n   */\n  withEndFunction(endFunction) {\n    this.endFunction = endFunction;\n    return this;\n  }\n\n  /**\n   * Sets the duration of the fade-out effect.\n   *\n   * @param {number} duration The duration in milliseconds.\n   * @returns {BaseTransition} This Effect.\n   */\n  withDuration(duration) {\n    if (duration < 100) {\n      throw new TypeError('Duration should be greater than 100 milliseconds or it won\\'t really be noticeable');\n    }\n\n    this.duration = duration;\n    return this;\n  }\n\n  /*\n   * Protected functions\n   */\n\n  /**\n   * Changes an integer style property of the Element iteratively over a given period of time from one value to another\n   * value.\n   *\n   * @protected\n   * @param {Function} getFunction The function on the element to call to get the current value for the transition.\n   * @param {Function} setFunction The function on the element to call to set the new value for the transition.\n   */\n  _changeNumberStyleIteratively(getFunction, setFunction) {\n    let currentValue = getFunction.call(this.element);\n    const step = Math.abs(this.endValue - currentValue) / this.iterations;\n\n    // Close around ourselves\n    const self = this;\n    const stepFunction = function(last) {\n      if (last) {\n        currentValue = self.endValue;\n      } else {\n        if (currentValue < self.endValue) {\n          currentValue += step;\n        } else {\n          currentValue -= step;\n        }\n      }\n\n      setFunction.call(self.element, currentValue);\n    };\n\n    Utils.callIteratively(this.duration, this.iterations, stepFunction, this._internalEndFunction);\n  }\n\n  /* ===================================================================================================================\n   * Private Methods\n   * ===================================================================================================================*/\n\n  /**\n   * Handles the call back at the end.\n   *\n   * @private\n   */\n  _internalEndFunction() {\n    this._subclassEndFunction(this);\n\n    if (this.endFunction) {\n      this.endFunction(this);\n    }\n  }\n\n  /**\n   * Virtual function stub\n   *\n   * @private\n   */\n  _subclassEndFunction() {\n  }\n}\n\nclass Fade extends BaseTransition {\n  /**\n   * Constructs a new Fade for the given element. The fade effect uses the CSS opacity style and supports the IE alpha\n   * style. The duration defaults to 1000 milliseconds (1 second). This changes the opacity over the duration from 1.0 to\n   * 0.0. At the end, this hides the element so that it doesn't take up any space.\n   *\n   * @constructor\n   * @param {PrimeElement|Element|EventTarget} element The Prime Element to fade out.\n   */\n  constructor(element) {\n    super(element, 0.0);\n  }\n\n  /**\n   * Internal call back at the end of the transition. This hides the element so it doesn't take up space.\n   *\n   * @override\n   * @private\n   */\n  _subclassEndFunction() {\n    this.element.hide();\n  }\n\n  /**\n   * Executes the fade effect on the element using the opacity style.\n   */\n  go() {\n    this._changeNumberStyleIteratively(this.element.getOpacity, this.element.setOpacity);\n  }\n}\n\nclass Appear extends BaseTransition {\n  /**\n   * Constructs a new Appear for the given element. The appear effect uses the CSS opacity style and supports the IE\n   * alpha style. The duration defaults to 1000 milliseconds (1 second). This first sets the opacity to 0, then it shows\n   * the element and finally it raises the opacity.\n   *\n   * @constructor\n   * @param {PrimeElement|Element|EventTarget} element The Prime Element to appear.\n   * @param {number} [opacity=1.0] The final opacity to reach when the effect is complete. Defaults to 1.0.\n   */\n  constructor(element, opacity) {\n    if (!Utils.isDefined(opacity)) {\n      opacity = 1.0;\n    }\n    super(element, opacity);\n  }\n\n  /**\n   * Executes the appear effect on the element using the opacity style.\n   */\n  go() {\n    this.element.setOpacity(0.0);\n    this.element.show();\n    this._changeNumberStyleIteratively(this.element.getOpacity, this.element.setOpacity);\n  }\n}\n\nclass ScrollTo extends BaseTransition {\n  /**\n   * Constructs a new ScrollTo for the given element. The duration defaults to 1000 milliseconds (1 second).\n   *\n   * @param {PrimeElement|Element|EventTarget} element The Prime Element to scroll.\n   * @param {number} position The position to scroll the element to.\n   * @constructor\n   */\n  constructor(element, position) {\n    super(element, position);\n\n    this.axis = 'vertical';\n  }\n\n  /**\n   * Set the scroll axis, either 'horizontal' or 'vertical'. Default is 'vertical'.\n   *\n   * @param {string} axis The axis to scroll.\n   * @returns {ScrollTo}\n   */\n  withAxis(axis) {\n    this.axis = axis || 'vertical';\n    return this;\n  }\n\n  /**\n   * Executes the scroll effect on the element.\n   */\n  go() {\n    if (this.axis === 'vertical') {\n      this._changeNumberStyleIteratively(this.element.getScrollTop, this.element.scrollTo);\n    } else {\n      this._changeNumberStyleIteratively(this.element.getScrollLeft, this.element.scrollLeftTo);\n    }\n  }\n}\n\nclass SlideOpen {\n  /**\n   * Creates a SlideOpen effect on the given element.\n   *\n   * @param {PrimeElement} element The element.\n   * @constructor\n   */\n  constructor(element) {\n    Utils.bindAll(this);\n\n    this.element = element;\n    if (this.isOpen()) {\n      element.domElement.primeVisibleHeight = element.getHeight();\n    } else {\n      element.setStyle('height', 'auto');\n      element.domElement.primeVisibleHeight = element.getHeight();\n      element.setStyle('height', '0');\n    }\n\n    this.isTransitioning = false;\n\n    this._setInitialOptions();\n  }\n\n  close() {\n    if (!this.isOpen()) {\n      return;\n    }\n\n    // Set a fixed height instead of auto so that the transition runs, but only if the element is \"open\"\n    this.element.setHeight(this.element.domElement.primeVisibleHeight);\n    this.isTransitioning = true;\n\n    // This timeout is needed since the height change takes time to run\n    setTimeout(function() {\n      this.element.setHeight(0);\n      this.element.removeClass('open');\n      this.isTransitioning = false;\n\n      if (this.options.closeCallback !== null) {\n        this.options.closeCallback();\n      }\n    }.bind(this), this.options.timeout);\n  }\n\n  isOpen() {\n    return this.element.getHeight() !== 0 || this.element.hasClass('open');\n  }\n\n  open() {\n    if (this.isOpen()) {\n      return;\n    }\n\n    this.element.setHeight(this.element.domElement.primeVisibleHeight);\n    this.isTransitioning = true;\n\n    setTimeout(function() {\n      this.element.setHeight('auto');\n      this.element.addClass('open');\n      this.isTransitioning = false;\n\n      if (this.options.openCallback !== null) {\n        this.options.openCallback();\n      }\n    }.bind(this), this.options.timeout);\n  }\n\n  toggle() {\n    if (this.isOpen()) {\n      this.close();\n    } else {\n      this.open();\n    }\n  }\n\n  /**\n   * Set the close callback function.\n   *\n   * @param {?Function} callback The close callback\n   * @returns {SlideOpen} This.\n   */\n  withCloseCallback(callback) {\n    this.options.closeCallback = callback;\n    return this;\n  }\n\n  /**\n   * Set the open callback function.\n   *\n   * @param {?Function} callback The open callback\n   * @returns {SlideOpen} This.\n   */\n  withOpenCallback(callback) {\n    this.options.openCallback = callback;\n    return this;\n  }\n\n  /**\n   * Set more than one option at a time by providing a map of key value pairs. This is considered an advanced\n   * method to set options on the widget. The caller needs to know what properties are valid in the options object.\n   *\n   * @param {Object} options Key value pair of configuration options.\n   * @returns {SlideOpen} This.\n   */\n  withOptions(options) {\n    if (!Utils.isDefined(options)) {\n      return this;\n    }\n\n    for (let option in options) {\n      if (options.hasOwnProperty(option)) {\n        this.options[option] = options[option];\n      }\n    }\n    return this;\n  }\n\n  /* ===================================================================================================================\n   * Private methods\n   * ===================================================================================================================*/\n\n  /**\n   * Set the initial options of the widget.\n   * @private\n   */\n  _setInitialOptions() {\n    // Defaults\n    this.options = {\n      openCallback: null,\n      closeCallback: null,\n      timeout: 310\n    };\n\n    const userOptions = Utils.dataSetToOptions(this.element);\n    for (let option in userOptions) {\n      if (userOptions.hasOwnProperty(option)) {\n        this.options[option] = userOptions[option];\n      }\n    }\n  }\n}\n\nexport {BaseTransition, Fade, Appear, ScrollTo, SlideOpen}\n","/*\n * Copyright (c) 2016-2017, Inversoft Inc., All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific\n * language governing permissions and limitations under the License.\n */\n'use strict';\n\nimport {Utils} from \"./Utils.js\";\n\nclass DataQueue {\n  /**\n   * First-In-First-Out Queue implementation modeled after java.util.Deque interface.\n   *\n   * @constructor\n   */\n  constructor() {\n    Utils.bindAll(this);\n    this._elements = {};\n    this._head = 0;\n    this._tail = 0;\n  }\n\n  /**\n   * Add the element to the head of the queue.\n   *\n   * @param {Object} element An object to store in the queue.\n   * @returns {DataQueue} This Element.\n   */\n  add(element) {\n    this._elements[this._head] = element;\n    this._head++;\n\n    return this;\n  }\n\n  /**\n   * Return true if the queue is empty.\n   *\n   * @returns {boolean} True if the queue is empty, false if not.\n   */\n  isEmpty() {\n    return this._head === this._tail;\n  }\n\n  /**\n   * Return but do not remove the tail of the queue. This is the oldest element in the queue.\n   *\n   * @returns {Object} The object at the tail of the queue, or null if empty.\n   */\n  peek() {\n    if (this.isEmpty()) {\n      return null;\n    }\n\n    return this._elements[this._tail];\n  }\n\n  /**\n   * Return and remove the tail of the queue. This is the oldest element in the queue.\n   *\n   * @returns {Object} the object at the tail of the queue, or null if the queue is empty.\n   */\n  poll() {\n    if (this.isEmpty()) {\n      return null;\n    }\n\n    const object = this._elements[this._tail];\n    delete this._elements[this._tail];\n    this._tail++;\n\n    // The cursor should not go off the end of the queue\n    if (this._cursor < this._tail) {\n      this._cursor = this._tail;\n    }\n\n    return object;\n  }\n\n  /**\n   * Return the size of the queue.\n   *\n   * @returns {Number} The size of the queue.\n   */\n  size() {\n    return this._head - this._tail;\n  }\n\n}\n\nexport {DataQueue};\n","/*\n * Copyright (c) 2013-2017, Inversoft Inc., All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific\n * language governing permissions and limitations under the License.\n */\n'use strict';\n\nimport {Utils} from \"./Utils.js\"\nimport {PrimeElement} from \"./Document/PrimeElement.js\";\n\nclass Template {\n  /**\n   * A Javascript Object that can serve to generate Prime.Document.Element from a source string and optional parameters.\n   *\n   * @constructor\n   * @param {string} template The String that defines the source of the template.\n   */\n  constructor(template) {\n    Utils.bindAll(this);\n    this.init(template);\n  }\n\n  init(template) {\n    this.template = template;\n  }\n\n  /**\n   * Generates a String from the given parameterHash.  Provide a hash of String keys to values.\n   * Keys can be regular text strings, in which case it will look for and replace #{key} as with the value.  You can\n   * also make the key a String \"/key/\", which will be converted to a Regex and run.\n   *\n   * For the value you can provide a straight up String, int, etc, or you can provide a function which will be called\n   * to provide the value\n   *\n   * @param {Object} parameters An object that contains the parameters for the template to replace.\n   * @returns {string} The result of executing the template.\n   */\n  generate(parameters) {\n    parameters = Utils.isDefined(parameters) ? parameters : {};\n    let templateCopy = String(this.template);\n    for (let key in parameters) {\n      if (parameters.hasOwnProperty(key)) {\n        const value = parameters[key];\n        let expressedValue;\n        if (typeof(value) === 'function') {\n          expressedValue = value();\n        } else {\n          expressedValue = value;\n        }\n\n        if (key.indexOf('/') === 0 && key.lastIndexOf('/') === key.length - 1) {\n          templateCopy = templateCopy.replace(new RegExp(key.substring(1, key.length - 1), \"g\"), expressedValue);\n        } else {\n          const expressedKey = \"#{\" + key + \"}\";\n          while (templateCopy.indexOf(expressedKey) !== -1) {\n            templateCopy = templateCopy.replace(expressedKey, expressedValue);\n          }\n        }\n      }\n    }\n\n    return templateCopy;\n  }\n\n  /**\n   * Calls to generate and then appends the resulting value to the inner HTML of the provided primeElement.\n   *\n   * @param {PrimeElement} primeElement The prime Element instance to append the result of executing the template to.\n   * @param {Object} parameters An object that contains the parameters for the template to replace.\n   */\n  appendTo(primeElement, parameters) {\n    if (Utils.isDefined(primeElement)) {\n      primeElement.setHTML(primeElement.getHTML() + this.generate(parameters));\n    } else {\n      throw new TypeError('Please supply an element to append to');\n    }\n  }\n\n  /**\n   * Calls to generate and then inserts the resulting elements into the dom before the primeElement\n   *\n   * @param {PrimeElement} primeElement The prime Element instance to insert the result of executing the template before.\n   * @param {Object} parameters An object that contains the parameters for the template to replace.\n   */\n  insertBefore(primeElement, parameters) {\n    if (Utils.isDefined(primeElement)) {\n      const holder = document.createElement('div');\n      holder.innerHTML = this.generate(parameters);\n      new PrimeElement(holder.children[0]).insertBefore(primeElement);\n    } else {\n      throw new TypeError('Please supply an element to append to');\n    }\n  }\n\n  /**\n   * Calls to generate and then inserts the resulting elements into the dom after the primeElement\n   *\n   * @param {PrimeElement} primeElement The prime Element instance to insert the result of executing the template after.\n   * @param {Object} parameters An object that contains the parameters for the template to replace.\n   */\n  insertAfter(primeElement, parameters) {\n    if (Utils.isDefined(primeElement)) {\n      const holder = document.createElement('div');\n      holder.innerHTML = this.generate(parameters);\n      new PrimeElement(holder.children[0]).insertAfter(primeElement);\n    } else {\n      throw new TypeError('Please supply an element to append to');\n    }\n  }\n}\n\nexport {Template};\n","/*\n * Copyright (c) 2017, Inversoft Inc., All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific\n * language governing permissions and limitations under the License.\n */\n\nimport * as Widgets from \"./Widgets/Widgets.js\"\nimport * as Effects from \"./Effects.js\"\n// Do any polyfill imports here for backwards compatibility\nimport {DataQueue} from \"./DataQueue.js\";\nimport {PrimeRequest} from \"./PrimeRequest.js\";\n\nexport {Browser} from \"./Browser.js\"\nexport {Effects}\nexport {Events} from \"./Events.js\"\nexport {PrimeDate as Date} from \"./Date.js\"\nexport {PrimeDocument as Document} from \"./PrimeDocument.js\"\nexport {PrimeStorage as Storage} from \"./Storage.js\"\nexport {PrimeWindow as Window} from \"./Window.js\"\nexport {Template} from \"./Template.js\"\nexport {Utils} from \"./Utils.js\"\nexport {Widgets}\n\nconst Ajax = {\n  Request: PrimeRequest\n};\n\nconst Data = {\n  Queue: DataQueue\n};\n\nexport {Ajax}\nexport {Data}\n"]}